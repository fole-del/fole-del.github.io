<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欧恩意</title>
  
  
  <link href="https://www.mingsrc.work/atom.xml" rel="self"/>
  
  <link href="https://www.mingsrc.work/"/>
  <updated>2022-02-07T13:39:36.741Z</updated>
  <id>https://www.mingsrc.work/</id>
  
  <author>
    <name>mingming.shi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zinx</title>
    <link href="https://www.mingsrc.work/posts/67527f52"/>
    <id>https://www.mingsrc.work/posts/67527f52</id>
    <published>2022-02-01T01:04:10.547Z</published>
    <updated>2022-02-07T13:39:36.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[Toc]</p><blockquote><p>go环境变量设置  <code>export GOPATH=/home/project</code> </p></blockquote><h1 id="Zinx架构设计"><a href="#Zinx架构设计" class="headerlink" title="Zinx架构设计"></a>Zinx架构设计</h1><h2 id="客户端请求服务器响应的过程"><a href="#客户端请求服务器响应的过程" class="headerlink" title="客户端请求服务器响应的过程"></a>客户端请求服务器响应的过程</h2><ol><li>要有一个客户端对服务器发起请求。</li><li>我们的服务器应该去启动对客户端的处理模块并打开工作池来提升并发量。</li><li>处理客户端的模块开启两个模块，一个负责读客户端请求，一个负责写客户端请求。</li><li>用于读的功能模块，去任务的消息队列里去请求读数据。用于写的功能模块，通过 API 接口，当然我们的 API 不可能只有一个，所以这里肯定是 APIS。</li></ol><p>其过程如下所示：</p><p><img src="/../../../images/Zinx/88b6a670622c32bca3fb8749ee4af60a-0.png" alt="img"></p><h2 id="Zinx功能模块"><a href="#Zinx功能模块" class="headerlink" title="Zinx功能模块"></a>Zinx功能模块</h2><p><img src="/../../../images/Zinx/b342d16a0981046dfc21fe1be21efccb-0.png" alt="img"></p><h1 id="v0-1"><a href="#v0-1" class="headerlink" title="v0.1"></a>v0.1</h1><p>Zinx目录结构如下所示：</p><p><img src="/../../../images/Zinx/cef9bddfb7b6496b4fc8346cf63e7d76-0.png" alt="img"></p><h2 id="iserver-go"><a href="#iserver-go" class="headerlink" title="iserver.go"></a>iserver.go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> ziface<br><br><span class="hljs-comment">// 定义服务器接口</span><br><span class="hljs-keyword">type</span> IServer <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-comment">// 启动服务器</span><br>Start()<br><span class="hljs-comment">// 停止服务器</span><br>Stop()<br><span class="hljs-comment">// 开启业务服务方法</span><br>Server()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="server-go"><a href="#server-go" class="headerlink" title="server.go *"></a>server.go <code>*</code></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">package</span> znet<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;zinx/ziface&quot;</span><br>)<br><br><span class="hljs-comment">// IServer 接口实现，定义一个Server服务类</span><br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br> <span class="hljs-comment">//服务器的名称</span><br>    Name <span class="hljs-type">string</span><br>    <span class="hljs-comment">//tcp4 or other</span><br>    IPVersion <span class="hljs-type">string</span><br>    <span class="hljs-comment">//服务绑定的IP地址</span><br>    IP <span class="hljs-type">string</span><br>    <span class="hljs-comment">//服务绑定的端口</span><br>    Port <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">创建一个服务器句柄</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span> <span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> ziface.IServer  &#123;<br>s := &amp;Server &#123;<br>Name: name,<br>IPVersion:<span class="hljs-string">&quot;tcp4&quot;</span>,<br>IP:<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>Port:<span class="hljs-number">7777</span>,<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><span class="hljs-comment">// 开启网络服务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Server)</span></span> Start() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;[START] Server listenner at IP: %s, Port %d, is starting\n&quot;</span>, s.IP, s.Port)<br><br><span class="hljs-comment">// 开启一个go去做服务端Linster业务</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 1. 获取一个tcp的Addr</span><br>addr, err := net.ResolveTCPAddr(s.IPVersion, fmt.Sprintf(<span class="hljs-string">&quot;%s,%d&quot;</span>, s.IP, s. Port))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;resolve tcp addr err: &quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// 2. 监听服务器地址</span><br>listenner, err := net.ListenTCP(s.IPVersion, addr)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;listen&quot;</span>, s.IPVersion, <span class="hljs-string">&quot;err&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 已经监听成功</span><br>fmt.Println(<span class="hljs-string">&quot;Start zinx Server &quot;</span>, s.Name, <span class="hljs-string">&quot; succ, now listenning……&quot;</span>)<br><br><span class="hljs-comment">// 3 启动server网络连接业务</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// 3.1 阻塞等待客户端建立连接请求</span><br>conn, err := listenner.AcceptTCP()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Accept err &quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><br><span class="hljs-comment">// 3.2 TODO Server.Start() 设置服务器最大连接控制，如果超过最大连接，那么关闭此新的连接</span><br><span class="hljs-comment">// 3.3 TODO Server.Start() 处理该新连接请求的 *业务* 方法，此时应该有handler和conn是绑定的</span><br><span class="hljs-comment">// 我们这里暂时做一个最大512字节的回显服务</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不断地循环从客户端获取数据</span><br><span class="hljs-keyword">for</span> &#123;<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">512</span>)<br>cnt, err := conn.Read(buf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;recv bug err &quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><br><span class="hljs-comment">// 回显</span><br><span class="hljs-keyword">if</span> _, err := conn.Write(buf[:cnt]); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;write back buf err&quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br>&#125;<br>&#125;()<br>&#125;<br>&#125;()<br>&#125;<br><br><span class="hljs-comment">// 停止</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Server)</span></span> Stop() &#123;<br>fmt.Println(<span class="hljs-string">&quot;[STOP] Zinx server, name&quot;</span>, s.Name)<br>&#125;<br><br><span class="hljs-comment">// 开启业务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Server)</span></span> Server()  &#123;<br><br>&#125;<br>  <br></code></pre></td></tr></table></figure><h2 id="server-test-go"><a href="#server-test-go" class="headerlink" title="server_test.go"></a>server_test.go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> znet<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">模拟客户端</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ClientTest</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(<span class="hljs-string">&quot;Client Test ... start&quot;</span>)<br><span class="hljs-comment">// 3秒之后发起测试请求，给服务端开启服务的机会</span><br>time.Sleep(<span class="hljs-number">3</span> * time.Second)<br>conn,err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:7777&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;client start err, exit!&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">for</span> &#123;<br>_, err = conn.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Hello ZINX&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Write error err &quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">512</span>)<br>cnt, err := conn.Read(buf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;read  buf err&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot; server call back: %s, cnt = %d\n&quot;</span>, buf, cnt)<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Server 模块的测试函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestServer</span><span class="hljs-params">(t *testing.T)</span></span>  &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">服务端测试</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 1 创建一个server句柄 s</span><br>s := NewServer(<span class="hljs-string">&quot;[zinx V0.1]&quot;</span>)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">客户端测试</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">go</span> ClientTest()<br><br><span class="hljs-comment">// 2 开启服务</span><br>s.Server()<br> <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="v0-2-实现链接封装业务与业务绑定"><a href="#v0-2-实现链接封装业务与业务绑定" class="headerlink" title="[v0.2] 实现链接封装业务与业务绑定"></a>[v0.2] 实现链接封装业务与业务绑定</h1><p>功能如思维导图所示：</p><p><img src="/../../../images/Zinx/image-20220201232354654.png" alt="image-20220201232354654"></p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p><img src="/../../../images/Zinx/image-20220202175949470.png" alt="image-20220202175949470"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="iconnection-go"><a href="#iconnection-go" class="headerlink" title="iconnection.go"></a>iconnection.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> ziface<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;net&quot;</span><br><br><span class="hljs-comment">// 定义连接接口</span><br><span class="hljs-keyword">type</span> IConnection <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-comment">// 启动连接，让电气概念连接开始工作</span><br>Start()<br><span class="hljs-comment">// 停止连接，结束当前链接状态</span><br>Stop()<br><span class="hljs-comment">// 从当前链接获取原始的socket TCPConn</span><br>GetTCPConnection() *net.TCPConn<br><span class="hljs-comment">// 获取当前链接ID</span><br>GetConnID() <span class="hljs-type">uint32</span><br><span class="hljs-comment">// 获取远程客户端地址信息</span><br>RemoteAddr() net.Addr<br>&#125;<br><br><span class="hljs-comment">// 定义一个统一处理链接业务的接口</span><br><span class="hljs-keyword">type</span> HandFunc <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*net.TCPConn, []<span class="hljs-type">byte</span>, <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">error</span> <br></code></pre></td></tr></table></figure><h3 id="connection-go"><a href="#connection-go" class="headerlink" title="connection.go"></a>connection.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> znet<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;zinx/ziface&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Connection <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// 当前链接的socket TCP套接字</span><br>Conn *net.TCPConn<br><span class="hljs-comment">// 当前连接的ID 也可以称作为SessionID， ID全局唯一</span><br>ConnID <span class="hljs-type">uint32</span><br><span class="hljs-comment">// 当前连接的关闭状态</span><br>isClosed <span class="hljs-type">bool</span><br><span class="hljs-comment">// 该链接的处理方法api</span><br>handleAPI ziface.HandFunc<br><span class="hljs-comment">// 告知该链接已经退出/停止的channel</span><br>ExitBufferChan <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span><br>&#125;<br><br><span class="hljs-comment">// 创建连接的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewConntion</span><span class="hljs-params">(conn *net.TCPConn, connID <span class="hljs-type">uint32</span>, callBack_api ziface.HandFunc)</span></span> *Connection &#123;<br>c := &amp;Connection&#123;<br>Conn: conn,<br>ConnID: connID,<br>isClosed: <span class="hljs-literal">false</span>,<br>handleAPI: callBack_api,<br>ExitBufferChan: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>),<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br><br><span class="hljs-comment">/* 处理conn读数据的Goroutine */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> StartReader()  &#123;<br>fmt.Println(<span class="hljs-string">&quot;Reader Goroutine is running&quot;</span>)<br><span class="hljs-keyword">defer</span> fmt.Println(c.Conn.RemoteAddr().String(), <span class="hljs-string">&quot;conn reader exit&quot;</span>)<br><span class="hljs-keyword">defer</span> c.Stop()<br><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// 读取我们最大的数据到buf中</span><br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>,<span class="hljs-number">512</span>)<br>cnt, err := c.Conn.Read(buf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;recv bug err &quot;</span>, err)<br>c.ExitBufferChan &lt;- <span class="hljs-literal">true</span><br><span class="hljs-keyword">continue</span><br>&#125;<br><br><span class="hljs-comment">// 调用当前链接业务（这里执行的是当前conn的绑定的handle方法）</span><br><span class="hljs-keyword">if</span> err := c.handleAPI(c.Conn, buf, cnt); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;connID &quot;</span>, c.ConnID, <span class="hljs-string">&quot; handle is error&quot;</span>)<br>c.ExitBufferChan &lt;- <span class="hljs-literal">true</span><br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 启动链接，让当前连接开始工作</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> Start()  &#123;<br><span class="hljs-comment">// 开启处理该链接读取客户端数据之后的请求业务</span><br><span class="hljs-keyword">go</span> c.StartReader()<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;- c.ExitBufferChan:<br><span class="hljs-comment">// 得到退出消息，不再阻塞</span><br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 停止连接，结束当前连接状态M</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> Stop()  &#123;<br><span class="hljs-comment">// 1. 如果当前链接已经关闭</span><br><span class="hljs-keyword">if</span> c.isClosed == <span class="hljs-literal">true</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>c.isClosed = <span class="hljs-literal">true</span><br><br><span class="hljs-comment">// TODO Connection Stop() 如果用户注册了该链接的关闭毁掉业务，那么在此刻应该显示调用</span><br><span class="hljs-comment">// 关闭socket链接</span><br>c.Conn.Close()<br><span class="hljs-comment">// 通知从缓冲队列读取数据的业务，该链接已经关闭</span><br>c.ExitBufferChan &lt;- <span class="hljs-literal">true</span><br><span class="hljs-comment">// 关闭该链接全部管道</span><br><span class="hljs-built_in">close</span>(c.ExitBufferChan)<br>&#125;<br><br><span class="hljs-comment">// 从当前连接获取原始的socket TCPConn</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> GetTCPConnection() *net.TCPConn &#123;<br><span class="hljs-keyword">return</span> c.Conn<br>&#125;<br><span class="hljs-comment">// 获取当前ID</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> GetConnID() <span class="hljs-type">uint32</span> &#123;<br><span class="hljs-keyword">return</span> c.ConnID<br>&#125;<br><span class="hljs-comment">// 获取远程客户端地址信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> RemoteAddr() net.Addr &#123;<br><span class="hljs-keyword">return</span> c.Conn.RemoteAddr()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="server-go-代码修改"><a href="#server-go-代码修改" class="headerlink" title="server.go 代码修改"></a>server.go 代码修改</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// TODO server.go 应该有一个自动生成ID的方法</span><br>+<span class="hljs-keyword">var</span> cid <span class="hljs-type">uint32</span> = <span class="hljs-number">0</span><br><span class="hljs-comment">// 3 启动server网络连接业务</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// 3.1 阻塞等待客户端建立连接请求</span><br>conn, err := listenner.AcceptTCP()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Accept err &quot;</span>, err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><br><span class="hljs-comment">// 3.2 TODO Server.Start() 设置服务器最大连接控制，如果超过最大连接，那么关闭此新的连接</span><br><span class="hljs-comment">// 3.3 TODO Server.Start() 处理该新连接请求的 *业务* 方法，此时应该有handler和conn是绑定的</span><br>+dealConn := NewConntion(conn, cid, CallBackToClient)<br>+           cid ++<br><br><span class="hljs-comment">//3.4 启动当前链接的处理业务</span><br>            <span class="hljs-keyword">go</span> dealConn.Start()<br>&#125;<br>&#125;()<br></code></pre></td></tr></table></figure><h1 id="v0-3-实现基础路由模块"><a href="#v0-3-实现基础路由模块" class="headerlink" title="[v0.3] 实现基础路由模块"></a>[v0.3] 实现基础路由模块</h1><blockquote><p>通俗讲就是实现一个类，系统地去回调一些用户的操作</p></blockquote><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p><img src="/../../../images/Zinx/1ef8c2201f35797a7678e54c3e9af24b-0.png" alt="img"></p><blockquote><p><strong>涉及知识点：</strong></p><ol><li>路由功能模块</li></ol></blockquote><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="/../../../images/Zinx/image-20220203160347674.png" alt="image-20220203160347674"></p><h2 id="IRequest消息请求抽象类"><a href="#IRequest消息请求抽象类" class="headerlink" title="IRequest消息请求抽象类"></a>IRequest消息请求抽象类</h2><blockquote><p>把客户端请求的连接信息和请求的数据，放在一个叫 Request 的请求类里，这样的好处是我们可以从 Request 里得到全部客户端的请求信息，也为我们之后拓展框架有一定的作用，一旦客户端有额外的含义的数据信息，都可以放在这个 Request 里。可以理解为每次客户端的全部请求数据，Zinx 都会把它们一起放到一个 Request 结构体里。</p></blockquote><ol><li>创建抽象<code>IRequest</code>层</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> ziface<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    IRequest 接口：</span><br><span class="hljs-comment">    实际上是把客户端请求的链接信息 和 请求的数据 包装到了 Request里</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">type</span> IRequest <span class="hljs-keyword">interface</span>&#123;<br>    GetConnection() IConnection    <span class="hljs-comment">//获取请求连接信息</span><br>    GetData() []<span class="hljs-type">byte</span>            <span class="hljs-comment">//获取请求消息的数据</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当前的抽象层只提供了两个 Getter 方法，所以有个成员应该是必须的，一个是客户端连接，一个是客户端传递进来的数据，当然随着 Zinx 框架的功能丰富，这里面还应该继续添加新的成员。</p><ol start="2"><li>实现<code>Requeset</code>类</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> znet<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;zinx/ziface&quot;</span><br><br><span class="hljs-keyword">type</span> Request <span class="hljs-keyword">struct</span> &#123;<br>    conn ziface.IConnection <span class="hljs-comment">//已经和客户端建立好的 链接</span><br>    data []<span class="hljs-type">byte</span> <span class="hljs-comment">//客户端请求的数据</span><br>&#125;<br><span class="hljs-comment">//获取请求连接信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *Request)</span></span> GetConnection() ziface.IConnection &#123;<br>    <span class="hljs-keyword">return</span> r.conn<br>&#125;<br><span class="hljs-comment">//获取请求消息的数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *Request)</span></span> GetData() []<span class="hljs-type">byte</span> &#123;<br>    <span class="hljs-keyword">return</span> r.data<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IRouter路由配置抽象类"><a href="#IRouter路由配置抽象类" class="headerlink" title="IRouter路由配置抽象类*"></a>IRouter路由配置抽象类<code>*</code></h2><blockquote><p>实现一个非常简单基础的路由功能，目的当然就是为了快速的让 Zinx 步入到路由的阶段。</p></blockquote><ol><li>创建抽象的<code>IRouter</code>层</li></ol><p>我们知道 router 实际上的作用就是，服务端应用可以给 Zinx 框架配置当前链接的处理业务方法，之前的 Zinx-V0.2 我们的 Zinx 框架处理链接请求的方法是固定的，现在是可以自定义，并且有 3 种接口可以重写。</p><p>Handle：是处理当前链接的主业务函数</p><p>PreHandle：如果需要在主业务函数之前有前置业务，可以重写这个方法</p><p>PostHandle:如果需要在主业务函数之后又后置业务，可以重写这个方法</p><p>当然每个方法都有一个唯一的形参 IRequest 对象，也就是客户端请求过来的连接和请求数据，作为我们业务方法的输入数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> ziface<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    路由接口， 这里面路由是 使用框架者给该链接自定的 处理业务方法</span><br><span class="hljs-comment">    路由里的IRequest 则包含用该链接的链接信息和该链接的请求数据信息</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">type</span> IRouter <span class="hljs-keyword">interface</span>&#123;<br>    PreHandle(request IRequest)  <span class="hljs-comment">//在处理conn业务之前的钩子方法</span><br>    Handle(request IRequest)     <span class="hljs-comment">//处理conn业务的方法</span><br>    PostHandle(request IRequest) <span class="hljs-comment">//处理conn业务之后的钩子方法</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>实现<code>Router</code>类</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> znet<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;zinx/ziface&quot;</span><br><br><span class="hljs-comment">//实现router时，先嵌入这个基类，然后根据需要对这个基类的方法进行重写</span><br><span class="hljs-keyword">type</span> BaseRouter <span class="hljs-keyword">struct</span> &#123;&#125;<br><span class="hljs-comment">//这里之所以BaseRouter的方法都为空，</span><br><span class="hljs-comment">// 是因为有的Router不希望有PreHandle或PostHandle</span><br><span class="hljs-comment">// 所以Router全部继承BaseRouter的好处是，不需要实现PreHandle和PostHandle也可以实例化</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(br *BaseRouter)</span></span>PreHandle(req ziface.IRequest)&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(br *BaseRouter)</span></span>Handle(req ziface.IRequest)&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(br *BaseRouter)</span></span>PostHandle(req ziface.IRequest)&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="IServer增添路由添加功能"><a href="#IServer增添路由添加功能" class="headerlink" title="IServer增添路由添加功能"></a>IServer增添路由添加功能</h2><blockquote><p>这一步需要修改原有的链接结构体，同时对服务中的方法进行修改</p></blockquote><h3 id="server类"><a href="#server类" class="headerlink" title="server类"></a>server类</h3><ol><li><code>iserver.go</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> ziface<br><span class="hljs-comment">//定义服务器接口</span><br><span class="hljs-keyword">type</span> IServer <span class="hljs-keyword">interface</span>&#123;<br>    <span class="hljs-comment">//启动服务器方法</span><br>    Start()<br>    <span class="hljs-comment">//停止服务器方法</span><br>    Stop()<br>    <span class="hljs-comment">//开启业务服务方法</span><br>    Serve()<br>    <span class="hljs-comment">//路由功能：给当前服务注册一个路由业务方法，供客户端链接处理使用</span><br>    AddRouter(router IRouter)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><code>server.go</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//iServer 接口实现，定义一个Server服务类</span><br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//服务器的名称</span><br>    Name <span class="hljs-type">string</span><br>    <span class="hljs-comment">//tcp4 or other</span><br>    IPVersion <span class="hljs-type">string</span><br>    <span class="hljs-comment">//服务绑定的IP地址</span><br>    IP <span class="hljs-type">string</span><br>    <span class="hljs-comment">//服务绑定的端口</span><br>    Port <span class="hljs-type">int</span><br>    <span class="hljs-comment">//当前Server由用户绑定的回调router,也就是Server注册的链接对应的处理业务</span><br>    Router ziface.IRouter<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><code>NewServer()</code>方法中的成员初始化</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  创建一个服务器句柄</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span> <span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> ziface.IServer &#123;<br>    s:= &amp;Server &#123;<br>        Name :name,<br>        IPVersion:<span class="hljs-string">&quot;tcp4&quot;</span>,<br>        IP:<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>        Port:<span class="hljs-number">7777</span>,<br>        Router: <span class="hljs-literal">nil</span>,<br>    &#125;<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Connection类"><a href="#Connection类" class="headerlink" title="Connection类"></a>Connection类</h3><ol><li><code>connection.go</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Connection <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//当前连接的socket TCP套接字</span><br>    Conn *net.TCPConn<br>    <span class="hljs-comment">//当前连接的ID 也可以称作为SessionID，ID全局唯一</span><br>    ConnID <span class="hljs-type">uint32</span><br>    <span class="hljs-comment">//当前连接的关闭状态</span><br>    isClosed <span class="hljs-type">bool</span><br>    <span class="hljs-comment">//该连接的处理方法router</span><br>    Router  ziface.IRouter<br>    <span class="hljs-comment">//告知该链接已经退出/停止的channel</span><br>    ExitBuffChan <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> StartReader() &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Reader Goroutine is  running&quot;</span>)<br>    <span class="hljs-keyword">defer</span> fmt.Println(c.RemoteAddr().String(), <span class="hljs-string">&quot; conn reader exit!&quot;</span>)<br>    <span class="hljs-keyword">defer</span> c.Stop()<br>    <span class="hljs-keyword">for</span>  &#123;<br>        <span class="hljs-comment">//读取我们最大的数据到buf中</span><br>        buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">512</span>)<br>        _, err := c.Conn.Read(buf)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;recv buf err &quot;</span>, err)<br>            c.ExitBuffChan &lt;- <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-comment">//得到当前客户端请求的Request数据</span><br>        req := Request&#123;<br>            conn:c,<br>            data:buf,<br>        &#125;<br>        <span class="hljs-comment">//从路由Routers 中找到注册绑定Conn的对应Handle</span><br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(request ziface.IRequest)</span></span> &#123;<br>            <span class="hljs-comment">//执行注册的路由方法</span><br>            c.Router.PreHandle(request)<br>            c.Router.Handle(request)<br>            c.Router.PostHandle(request)<br>        &#125;(&amp;req)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AddRouter"><a href="#AddRouter" class="headerlink" title="AddRouter"></a>AddRouter</h3><p>在<code>server</code>类要实现添加路由的方法<code>AddRouter</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> znet<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>    <span class="hljs-string">&quot;zinx/ziface&quot;</span><br>)<br><span class="hljs-comment">//iServer 接口实现，定义一个Server服务类</span><br><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//服务器的名称</span><br>    Name <span class="hljs-type">string</span><br>    <span class="hljs-comment">//tcp4 or other</span><br>    IPVersion <span class="hljs-type">string</span><br>    <span class="hljs-comment">//服务绑定的IP地址</span><br>    IP <span class="hljs-type">string</span><br>    <span class="hljs-comment">//服务绑定的端口</span><br>    Port <span class="hljs-type">int</span><br>    <span class="hljs-comment">//当前Server由用户绑定的回调router,也就是Server注册的链接对应的处理业务</span><br>    Router ziface.IRouter<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  创建一个服务器句柄</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span> <span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> ziface.IServer &#123;<br>    s:= &amp;Server &#123;<br>        Name :name,<br>        IPVersion:<span class="hljs-string">&quot;tcp4&quot;</span>,<br>        IP:<span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>        Port:<span class="hljs-number">7777</span>,<br>        Router: <span class="hljs-literal">nil</span>,<br>    &#125;<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br><span class="hljs-comment">//============== 实现 ziface.IServer 里的全部接口方法 ========</span><br><span class="hljs-comment">//开启网络服务</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Server)</span></span> Start() &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;[START] Server listenner at IP: %s, Port %d, is starting\n&quot;</span>, s.IP, s.Port)<br>    <span class="hljs-comment">//开启一个go去做服务端Linster业务</span><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-comment">//1 获取一个TCP的Addr</span><br>        addr, err := net.ResolveTCPAddr(s.IPVersion, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, s.IP, s.Port))<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;resolve tcp addr err: &quot;</span>, err)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">//2 监听服务器地址</span><br>        listenner, err:= net.ListenTCP(s.IPVersion, addr)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;listen&quot;</span>, s.IPVersion, <span class="hljs-string">&quot;err&quot;</span>, err)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">//已经监听成功</span><br>        fmt.Println(<span class="hljs-string">&quot;start Zinx server  &quot;</span>, s.Name, <span class="hljs-string">&quot; succ, now listenning...&quot;</span>)<br>        <span class="hljs-comment">//TODO server.go 应该有一个自动生成ID的方法</span><br>        <span class="hljs-keyword">var</span> cid <span class="hljs-type">uint32</span><br>        cid = <span class="hljs-number">0</span><br>        <span class="hljs-comment">//3 启动server网络连接业务</span><br>        <span class="hljs-keyword">for</span> &#123;<br>            <span class="hljs-comment">//3.1 阻塞等待客户端建立连接请求</span><br>            conn, err := listenner.AcceptTCP()<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                fmt.Println(<span class="hljs-string">&quot;Accept err &quot;</span>, err)<br>                <span class="hljs-keyword">continue</span><br>            &#125;<br>            <span class="hljs-comment">//3.2 TODO Server.Start() 设置服务器最大连接控制,如果超过最大连接，那么则关闭此新的连接</span><br>            <span class="hljs-comment">//3.3 处理该新连接请求的 业务 方法， 此时应该有 handler 和 conn是绑定的</span><br>            dealConn := NewConntion(conn, cid, s.Router)<br>            cid ++<br>            <span class="hljs-comment">//3.4 启动当前链接的处理业务</span><br>            <span class="hljs-keyword">go</span> dealConn.Start()<br>        &#125;<br>    &#125;()<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Server)</span></span> Stop() &#123;<br>    fmt.Println(<span class="hljs-string">&quot;[STOP] Zinx server , name &quot;</span> , s.Name)<br>    <span class="hljs-comment">//TODO  Server.Stop() 将其他需要清理的连接信息或者其他信息 也要一并停止或者清理</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Server)</span></span> Serve() &#123;<br>    s.Start()<br>    <span class="hljs-comment">//TODO Server.Serve() 是否在启动服务的时候 还要处理其他的事情呢 可以在这里添加</span><br>    <span class="hljs-comment">//阻塞,否则主Go退出， listenner的go将会退出</span><br>    <span class="hljs-keyword">for</span> &#123;<br>        time.Sleep(<span class="hljs-number">10</span>*time.Second)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//路由功能：给当前服务注册一个路由业务方法，供客户端链接处理使用</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Server)</span></span>AddRouter(router ziface.IRouter) &#123;<br>    s.Router = router<br>    fmt.Println(<span class="hljs-string">&quot;Add Router succ! &quot;</span> )<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>connnection</code>同样要加上相应的路由对应的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> znet<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;zinx/ziface&quot;</span><br>)<br><span class="hljs-keyword">type</span> Connection <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//当前连接的socket TCP套接字</span><br>    Conn *net.TCPConn<br>    <span class="hljs-comment">//当前连接的ID 也可以称作为SessionID，ID全局唯一</span><br>    ConnID <span class="hljs-type">uint32</span><br>    <span class="hljs-comment">//当前连接的关闭状态</span><br>    isClosed <span class="hljs-type">bool</span><br>    <span class="hljs-comment">//该连接的处理方法router</span><br>    Router  ziface.IRouter<br>    <span class="hljs-comment">//告知该链接已经退出/停止的channel</span><br>    ExitBuffChan <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span><br>&#125;<br><span class="hljs-comment">//创建连接的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewConntion</span><span class="hljs-params">(conn *net.TCPConn, connID <span class="hljs-type">uint32</span>, router ziface.IRouter)</span></span> *Connection&#123;<br>    c := &amp;Connection&#123;<br>        Conn:     conn,<br>        ConnID:   connID,<br>        isClosed: <span class="hljs-literal">false</span>,<br>        Router: router,<br>        ExitBuffChan: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>),<br>    &#125;<br>    <span class="hljs-keyword">return</span> c<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> StartReader() &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Reader Goroutine is  running&quot;</span>)<br>    <span class="hljs-keyword">defer</span> fmt.Println(c.RemoteAddr().String(), <span class="hljs-string">&quot; conn reader exit!&quot;</span>)<br>    <span class="hljs-keyword">defer</span> c.Stop()<br>    <span class="hljs-keyword">for</span>  &#123;<br>        <span class="hljs-comment">//读取我们最大的数据到buf中</span><br>        buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">512</span>)<br>        _, err := c.Conn.Read(buf)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;recv buf err &quot;</span>, err)<br>            c.ExitBuffChan &lt;- <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-comment">//得到当前客户端请求的Request数据</span><br>        req := Request&#123;<br>            conn:c,<br>            data:buf,<br>        &#125;<br>        <span class="hljs-comment">//从路由Routers 中找到注册绑定Conn的对应Handle</span><br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(request ziface.IRequest)</span></span> &#123;<br>            <span class="hljs-comment">//执行注册的路由方法</span><br>            c.Router.PreHandle(request)<br>            c.Router.Handle(request)<br>            c.Router.PostHandle(request)<br>        &#125;(&amp;req)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//启动连接，让当前连接开始工作</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> Start() &#123;<br>    <span class="hljs-comment">//开启处理该链接读取到客户端数据之后的请求业务</span><br>    <span class="hljs-keyword">go</span> c.StartReader()<br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-keyword">select</span> &#123;<br>        <span class="hljs-keyword">case</span> &lt;- c.ExitBuffChan:<br>            <span class="hljs-comment">//得到退出消息，不再阻塞</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//停止连接，结束当前连接状态M</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> Stop() &#123;<br>    <span class="hljs-comment">//1. 如果当前链接已经关闭</span><br>    <span class="hljs-keyword">if</span> c.isClosed == <span class="hljs-literal">true</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    c.isClosed = <span class="hljs-literal">true</span><br>    <span class="hljs-comment">//TODO Connection Stop() 如果用户注册了该链接的关闭回调业务，那么在此刻应该显示调用</span><br>    <span class="hljs-comment">// 关闭socket链接</span><br>    c.Conn.Close()<br>    <span class="hljs-comment">//通知从缓冲队列读数据的业务，该链接已经关闭</span><br>    c.ExitBuffChan &lt;- <span class="hljs-literal">true</span><br>    <span class="hljs-comment">//关闭该链接全部管道</span><br>    <span class="hljs-built_in">close</span>(c.ExitBuffChan)<br>&#125;<br><span class="hljs-comment">//从当前连接获取原始的socket TCPConn</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> GetTCPConnection() *net.TCPConn &#123;<br>    <span class="hljs-keyword">return</span> c.Conn<br>&#125;<br><span class="hljs-comment">//获取当前连接ID</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> GetConnID() <span class="hljs-type">uint32</span>&#123;<br>    <span class="hljs-keyword">return</span> c.ConnID<br>&#125;<br><span class="hljs-comment">//获取远程客户端地址信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> RemoteAddr() net.Addr &#123;<br>    <span class="hljs-keyword">return</span> c.Conn.RemoteAddr()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="Server-go"><a href="#Server-go" class="headerlink" title="Server.go"></a>Server.go</h3><blockquote><p>我们这里自定义了一个类似 Ping 操作的路由，就是当客户端发送数据，我们的处理业务就是返回给客户端”ping..ping..ping..”, 为了测试，当前路由也同时实现了 PreHandle 和 PostHandle 两个方法。实际上 Zinx 会利用模板的设计模式，依次在框架中调用<code>PreHandle</code>、<code>Handle</code>、<code>PostHandle</code>三个方法。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;zinx/ziface&quot;</span><br>    <span class="hljs-string">&quot;zinx/znet&quot;</span><br>)<br><span class="hljs-comment">//ping test 自定义路由</span><br><span class="hljs-keyword">type</span> PingRouter <span class="hljs-keyword">struct</span> &#123;<br>    znet.BaseRouter <span class="hljs-comment">//一定要先基础BaseRouter</span><br>&#125;<br><span class="hljs-comment">//Test PreHandle</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *PingRouter)</span></span> PreHandle(request ziface.IRequest) &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Call Router PreHandle&quot;</span>)<br>    _, err := request.GetConnection().GetTCPConnection().Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;before ping ....\n&quot;</span>))<br>    <span class="hljs-keyword">if</span> err !=<span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;call back ping ping ping error&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Test Handle</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *PingRouter)</span></span> Handle(request ziface.IRequest) &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Call PingRouter Handle&quot;</span>)<br>    _, err := request.GetConnection().GetTCPConnection().Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;ping...ping...ping\n&quot;</span>))<br>    <span class="hljs-keyword">if</span> err !=<span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;call back ping ping ping error&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Test PostHandle</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *PingRouter)</span></span> PostHandle(request ziface.IRequest) &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Call Router PostHandle&quot;</span>)<br>    _, err := request.GetConnection().GetTCPConnection().Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;After ping .....\n&quot;</span>))<br>    <span class="hljs-keyword">if</span> err !=<span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;call back ping ping ping error&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//创建一个server句柄</span><br>    s := znet.NewServer(<span class="hljs-string">&quot;[zinx V0.3]&quot;</span>)<br>    s.AddRouter(&amp;PingRouter&#123;&#125;)<br>    <span class="hljs-comment">//2 开启服务</span><br>    s.Serve()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Client-go"><a href="#Client-go" class="headerlink" title="Client.go"></a>Client.go</h3><p>代码不变</p><h1 id="v0-4-全局配置模块"><a href="#v0-4-全局配置模块" class="headerlink" title="[v0.4] 全局配置模块"></a>[v0.4] 全局配置模块</h1><blockquote><p>增加一个配置文件<code>zinx.json</code>，保存服务器的各项属性，方便修改服务器的参数</p></blockquote><h2 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h2><p><img src="/../../../images/Zinx/fae2156087d3ad046eff80d3ac265f67-0.png" alt="img"></p><blockquote><p><strong>涉及知识点：</strong></p><ol><li>json格式问题</li><li>全局配置文件的好处</li></ol></blockquote><p>在<code>zinx</code>目录下新建<code>utils</code>文件夹，在<code>utils</code>文件夹下新建<code>globalobj.go</code>文件，这个go文件就是实现配置文件读取与输出的功能。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在<code>zinx</code>下新建<code>conf</code>文件下，在其下新建<code>zinx.json</code>配置文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;demo server&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;TcpPort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7777</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;MaxConn&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>从<code>globalobj.go</code>的功能来看，这里可以设置你所有的需要加入到服务器的配置，以<code>GlobalObj</code>结构体中的数据成员为主。</p><h2 id="globalobj-go"><a href="#globalobj-go" class="headerlink" title="globalobj.go"></a>globalobj.go</h2><p>对新手来讲，这个文件的代码中需要关注的两个函数：</p><ol><li><code>ioutil.ReadFile</code></li><li><code>json.Unmarshal</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> utils<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;zinx/ziface&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">存储一些有关Zinx框架的全局参数，供其他模块使用</span><br><span class="hljs-comment">一些参数也可以通过用户根据zinx.json来配置</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">type</span> GlobalObj <span class="hljs-keyword">struct</span> &#123;<br>tcpServer ziface.IServer <span class="hljs-comment">// 当前Zinx的全局Server对象</span><br>Host <span class="hljs-type">string</span><span class="hljs-comment">// 当前服务器主机IP</span><br>TcpPort<span class="hljs-type">int</span><span class="hljs-comment">// 当前服务器主机监听端口号</span><br>Name<span class="hljs-type">string</span><span class="hljs-comment">// 当前服务器名称</span><br>Version<span class="hljs-type">string</span><span class="hljs-comment">//当前Zinx版本</span><br>MaxPacketSize <span class="hljs-type">uint32</span><span class="hljs-comment">// 都需数据包的最大值</span><br>MaxConn<span class="hljs-type">int</span><span class="hljs-comment">// 当前服务器主机允许的最大链接个数</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">定义一个全局的对象</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> GlobalObject *GlobalObj<br><br><span class="hljs-comment">// 读取用户的配置文件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *GlobalObj)</span></span> Reload()  &#123;<br>data, err := ioutil.ReadFile(<span class="hljs-string">&quot;D:/Program Files/Go/src/zinx/conf/zinx.json&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// 将 json 数据解析到struct中</span><br><span class="hljs-comment">// fmt.Printf(&quot;json: %s\n&quot;, data)</span><br>err = json.Unmarshal(data, &amp;GlobalObject)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(fmt.Sprintf(<span class="hljs-string">&quot;%+v&quot;</span>,*GlobalObject))<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">提供init方法，默认加载</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 初始化GlobalObject变量，设置一些默认值</span><br>GlobalObject = &amp; GlobalObj&#123;<br>Name: <span class="hljs-string">&quot;ZinxServerApp&quot;</span>,<br>Version: <span class="hljs-string">&quot;V0.4&quot;</span>,<br>TcpPort: <span class="hljs-number">7777</span>,<br>Host: <span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>MaxConn: <span class="hljs-number">12000</span>,<br>MaxPacketSize: <span class="hljs-number">4096</span>,<br>&#125;<br><br><span class="hljs-comment">// 从配置文件中加载一些用户配置的参数</span><br>GlobalObject.Reload()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="V0-5-消息封装"><a href="#V0-5-消息封装" class="headerlink" title="[V0.5] 消息封装"></a>[V0.5] 消息封装</h1><h2 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h2><p>0.5版本要做的就是把服务器的全部数据都放在一个<code>Request</code>里：</p><p><img src="/../../../images/Zinx/6d7f33a39b83c1cf24710d1e3a071c73-0.png" alt="img"></p><blockquote><p><strong>涉及知识点：</strong></p><ol><li>tcp封包拆包</li><li>消息封装</li></ol></blockquote><h2 id="创建消息封装类型"><a href="#创建消息封装类型" class="headerlink" title="创建消息封装类型"></a>创建消息封装类型</h2><p>当前的<code>Request</code>结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Request <span class="hljs-keyword">struct</span> &#123;<br>    conn ziface.IConnection <span class="hljs-comment">//已经和客户端建立好的链接</span><br>    data []<span class="hljs-type">byte</span>             <span class="hljs-comment">//客户端请求的数据</span><br>&#125;<br></code></pre></td></tr></table></figure><p>创建消息封装的结构体以及相关方法：</p><h2 id="imessage-go"><a href="#imessage-go" class="headerlink" title="imessage.go"></a>imessage.go</h2><p>在<code>zinx/ziface/</code>下创建<code>imessage.go</code>文件: 将请求的一个消息封装到 message 中，定义抽象层接口，定义好 Getter 方法和 Setter 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> ziface<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">将请求的一个消息封装到message中，定义抽象层接口</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">type</span> IMessage <span class="hljs-keyword">interface</span> &#123;<br>GetDataLen() <span class="hljs-type">uint32</span> <span class="hljs-comment">// 获取消息数据段长度</span><br>GetMsgId() <span class="hljs-type">uint32</span><span class="hljs-comment">// 获取消息ID</span><br>GetData() []<span class="hljs-type">byte</span><span class="hljs-comment">// 获取消息内容</span><br>SetMsgId(<span class="hljs-type">uint32</span>)<span class="hljs-comment">// 设置消息ID</span><br>SetData([]<span class="hljs-type">byte</span>)<span class="hljs-comment">// 设置消息内容</span><br>SetDataLen(<span class="hljs-type">uint32</span>)<span class="hljs-comment">// 设置消息数据段长度</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="message-go"><a href="#message-go" class="headerlink" title="message.go"></a>message.go</h2><p>同时创建实例 message 类，在<code>zinx/znet/</code>下，创建<code>message.go</code>文件。</p><p>整理一个基本的 message 包，会包含<strong>消息 ID</strong>，<strong>数据</strong>，<strong>数据长度</strong>三个成员，提供基本的 setter 和 getter 方法，目的是为了以后做封装优化的作用。同时也提供了一个创建一个 message 包的初始化方法<code>NewMegPackage</code>。</p><p>这里我们只需要要实现 Message 类，写出构造函数，实现接口中对应的方法，比较的简单，大家可以试试先自己尝试实现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> znet<br><br><span class="hljs-keyword">type</span> Message <span class="hljs-keyword">struct</span> &#123;<br>Id<span class="hljs-type">uint32</span> <span class="hljs-comment">// 消息的ID</span><br>DataLen<span class="hljs-type">uint32</span><span class="hljs-comment">// 消息的长度</span><br>Data []<span class="hljs-type">byte</span> <span class="hljs-comment">// 消息的内容</span><br>&#125;<br><br><span class="hljs-comment">// 创建一个Message的消息包</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMsgPackage</span><span class="hljs-params">(id <span class="hljs-type">uint32</span>, data []<span class="hljs-type">byte</span>)</span></span> *Message &#123;<br><span class="hljs-keyword">return</span> &amp;Message&#123;<br>Id: id,<br>DataLen: <span class="hljs-type">uint32</span>(<span class="hljs-built_in">len</span>(data)),<br>Data: data,<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 获取消息数据段长度</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(msg *Message)</span></span> GetDataLen() <span class="hljs-type">uint32</span> &#123;<br><span class="hljs-keyword">return</span> msg.DataLen;<br>&#125;<br><span class="hljs-comment">//获取消息ID</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(msg *Message)</span></span> GetMsgId() <span class="hljs-type">uint32</span> &#123;<br>    <span class="hljs-keyword">return</span> msg.Id<br>&#125;<br><span class="hljs-comment">//获取消息内容</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(msg *Message)</span></span> GetData() []<span class="hljs-type">byte</span> &#123;<br>    <span class="hljs-keyword">return</span> msg.Data<br>&#125;<br><span class="hljs-comment">//设置消息数据段长度</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(msg *Message)</span></span> SetDataLen(<span class="hljs-built_in">len</span> <span class="hljs-type">uint32</span>) &#123;<br>    msg.DataLen = <span class="hljs-built_in">len</span><br>&#125;<br><span class="hljs-comment">//设计消息ID</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(msg *Message)</span></span> SetMsgId(msgId <span class="hljs-type">uint32</span>) &#123;<br>    msg.Id = msgId<br>&#125;<br><span class="hljs-comment">//设计消息内容</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(msg *Message)</span></span> SetData(data []<span class="hljs-type">byte</span>) &#123;<br>    msg.Data = data<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拆包与封包"><a href="#拆包与封包" class="headerlink" title="拆包与封包*"></a>拆包与封包<code>*</code></h2><p>采用TCL(Type-Len-Value)封包格式解决TCP粘包问题</p><p><img src="/../../../images/Zinx/c6982247c64f1a5e149a2f45adc98425.jpeg" alt="5.2 消息的封包与拆包  - 图1"></p><h3 id="创建拆包封包抽象类"><a href="#创建拆包封包抽象类" class="headerlink" title="创建拆包封包抽象类"></a>创建拆包封包抽象类</h3><p>在<code>zinx/ziface</code>下，创建<code>idatapack.go</code>文件</p><p>我们需要三个方法：</p><ul><li>封包数据。</li><li>拆包数据。</li><li>得到头部长度。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> ziface<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    封包数据和拆包数据</span><br><span class="hljs-comment">    直接面向TCP连接中的数据流,为传输数据添加头部信息，用于处理TCP粘包问题。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> IDataPack <span class="hljs-keyword">interface</span>&#123;<br>    GetHeadLen() <span class="hljs-type">uint32</span>                    <span class="hljs-comment">//获取包头长度方法</span><br>    Pack(msg IMessage)([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>)    <span class="hljs-comment">//封包方法</span><br>    Unpack([]<span class="hljs-type">byte</span>)(IMessage, <span class="hljs-type">error</span>)        <span class="hljs-comment">//拆包方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现拆包封包类"><a href="#实现拆包封包类" class="headerlink" title="实现拆包封包类"></a>实现拆包封包类</h3><p>在<code>zinx/znet/</code>下，创建<code>datapack.go</code>文件.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> znet<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;bytes&quot;</span><br>    <span class="hljs-string">&quot;encoding/binary&quot;</span><br>    <span class="hljs-string">&quot;errors&quot;</span><br>    <span class="hljs-string">&quot;zinx/utils&quot;</span><br>    <span class="hljs-string">&quot;zinx/ziface&quot;</span><br>)<br><span class="hljs-comment">//封包拆包类实例，暂时不需要成员</span><br><span class="hljs-keyword">type</span> DataPack <span class="hljs-keyword">struct</span> &#123;&#125;<br><span class="hljs-comment">//封包拆包实例初始化方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewDataPack</span><span class="hljs-params">()</span></span> *DataPack &#123;<br>    <span class="hljs-keyword">return</span> &amp;DataPack&#123;&#125;<br>&#125;<br><span class="hljs-comment">//获取包头长度方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(dp *DataPack)</span></span> GetHeadLen() <span class="hljs-type">uint32</span> &#123;<br>    <span class="hljs-comment">//Id uint32(4字节) +  DataLen uint32(4字节)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">8</span><br>&#125;<br><span class="hljs-comment">//封包方法(压缩数据)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(dp *DataPack)</span></span> Pack(msg ziface.IMessage)([]<span class="hljs-type">byte</span>, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">//创建一个存放bytes字节的缓冲</span><br>    dataBuff := bytes.NewBuffer([]<span class="hljs-type">byte</span>&#123;&#125;)<br>    <span class="hljs-comment">//写dataLen</span><br>    <span class="hljs-keyword">if</span> err := binary.Write(dataBuff, binary.LittleEndian, msg.GetDataLen()); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br>    <span class="hljs-comment">//写msgID</span><br>    <span class="hljs-keyword">if</span> err := binary.Write(dataBuff, binary.LittleEndian, msg.GetMsgId()); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br>    <span class="hljs-comment">//写data数据</span><br>    <span class="hljs-keyword">if</span> err := binary.Write(dataBuff, binary.LittleEndian, msg.GetData()); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span> ,err<br>    &#125;<br>    <span class="hljs-keyword">return</span> dataBuff.Bytes(), <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">//拆包方法(解压数据)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(dp *DataPack)</span></span> Unpack(binaryData []<span class="hljs-type">byte</span>)(ziface.IMessage, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-comment">//创建一个从输入二进制数据的ioReader</span><br>    dataBuff := bytes.NewReader(binaryData)<br>    <span class="hljs-comment">//只解压head的信息，得到dataLen和msgID</span><br>    msg := &amp;Message&#123;&#125;<br>    <span class="hljs-comment">//读dataLen</span><br>    <span class="hljs-keyword">if</span> err := binary.Read(dataBuff, binary.LittleEndian, &amp;msg.DataLen); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br>    <span class="hljs-comment">//读msgID</span><br>    <span class="hljs-keyword">if</span> err := binary.Read(dataBuff, binary.LittleEndian, &amp;msg.Id); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br>    <span class="hljs-comment">//判断dataLen的长度是否超出我们允许的最大包长度</span><br>    <span class="hljs-keyword">if</span> (utils.GlobalObject.MaxPacketSize &gt; <span class="hljs-number">0</span> &amp;&amp; msg.DataLen &gt; utils.GlobalObject.MaxPacketSize) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;Too large msg data recieved&quot;</span>)<br>    &#125;<br>    <span class="hljs-comment">//这里只需要把head的数据拆包出来就可以了，然后再通过head的长度，再从conn读取一次数据</span><br>    <span class="hljs-keyword">return</span> msg, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是整理的<code>Unpack</code>方法，因为我们从上图可以知道，我们进行拆包的时候是分两次过程的，第二次是依赖第一次的 dataLen 结果，所以<code>Unpack</code>只能解压出包头 head 的内容，得到 msgId 和 dataLen。之后调用者再根据 dataLen 继续从 io 流中读取 body 中的数据。</p><h3 id="测试拆包与封包类型"><a href="#测试拆包与封包类型" class="headerlink" title="测试拆包与封包类型"></a>测试拆包与封包类型</h3><p>客户端与服务端的代码如下所示：</p><ul><li>Server.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;zinx/znet&quot;</span><br>)<br><span class="hljs-comment">//只是负责测试datapack拆包，封包功能</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//创建socket TCP Server</span><br>    listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:7777&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;server listen err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//创建服务器gotoutine，负责从客户端goroutine读取粘包的数据，然后进行解析</span><br>    <span class="hljs-keyword">for</span> &#123;<br>        conn, err := listener.Accept()<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;server accept err:&quot;</span>, err)<br>        &#125;<br>        <span class="hljs-comment">//处理客户端请求</span><br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br>            <span class="hljs-comment">//创建封包拆包对象dp</span><br>            dp := znet.NewDataPack()<br>            <span class="hljs-keyword">for</span> &#123;<br>                <span class="hljs-comment">//1 先读出流中的head部分</span><br>                headData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, dp.GetHeadLen())<br>                _, err := io.ReadFull(conn, headData) <span class="hljs-comment">//ReadFull 会把msg填充满为止</span><br>                <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                    fmt.Println(<span class="hljs-string">&quot;read head error&quot;</span>)<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>                <span class="hljs-comment">//将headData字节流 拆包到msg中</span><br>                msgHead, err := dp.Unpack(headData)<br>                <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                    fmt.Println(<span class="hljs-string">&quot;server unpack err:&quot;</span>, err)<br>                    <span class="hljs-keyword">return</span><br>                &#125;<br>                <span class="hljs-keyword">if</span> msgHead.GetDataLen() &gt; <span class="hljs-number">0</span> &#123;<br>                    <span class="hljs-comment">//msg 是有data数据的，需要再次读取data数据</span><br>                    <span class="hljs-comment">//`*`是指针运算符 , 可以表示一个变量是**指针类型** , 也可以表示**一个指针变量所指向的存储单元** , 也就是这个地址所存储的值 .</span><br>                    msg := msgHead.(*znet.Message)<br>                    msg.Data = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, msg.GetDataLen())<br>                    <span class="hljs-comment">//根据dataLen从io中读取字节流</span><br>                    _, err := io.ReadFull(conn, msg.Data)<br>                    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                        fmt.Println(<span class="hljs-string">&quot;server unpack data err:&quot;</span>, err)<br>                        <span class="hljs-keyword">return</span><br>                    &#125;<br>                    fmt.Println(<span class="hljs-string">&quot;==&gt; Recv Msg: ID=&quot;</span>, msg.Id, <span class="hljs-string">&quot;, len=&quot;</span>, msg.DataLen, <span class="hljs-string">&quot;, data=&quot;</span>, <span class="hljs-type">string</span>(msg.Data))<br>                &#125;<br>            &#125;<br>        &#125;(conn)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Client.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;zinx/znet&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//客户端goroutine，负责模拟粘包的数据，然后进行发送</span><br>    conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:7777&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;client dial err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//创建一个封包对象 dp</span><br>    dp := znet.NewDataPack()<br>    <span class="hljs-comment">//封装一个msg1包</span><br>    msg1 := &amp;znet.Message&#123;<br>        Id:      <span class="hljs-number">0</span>,<br>        DataLen: <span class="hljs-number">5</span>,<br>        Data:    []<span class="hljs-type">byte</span>&#123;<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>&#125;,<br>    &#125;<br>    sendData1, err := dp.Pack(msg1)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;client pack msg1 err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    msg2 := &amp;znet.Message&#123;<br>        Id:      <span class="hljs-number">1</span>,<br>        DataLen: <span class="hljs-number">7</span>,<br>        Data:    []<span class="hljs-type">byte</span>&#123;<span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>&#125;,<br>    &#125;<br>    sendData2, err := dp.Pack(msg2)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;client temp msg2 err:&quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//将sendData1，和 sendData2 拼接一起，组成粘包</span><br>    sendData1 = <span class="hljs-built_in">append</span>(sendData1, sendData2...)<br>    <span class="hljs-comment">//向服务器端写数据</span><br>    conn.Write(sendData1)<br>    <span class="hljs-comment">//客户端阻塞</span><br>    <span class="hljs-keyword">select</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Request字段修改"><a href="#Request字段修改" class="headerlink" title="Request字段修改"></a>Request字段修改</h3><p>首先我们要将我们之前的 Request 中的<code>[]byte</code>类型的 data 字段改成 Message 类型.。并且我们需要把 irequest 的方法新增一个 GetMsgID。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> znet<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;zinx/ziface&quot;</span><br><span class="hljs-keyword">type</span> Request <span class="hljs-keyword">struct</span> &#123;<br>    conn ziface.IConnection <span class="hljs-comment">//已经和客户端建立好的 链接</span><br>    msg ziface.IMessage     <span class="hljs-comment">//客户端请求的数据</span><br>&#125;<br><span class="hljs-comment">//获取请求连接信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *Request)</span></span> GetConnection() ziface.IConnection &#123;<br>    <span class="hljs-keyword">return</span> r.conn<br>&#125;<br><span class="hljs-comment">//获取请求消息的数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r *Request)</span></span> GetData() []<span class="hljs-type">byte</span> &#123;<br>    <span class="hljs-keyword">return</span> r.msg.GetData()<br>&#125;<br><span class="hljs-comment">//获取请求的消息的ID</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Request)</span></span> GetMsgID() <span class="hljs-type">uint32</span> &#123;<br>    <span class="hljs-keyword">return</span> r.msg.GetMsgId()<br>&#125;<br><span class="hljs-keyword">package</span> ziface<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   IRequest 接口：</span><br><span class="hljs-comment">   实际上是把客户端请求的链接信息 和 请求的数据 包装到了 Request里</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">type</span> IRequest <span class="hljs-keyword">interface</span>&#123;<br>    GetConnection() IConnection    <span class="hljs-comment">//获取请求连接信息</span><br>    GetData() []<span class="hljs-type">byte</span>            <span class="hljs-comment">//获取请求消息的数据</span><br>    GetMsgID() <span class="hljs-type">uint32</span>           <span class="hljs-comment">//hu获取消息的id</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="集成拆包过程"><a href="#集成拆包过程" class="headerlink" title="集成拆包过程"></a>集成拆包过程</h4><p>接下来我们需要在 Connection 的<code>StartReader()</code>方法中,修改之前的读取客户端的这段代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> StartReader() &#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-keyword">for</span>  &#123;<br>        <span class="hljs-comment">//读取我们最大的数据到buf中</span><br>        buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, utils.GlobalObject.MaxPacketSize)<br>        _, err := c.Conn.Read(buf)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;recv buf err &quot;</span>, err)<br>            c.ExitBuffChan &lt;- <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将这个函数做出如下改造：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> StartReader() &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Reader Goroutine is  running&quot;</span>)<br>    <span class="hljs-keyword">defer</span> fmt.Println(c.RemoteAddr().String(), <span class="hljs-string">&quot; conn reader exit!&quot;</span>)<br>    <span class="hljs-keyword">defer</span> c.Stop()<br>    <span class="hljs-keyword">for</span>  &#123;<br>        <span class="hljs-comment">// 创建拆包解包的对象</span><br>        dp := NewDataPack()<br>        <span class="hljs-comment">//读取客户端的Msg head</span><br>        headData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, dp.GetHeadLen())<br>        <span class="hljs-keyword">if</span> _, err := io.ReadFull(c.GetTCPConnection(), headData); err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;read msg head error &quot;</span>, err)<br>            c.ExitBuffChan &lt;- <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-comment">//拆包，得到msgid 和 datalen 放在msg中</span><br>        msg , err := dp.Unpack(headData)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;unpack error &quot;</span>, err)<br>            c.ExitBuffChan &lt;- <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">continue</span><br>        &#125;<br>        <span class="hljs-comment">//根据 dataLen 读取 data，放在msg.Data中</span><br>        <span class="hljs-keyword">var</span> data []<span class="hljs-type">byte</span><br>        <span class="hljs-keyword">if</span> msg.GetDataLen() &gt; <span class="hljs-number">0</span> &#123;<br>            data = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, msg.GetDataLen())<br>            <span class="hljs-keyword">if</span> _, err := io.ReadFull(c.GetTCPConnection(), data); err != <span class="hljs-literal">nil</span> &#123;<br>                fmt.Println(<span class="hljs-string">&quot;read msg data error &quot;</span>, err)<br>                c.ExitBuffChan &lt;- <span class="hljs-literal">true</span><br>                <span class="hljs-keyword">continue</span><br>            &#125;<br>        &#125;<br>        msg.SetData(data)<br>        <span class="hljs-comment">//得到当前客户端请求的Request数据</span><br>        req := Request&#123;<br>            conn:c,<br>            msg:msg, <span class="hljs-comment">//将之前的buf 改成 msg</span><br>        &#125;<br>        <span class="hljs-comment">//从路由Routers 中找到注册绑定Conn的对应Handle</span><br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(request ziface.IRequest)</span></span> &#123;<br>            <span class="hljs-comment">//执行注册的路由方法</span><br>            c.Router.PreHandle(request)<br>            c.Router.Handle(request)<br>            c.Router.PostHandle(request)<br>        &#125;(&amp;req)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="提供封包方法"><a href="#提供封包方法" class="headerlink" title="提供封包方法"></a>提供封包方法</h4><p>现在我们已经将拆包的功能集成到 Zinx 中了，但是使用 Zinx 的时候，如果我们希望给用户返回一个 TLV 格式的数据，总不能每次都经过这么繁琐的过程，所以我们应该给 Zinx 提供一个封包的接口，供 Zinx 发包使用。 我们在 iconnection.go 中新增 SendMsg()方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> ziface<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-comment">//定义连接接口</span><br><span class="hljs-keyword">type</span> IConnection <span class="hljs-keyword">interface</span> &#123;<br>    <span class="hljs-comment">//启动连接，让当前连接开始工作</span><br>    Start()<br>    <span class="hljs-comment">//停止连接，结束当前连接状态M</span><br>    Stop()<br>    <span class="hljs-comment">//从当前连接获取原始的socket TCPConn</span><br>    GetTCPConnection() *net.TCPConn<br>    <span class="hljs-comment">//获取当前连接ID</span><br>    GetConnID() <span class="hljs-type">uint32</span><br>    <span class="hljs-comment">//获取远程客户端地址信息</span><br>    RemoteAddr() net.Addr<br>    <span class="hljs-comment">//直接将Message数据发送数据给远程的TCP客户端</span><br>    SendMsg(msgId <span class="hljs-type">uint32</span>, data []<span class="hljs-type">byte</span>) <span class="hljs-type">error</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后，我们到 connection.go 中实现这个方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//直接将Message数据发送数据给远程的TCP客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> SendMsg(msgId <span class="hljs-type">uint32</span>, data []<span class="hljs-type">byte</span>) <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">if</span> c.isClosed == <span class="hljs-literal">true</span> &#123;<br>        <span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;Connection closed when send msg&quot;</span>)<br>    &#125;<br>    <span class="hljs-comment">//将data封包，并且发送</span><br>    dp := NewDataPack()<br>    msg, err := dp.Pack(NewMsgPackage(msgId, data))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Pack error msg id = &quot;</span>, msgId)<br>        <span class="hljs-keyword">return</span>  errors.New(<span class="hljs-string">&quot;Pack error msg &quot;</span>)<br>    &#125;<br>    <span class="hljs-comment">//写回客户端</span><br>    <span class="hljs-keyword">if</span> _, err := c.Conn.Write(msg); err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Write msg id &quot;</span>, msgId, <span class="hljs-string">&quot; error &quot;</span>)<br>        c.ExitBuffChan &lt;- <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;conn Write error&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意，做出修改后，我们需要在 connection.go 中将 io 和 errors 包引入进来。</p><h3 id="zinx-0-5-测试"><a href="#zinx-0-5-测试" class="headerlink" title="zinx 0.5 测试"></a>zinx 0.5 测试</h3><ul><li>Server.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;zinx/ziface&quot;</span><br>    <span class="hljs-string">&quot;zinx/znet&quot;</span><br>)<br><span class="hljs-comment">//ping test 自定义路由</span><br><span class="hljs-keyword">type</span> PingRouter <span class="hljs-keyword">struct</span> &#123;<br>    znet.BaseRouter<br>&#125;<br><span class="hljs-comment">//Test Handle</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *PingRouter)</span></span> Handle(request ziface.IRequest) &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Call PingRouter Handle&quot;</span>)<br>    <span class="hljs-comment">//先读取客户端的数据，再回写ping...ping...ping</span><br>    fmt.Println(<span class="hljs-string">&quot;recv from client : msgId=&quot;</span>, request.GetMsgID(), <span class="hljs-string">&quot;, data=&quot;</span>, <span class="hljs-type">string</span>(request.GetData()))<br>    <span class="hljs-comment">//回写数据</span><br>    err := request.GetConnection().SendMsg(<span class="hljs-number">1</span>, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;ping...ping...ping&quot;</span>))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(err)<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//创建一个server句柄</span><br>    s := znet.NewServer()<br>    <span class="hljs-comment">//配置路由</span><br>    s.AddRouter(&amp;PingRouter&#123;&#125;)<br>    <span class="hljs-comment">//开启服务</span><br>    s.Serve()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Client.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>    <span class="hljs-string">&quot;zinx/znet&quot;</span><br>)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    模拟客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Client Test ... start&quot;</span>)<br>    <span class="hljs-comment">//3秒之后发起测试请求，给服务端开启服务的机会</span><br>    time.Sleep(<span class="hljs-number">3</span> * time.Second)<br>    conn,err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:7777&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;client start err, exit!&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//发封包message消息</span><br>        dp := znet.NewDataPack()<br>        msg, _ := dp.Pack(znet.NewMsgPackage(<span class="hljs-number">0</span>,[]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Zinx V0.5 Client Test Message&quot;</span>)))<br>        _, err := conn.Write(msg)<br>        <span class="hljs-keyword">if</span> err !=<span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;write error err &quot;</span>, err)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">//先读出流中的head部分</span><br>        headData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, dp.GetHeadLen())<br>        _, err = io.ReadFull(conn, headData) <span class="hljs-comment">//ReadFull 会把msg填充满为止</span><br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;read head error&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>        <span class="hljs-comment">//将headData字节流 拆包到msg中</span><br>        msgHead, err := dp.Unpack(headData)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;server unpack err:&quot;</span>, err)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> msgHead.GetDataLen() &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-comment">//msg 是有data数据的，需要再次读取data数据</span><br>            msg := msgHead.(*znet.Message)<br>            msg.Data = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, msg.GetDataLen())<br>            <span class="hljs-comment">//根据dataLen从io中读取字节流</span><br>            _, err := io.ReadFull(conn, msg.Data)<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                fmt.Println(<span class="hljs-string">&quot;server unpack data err:&quot;</span>, err)<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            fmt.Println(<span class="hljs-string">&quot;==&gt; Recv Msg: ID=&quot;</span>, msg.Id, <span class="hljs-string">&quot;, len=&quot;</span>, msg.DataLen, <span class="hljs-string">&quot;, data=&quot;</span>, <span class="hljs-type">string</span>(msg.Data))<br>        &#125;<br>        time.Sleep(<span class="hljs-number">1</span>*time.Second)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="v0-6-多路由模式"><a href="#v0-6-多路由模式" class="headerlink" title="[v0.6] 多路由模式"></a>[v0.6] 多路由模式</h1><h2 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h2><p><img src="/../../../images/Zinx/a51f97e14d4dd69d394843874bb9445c-0.png" alt="img"></p><blockquote><p><strong>涉及知识点</strong></p><ol><li>多路由模式</li><li>单元测试</li></ol></blockquote><h2 id="创建消息管理模块"><a href="#创建消息管理模块" class="headerlink" title="创建消息管理模块"></a>创建消息管理模块</h2><ol><li>创建消息管理模块抽象类</li></ol><p>在<code>zinx/ziface</code>下创建<code>imsghandler.go</code>文件， 定义出我们之前图片中的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> ziface<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    消息管理抽象层</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> IMsgHandle <span class="hljs-keyword">interface</span>&#123;<br>    DoMsgHandler(request IRequest)            <span class="hljs-comment">//马上以非阻塞方式处理消息</span><br>    AddRouter(msgId <span class="hljs-type">uint32</span>, router IRouter)    <span class="hljs-comment">//为消息添加具体的处理逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里面有两个方法，<code>AddRouter()</code>就是添加一个 msgId 和一个路由关系到 Apis 中，那么<code>DoMsgHandler()</code>则是调用 Router 中具体<code>Handle()</code>等方法的接口。</p><ol start="2"><li>实现消息管理模块</li></ol><p>在<code>zinx/znet</code>下创建<code>msghandler.go</code>文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> znet<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;strconv&quot;</span><br>    <span class="hljs-string">&quot;zinx/ziface&quot;</span><br>)<br><span class="hljs-keyword">type</span> MsgHandle <span class="hljs-keyword">struct</span>&#123;<br>    Apis <span class="hljs-keyword">map</span>[<span class="hljs-type">uint32</span>] ziface.IRouter <span class="hljs-comment">//存放每个MsgId 所对应的处理方法的map属性</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMsgHandle</span><span class="hljs-params">()</span></span> *MsgHandle &#123;<br>    <span class="hljs-keyword">return</span> &amp;MsgHandle &#123;<br>        Apis:<span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">uint32</span>]ziface.IRouter),<br>    &#125;<br>&#125;<br><span class="hljs-comment">//马上以非阻塞方式处理消息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mh *MsgHandle)</span></span> DoMsgHandler(request ziface.IRequest)    &#123;<br>    handler, ok := mh.Apis[request.GetMsgID()]<br>    <span class="hljs-keyword">if</span> !ok &#123;<br>        fmt.Println(<span class="hljs-string">&quot;api msgId = &quot;</span>, request.GetMsgID(), <span class="hljs-string">&quot; is not FOUND!&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//执行对应处理方法</span><br>    handler.PreHandle(request)<br>    handler.Handle(request)<br>    handler.PostHandle(request)<br>&#125;<br><span class="hljs-comment">//为消息添加具体的处理逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mh *MsgHandle)</span></span> AddRouter(msgId <span class="hljs-type">uint32</span>, router ziface.IRouter) &#123;<br>    <span class="hljs-comment">//1 判断当前msg绑定的API处理方法是否已经存在</span><br>    <span class="hljs-keyword">if</span> _, ok := mh.Apis[msgId]; ok &#123;<br>        <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;repeated api , msgId = &quot;</span> + strconv.Itoa(<span class="hljs-type">int</span>(msgId)))<br>    &#125;<br>    <span class="hljs-comment">//2 添加msg与api的绑定关系</span><br>    mh.Apis[msgId] = router<br>    fmt.Println(<span class="hljs-string">&quot;Add api msgId = &quot;</span>, msgId)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>zinx其他模块的相应修改</li></ol><p>首先<code>iserver</code>的<code>AddRouter()</code>的接口要稍微改一下，增添 MsgId 参数.</p><p>iserver.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> ziface<br><span class="hljs-comment">//定义服务器接口</span><br><span class="hljs-keyword">type</span> IServer <span class="hljs-keyword">interface</span>&#123;<br>    <span class="hljs-comment">//启动服务器方法</span><br>    Start()<br>    <span class="hljs-comment">//停止服务器方法</span><br>    Stop()<br>    <span class="hljs-comment">//开启业务服务方法</span><br>    Serve()<br>    <span class="hljs-comment">//路由功能：给当前服务注册一个路由业务方法，供客户端链接处理使用</span><br>    AddRouter(msgId <span class="hljs-type">uint32</span>, router IRouter)<br>&#125;<br></code></pre></td></tr></table></figure><p>其次，<code>Server</code>类中 之前有一个<code>Router</code>成员 ，代表唯一的处理方法，现在应该替换成<code>MsgHandler</code>成员。</p><blockquote><p>zinx&#x2F;znet&#x2F;server.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//服务器的名称</span><br>    Name <span class="hljs-type">string</span><br>    <span class="hljs-comment">//tcp4 or other</span><br>    IPVersion <span class="hljs-type">string</span><br>    <span class="hljs-comment">//服务绑定的IP地址</span><br>    IP <span class="hljs-type">string</span><br>    <span class="hljs-comment">//服务绑定的端口</span><br>    Port <span class="hljs-type">int</span><br>    <span class="hljs-comment">//当前Server的消息管理模块，用来绑定MsgId和对应的处理方法</span><br>    msgHandler ziface.IMsgHandle<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化 Server 自然也要更正，增加 msgHandler 初始化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  创建一个服务器句柄</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span> <span class="hljs-params">()</span></span> ziface.IServer &#123;<br>    utils.GlobalObject.Reload()<br>    s:= &amp;Server &#123;<br>        Name :utils.GlobalObject.Name,<br>        IPVersion:<span class="hljs-string">&quot;tcp4&quot;</span>,<br>        IP:utils.GlobalObject.Host,<br>        Port:utils.GlobalObject.TcpPort,<br>        msgHandler: NewMsgHandle(), <span class="hljs-comment">//msgHandler 初始化</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><p>然后当 Server 在处理 conn 请求业务的时候，创建 conn 的时候也需要把 msgHandler 作为参数传递给 Connection 对象。也就是在我们 server.go 的 Start() 方法中的 3.3 注释下进行如下修改：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//...</span><br>dealConn := NewConntion(conn, cid, s.msgHandler)<br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><p>最后，我们的 AddRouter 方法做了修改，所以要重新实现接口方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//路由功能：给当前服务注册一个路由业务方法，供客户端链接处理使用</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Server)</span></span>AddRouter(msgId <span class="hljs-type">uint32</span>, router ziface.IRouter) &#123;<br>    s.msgHandler.AddRouter(msgId,router)<br>&#125;<br></code></pre></td></tr></table></figure><p>那么接下来就是 Connection 对象了。固然在 Connection 对象中应该有 MsgHandler 的成员，来查找消息对应的回调路由方法。</p><blockquote><p>zinx&#x2F;znet&#x2F;connection.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Connection <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//当前连接的socket TCP套接字</span><br>    Conn *net.TCPConn<br>    <span class="hljs-comment">//当前连接的ID 也可以称作为SessionID，ID全局唯一</span><br>    ConnID <span class="hljs-type">uint32</span><br>    <span class="hljs-comment">//当前连接的关闭状态</span><br>    isClosed <span class="hljs-type">bool</span><br>    <span class="hljs-comment">//消息管理MsgId和对应处理方法的消息管理模块</span><br>    MsgHandler ziface.IMsgHandle<br>    <span class="hljs-comment">//告知该链接已经退出/停止的channel</span><br>    ExitBuffChan <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span><br>&#125;<br><span class="hljs-comment">//创建连接的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewConntion</span><span class="hljs-params">(conn *net.TCPConn, connID <span class="hljs-type">uint32</span>, msgHandler ziface.IMsgHandle)</span></span> *Connection&#123;<br>    c := &amp;Connection&#123;<br>        Conn:     conn,<br>        ConnID:   connID,<br>        isClosed: <span class="hljs-literal">false</span>,<br>        MsgHandler: msgHandler,<br>        ExitBuffChan: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>),<br>    &#125;<br>    <span class="hljs-keyword">return</span> c<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，在 conn 已经拆包之后，需要调用路由业务的时候，我们只需要让 conn 调用 MsgHandler 中的<code>DoMsgHander()</code>方法就好了。</p><blockquote><p>zinx&#x2F;znet&#x2F;connection.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> StartReader() &#123;<br>    fmt.Println(<span class="hljs-string">&quot;[Reader Goroutine is running]&quot;</span>)<br>    <span class="hljs-keyword">defer</span> fmt.Println(c.RemoteAddr().String(), <span class="hljs-string">&quot;[conn Reader exit!]&quot;</span>)<br>    <span class="hljs-keyword">defer</span> c.Stop()<br>    <span class="hljs-keyword">for</span>  &#123;<br>        <span class="hljs-comment">// 创建拆包解包的对象</span><br>        dp := NewDataPack()<br>        <span class="hljs-comment">//读取客户端的Msg head</span><br>        headData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, dp.GetHeadLen())<br>        <span class="hljs-keyword">if</span> _, err := io.ReadFull(c.GetTCPConnection(), headData); err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;read msg head error &quot;</span>, err)<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>        <span class="hljs-comment">//拆包，得到msgid 和 datalen 放在msg中</span><br>        msg , err := dp.Unpack(headData)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;unpack error &quot;</span>, err)<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>        <span class="hljs-comment">//根据 dataLen 读取 data，放在msg.Data中</span><br>        <span class="hljs-keyword">var</span> data []<span class="hljs-type">byte</span><br>        <span class="hljs-keyword">if</span> msg.GetDataLen() &gt; <span class="hljs-number">0</span> &#123;<br>            data = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, msg.GetDataLen())<br>            <span class="hljs-keyword">if</span> _, err := io.ReadFull(c.GetTCPConnection(), data); err != <span class="hljs-literal">nil</span> &#123;<br>                fmt.Println(<span class="hljs-string">&quot;read msg data error &quot;</span>, err)<br>                <span class="hljs-keyword">continue</span><br>            &#125;<br>        &#125;<br>        msg.SetData(data)<br>        <span class="hljs-comment">//得到当前客户端请求的Request数据</span><br>        req := Request&#123;<br>            conn:c,<br>            msg:msg,<br>        &#125;<br>        <span class="hljs-comment">//从绑定好的消息和对应的处理方法中执行对应的Handle方法</span><br>        <span class="hljs-keyword">go</span> c.MsgHandler.DoMsgHandler(&amp;req)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好了，大功告成，我们来测试一下 Zinx 的多路由设置功能吧。</p><h2 id="zinx测试"><a href="#zinx测试" class="headerlink" title="zinx测试"></a>zinx测试</h2><p>这里我们既然完成了多路由模式，那么就可以进行一个服务端，多个客户端的方式进行测试我们的功能模块了。</p><p>我们这里在 zinx 文件夹下新建 Client01.go 文件。</p><p>我们在 Server 端设置 2 个路由，一个是 MsgId 为 0 的消息会执行 PingRouter{}重写的<code>Handle()</code>方法，一个是 MsgId 为 1 的消息会执行 HelloZinxRouter{}重写的<code>Handle()</code>方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;zinx/ziface&quot;</span><br>    <span class="hljs-string">&quot;zinx/znet&quot;</span><br>)<br><span class="hljs-comment">//ping test 自定义路由</span><br><span class="hljs-keyword">type</span> PingRouter <span class="hljs-keyword">struct</span> &#123;<br>    znet.BaseRouter<br>&#125;<br><span class="hljs-comment">//Ping Handle</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *PingRouter)</span></span> Handle(request ziface.IRequest) &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Call PingRouter Handle&quot;</span>)<br>    <span class="hljs-comment">//先读取客户端的数据，再回写ping...ping...ping</span><br>    fmt.Println(<span class="hljs-string">&quot;recv from client : msgId=&quot;</span>, request.GetMsgID(), <span class="hljs-string">&quot;, data=&quot;</span>, <span class="hljs-type">string</span>(request.GetData()))<br>    err := request.GetConnection().SendMsg(<span class="hljs-number">0</span>, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;ping...ping...ping&quot;</span>))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(err)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//HelloZinxRouter Handle</span><br><span class="hljs-keyword">type</span> HelloZinxRouter <span class="hljs-keyword">struct</span> &#123;<br>    znet.BaseRouter<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *HelloZinxRouter)</span></span> Handle(request ziface.IRequest) &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Call HelloZinxRouter Handle&quot;</span>)<br>    <span class="hljs-comment">//先读取客户端的数据，再回写ping...ping...ping</span><br>    fmt.Println(<span class="hljs-string">&quot;recv from client : msgId=&quot;</span>, request.GetMsgID(), <span class="hljs-string">&quot;, data=&quot;</span>, <span class="hljs-type">string</span>(request.GetData()))<br>    err := request.GetConnection().SendMsg(<span class="hljs-number">1</span>, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Hello Zinx Router V0.6&quot;</span>))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(err)<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//创建一个server句柄</span><br>    s := znet.NewServer()<br>    <span class="hljs-comment">//配置路由</span><br>    s.AddRouter(<span class="hljs-number">0</span>, &amp;PingRouter&#123;&#125;)<br>    s.AddRouter(<span class="hljs-number">1</span>, &amp;HelloZinxRouter&#123;&#125;)<br>    <span class="hljs-comment">//开启服务</span><br>    s.Serve()<br>&#125;<br></code></pre></td></tr></table></figure><p>我们现在写两个客户端，分别发送 0 消息和 1 消息来进行测试 Zinx 是否能够处理 2 个不同的消息业务。</p><p>Client.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>    <span class="hljs-string">&quot;zinx/znet&quot;</span><br>)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    模拟客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Client Test ... start&quot;</span>)<br>    <span class="hljs-comment">//3秒之后发起测试请求，给服务端开启服务的机会</span><br>    time.Sleep(<span class="hljs-number">3</span> * time.Second)<br>    conn,err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:7777&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;client start err, exit!&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//发封包message消息</span><br>        dp := znet.NewDataPack()<br>        msg, _ := dp.Pack(znet.NewMsgPackage(<span class="hljs-number">0</span>,[]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Zinx V0.6 Client0 Test Message&quot;</span>)))<br>        _, err := conn.Write(msg)<br>        <span class="hljs-keyword">if</span> err !=<span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;write error err &quot;</span>, err)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">//先读出流中的head部分</span><br>        headData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, dp.GetHeadLen())<br>        _, err = io.ReadFull(conn, headData) <span class="hljs-comment">//ReadFull 会把msg填充满为止</span><br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;read head error&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>        <span class="hljs-comment">//将headData字节流 拆包到msg中</span><br>        msgHead, err := dp.Unpack(headData)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;server unpack err:&quot;</span>, err)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> msgHead.GetDataLen() &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-comment">//msg 是有data数据的，需要再次读取data数据</span><br>            msg := msgHead.(*znet.Message)<br>            msg.Data = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, msg.GetDataLen())<br>            <span class="hljs-comment">//根据dataLen从io中读取字节流</span><br>            _, err := io.ReadFull(conn, msg.Data)<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                fmt.Println(<span class="hljs-string">&quot;server unpack data err:&quot;</span>, err)<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            fmt.Println(<span class="hljs-string">&quot;==&gt; Recv Msg: ID=&quot;</span>, msg.Id, <span class="hljs-string">&quot;, len=&quot;</span>, msg.DataLen, <span class="hljs-string">&quot;, data=&quot;</span>, <span class="hljs-type">string</span>(msg.Data))<br>        &#125;<br>        time.Sleep(<span class="hljs-number">1</span>*time.Second)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Client01.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>    <span class="hljs-string">&quot;zinx/znet&quot;</span><br>)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    模拟客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Client Test ... start&quot;</span>)<br>    <span class="hljs-comment">//3秒之后发起测试请求，给服务端开启服务的机会</span><br>    time.Sleep(<span class="hljs-number">3</span> * time.Second)<br>    conn,err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:7777&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;client start err, exit!&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-comment">//发封包message消息</span><br>        dp := znet.NewDataPack()<br>        msg, _ := dp.Pack(znet.NewMsgPackage(<span class="hljs-number">1</span>,[]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;Zinx V0.6 Client1 Test Message&quot;</span>)))<br>        _, err := conn.Write(msg)<br>        <span class="hljs-keyword">if</span> err !=<span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;write error err &quot;</span>, err)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">//先读出流中的head部分</span><br>        headData := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, dp.GetHeadLen())<br>        _, err = io.ReadFull(conn, headData) <span class="hljs-comment">//ReadFull 会把msg填充满为止</span><br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;read head error&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>        <span class="hljs-comment">//将headData字节流 拆包到msg中</span><br>        msgHead, err := dp.Unpack(headData)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;server unpack err:&quot;</span>, err)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> msgHead.GetDataLen() &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-comment">//msg 是有data数据的，需要再次读取data数据</span><br>            msg := msgHead.(*znet.Message)<br>            msg.Data = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, msg.GetDataLen())<br>            <span class="hljs-comment">//根据dataLen从io中读取字节流</span><br>            _, err := io.ReadFull(conn, msg.Data)<br>            <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                fmt.Println(<span class="hljs-string">&quot;server unpack data err:&quot;</span>, err)<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            fmt.Println(<span class="hljs-string">&quot;==&gt; Recv Msg: ID=&quot;</span>, msg.Id, <span class="hljs-string">&quot;, len=&quot;</span>, msg.DataLen, <span class="hljs-string">&quot;, data=&quot;</span>, <span class="hljs-type">string</span>(msg.Data))<br>        &#125;<br>        time.Sleep(<span class="hljs-number">1</span>*time.Second)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们点击命令行右上角的分隔按钮，启动三个命令行窗口。值得注意的是，每启动一个窗口，都需要在里面先执行 <code>export GOPATH=/home/project</code> 这道命令。</p><p>测试结果：</p><p><img src="/../../../images/Zinx/5079265929daf30444ba414d8cedff98-0.png" alt="img"></p><h1 id="v0-7-读写分离"><a href="#v0-7-读写分离" class="headerlink" title="[v0.7] 读写分离"></a>[v0.7] 读写分离</h1><h2 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h2><p><img src="https://doc.shiyanlou.com/courses/1639/1240622/0b1e3201b784a5a2b358789aa408803e-0" alt="img"></p><p>接下来我们就要对 Zinx 做一个小小的改变，就是与客户端进修数据交互的 Gouroutine 由一个变成两个，一个专门负责从客户端读取数据，一个专门负责向客户端写数据。这么设计有什么好处，当然是目的就是高内聚，模块的功能单一，对于我们今后扩展功能更加方便。</p><blockquote><p><strong>知识点</strong></p><ol><li>Golang并发模型</li><li>读写分离</li></ol></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><img src="/../../../images/Zinx/ee191fe76155df0c6a4f83ec2915aa6f.jpeg" alt="七、Zinx的读写分离模型  - 图1"></p><p>Server 依然是处理客户端的响应，主要关键的几个方法是 Listen、Accept 等。当建立与客户端的套接字后，那么就会开启两个 Goroutine 分别处理读数据业务和写数据业务，读写数据之间的消息通过一个 Channel 传递。下面我们就开始进行实际的实现。</p><h3 id="1-添加读写模块交互数据的管道"><a href="#1-添加读写模块交互数据的管道" class="headerlink" title="1. 添加读写模块交互数据的管道"></a>1. 添加读写模块交互数据的管道</h3><ol><li>connection.go</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Connection <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">//当前连接的socket TCP套接字</span><br>    Conn *net.TCPConn<br>    <span class="hljs-comment">//当前连接的ID 也可以称作为SessionID，ID全局唯一</span><br>    ConnID <span class="hljs-type">uint32</span><br>    <span class="hljs-comment">//当前连接的关闭状态</span><br>    isClosed <span class="hljs-type">bool</span><br>    <span class="hljs-comment">//消息管理MsgId和对应处理方法的消息管理模块</span><br>    MsgHandler ziface.IMsgHandle<br>    <span class="hljs-comment">//告知该链接已经退出/停止的channel</span><br>    ExitBuffChan <span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span><br>    <span class="hljs-comment">//无缓冲管道，用于读、写两个goroutine之间的消息通信</span><br>    msgChan        <span class="hljs-keyword">chan</span> []<span class="hljs-type">byte</span><br>&#125;<br><span class="hljs-comment">//创建连接的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewConntion</span><span class="hljs-params">(conn *net.TCPConn, connID <span class="hljs-type">uint32</span>, msgHandler ziface.IMsgHandle)</span></span> *Connection&#123;<br>    c := &amp;Connection&#123;<br>        Conn:     conn,<br>        ConnID:   connID,<br>        isClosed: <span class="hljs-literal">false</span>,<br>        MsgHandler: msgHandler,<br>        ExitBuffChan: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>),<br>        msgChan:<span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> []<span class="hljs-type">byte</span>), <span class="hljs-comment">//msgChan初始化</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> c<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-创建-Writer-Goroutine"><a href="#2-创建-Writer-Goroutine" class="headerlink" title="2. 创建 Writer Goroutine"></a>2. 创建 Writer Goroutine</h3><blockquote><p>zinx&#x2F;znet&#x2F;connection.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    写消息Goroutine， 用户将数据发送给客户端</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> StartWriter() &#123;<br>    fmt.Println(<span class="hljs-string">&quot;[Writer Goroutine is running]&quot;</span>)<br>    <span class="hljs-keyword">defer</span> fmt.Println(c.RemoteAddr().String(), <span class="hljs-string">&quot;[conn Writer exit!]&quot;</span>)<br>     <span class="hljs-keyword">for</span> &#123;<br>         <span class="hljs-keyword">select</span> &#123;<br>             <span class="hljs-keyword">case</span> data := &lt;-c.msgChan:<br>                 <span class="hljs-comment">//有数据要写给客户端</span><br>                 <span class="hljs-keyword">if</span> _, err := c.Conn.Write(data); err != <span class="hljs-literal">nil</span> &#123;<br>                     fmt.Println(<span class="hljs-string">&quot;Send Data error:, &quot;</span>, err, <span class="hljs-string">&quot; Conn Writer exit&quot;</span>)<br>                     <span class="hljs-keyword">return</span><br>                &#125;<br>             <span class="hljs-keyword">case</span> &lt;- c.ExitBuffChan:<br>                 <span class="hljs-comment">//conn已经关闭</span><br>                 <span class="hljs-keyword">return</span><br>        &#125;<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>关于 for select 和 channel 的用法：</p><p>select 语句只能与通道联用，它一般由若干个分支组成。每次执行这种语句的时候，一般只有一个分支中的代码会被运行。select 语句的分支分为两种，一种叫做候选分支，另一种叫做默认分支。候选分支总是以关键字 case 开头，后跟一个 case 表达式和一个冒号，然后我们可以从下一行开始写入当分支被选中时需要执行的语句。</p><p>由于 select 语句是专为通道而设计的，所以每个 case 表达式中都只能包含操作通道的表达式，比如接收表达式。使用一个接收值可以接收通道里的值，使用两个接收值可以判断通道是否已经关闭了。</p><p>对于 select 语句的执行规则如下：</p><ul><li>每个 case 都必须是一个通信。</li><li>所有 Channel 表达式都会被求值。</li><li>所有被发送的表达式都会被求值。</li><li>如果任意某个通信可以进行，它就执行，其他被忽略。</li><li>如果有多个 case 都可以运行，Select 会随机公平地选出一个执行。其他不会执行。 否则：</li><li>如果有 default 子句，则执行该语句。</li><li>如果没有 default 子句，select 将阻塞，直到某个通信可以运行；Go 不会重新对 Channel 或值进行求值。</li></ul><p>注意这里是和 switch 的操作是不一样的，switch 操作中，只要从上到下有一个满足条件了，就会执行相应的那一个 case，select 中，我们是全部计算一遍，然后再从可满足条件的 case 中公平的执行其中一个。这是为了防止有些通道长期得不到执行。</p><h3 id="3-Reader-将发送客户端的数据改为发送至Channel"><a href="#3-Reader-将发送客户端的数据改为发送至Channel" class="headerlink" title="3. Reader 将发送客户端的数据改为发送至Channel"></a>3. Reader 将发送客户端的数据改为发送至Channel</h3><p>修改 Reader 调用的<code>SendMsg()</code>方法</p><blockquote><p>zinx&#x2F;znet&#x2F;connection.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//直接将Message数据发送数据给远程的TCP客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> SendMsg(msgId <span class="hljs-type">uint32</span>, data []<span class="hljs-type">byte</span>) <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">if</span> c.isClosed == <span class="hljs-literal">true</span> &#123;<br>        <span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;Connection closed when send msg&quot;</span>)<br>    &#125;<br>    <span class="hljs-comment">//将data封包，并且发送</span><br>    dp := NewDataPack()<br>    msg, err := dp.Pack(NewMsgPackage(msgId, data))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Pack error msg id = &quot;</span>, msgId)<br>        <span class="hljs-keyword">return</span>  errors.New(<span class="hljs-string">&quot;Pack error msg &quot;</span>)<br>    &#125;<br>    <span class="hljs-comment">//写回客户端之前是写到客户端，现在是写到channel就可以</span><br>    c.msgChan &lt;- msg   <span class="hljs-comment">//将之前直接回写给conn.Write的方法 改为 发送给Channel 供Writer读取</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修改<code>Start()</code>方法</p><blockquote><p>zinx&#x2F;znet&#x2F;connection.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//启动连接，让当前连接开始工作</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> Start() &#123;<br>    <span class="hljs-comment">//1 开启用户从客户端读取数据流程的Goroutine</span><br>    <span class="hljs-keyword">go</span> c.StartReader()<br>    <span class="hljs-comment">//2 开启用于写回客户端数据流程的Goroutine</span><br>    <span class="hljs-keyword">go</span> c.StartWriter()<br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-keyword">select</span> &#123;<br>        <span class="hljs-keyword">case</span> &lt;- c.ExitBuffChan:<br>            <span class="hljs-comment">//得到退出消息，不再阻塞</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Zinx测试"><a href="#Zinx测试" class="headerlink" title="Zinx测试"></a>Zinx测试</h2><p>0.7版本的测试与0.6一致，因为只修改了内部消息发送的机制，<strong>对外的消息接口并没有发生变化</strong></p><h1 id="v0-8-实现工作池"><a href="#v0-8-实现工作池" class="headerlink" title="[v0.8] 实现工作池"></a>[v0.8] 实现工作池</h1><h2 id="功能-5"><a href="#功能-5" class="headerlink" title="功能"></a>功能</h2><p>给Zinx添加消息队列和多任务Worker机制。</p><p><img src="/../../../images/Zinx/2df6505fac57bea709e363da21fcfa1d-0.png" alt="img"></p><blockquote><p><strong>知识点</strong></p><ol><li>消息队列</li><li>工作池</li></ol></blockquote><p>这一步我们要实现的是，可以通过 worker 的数量来限定处理业务的固定goroutine数量，而不是无限制的开辟Goroutine，随谈我们知道go的调度算法已经做的很极致了，但是大数量的Goroutine依然会带来一些不必要的环境切换成本，这些本应该是服务器应该节省掉的成本。我们可以用消息队列来缓冲worker工作的数据。</p><p>设计结构如下：</p><p><img src="/../../../images/Zinx/6d0404ac69418597983083fd7ea27e89.jpeg" alt="img"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-创建消息队列"><a href="#1-创建消息队列" class="headerlink" title="1. 创建消息队列"></a>1. 创建消息队列</h3><p>首先，处理消息队列的部分，我们应该集成到<code>MsgHandler</code>模块下，因为属于我们消息模块范畴内的。</p><blockquote><p>zinx&#x2F;znet&#x2F;msghandler.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MsgHandle <span class="hljs-keyword">struct</span> &#123;<br>    Apis           <span class="hljs-keyword">map</span>[<span class="hljs-type">uint32</span>]ziface.IRouter  <span class="hljs-comment">//存放每个MsgId 所对应的处理方法的map属性</span><br>    WorkerPoolSize <span class="hljs-type">uint32</span>                     <span class="hljs-comment">//业务工作Worker池的数量</span><br>    TaskQueue      []<span class="hljs-keyword">chan</span> ziface.IRequest     <span class="hljs-comment">//Worker负责取任务的消息队列</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMsgHandle</span><span class="hljs-params">()</span></span> *MsgHandle &#123;<br>    <span class="hljs-keyword">return</span> &amp;MsgHandle&#123;<br>        Apis: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">uint32</span>]ziface.IRouter),<br>        WorkerPoolSize:utils.GlobalObject.WorkerPoolSize,<br>        <span class="hljs-comment">//一个worker对应一个queue</span><br>        TaskQueue:<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">chan</span> ziface.IRequest, utils.GlobalObject.WorkerPoolSize),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里添加两个成员:</p><ul><li><code>WokerPoolSize</code>:作为工作池的数量，因为 TaskQueue 中的每个队列应该是和一个 Worker 对应的，所以我们在创建 TaskQueue 中队列数量要和 Worker 的数量一致。</li><li><code>TaskQueue</code>真是一个 Request 请求信息的 channel 集合。用来缓冲提供 worker 调用的 Request 请求信息，worker 会从对应的队列中获取客户端的请求数据并且处理掉。</li></ul><p>当然<code>WorkerPoolSize</code>最好也可以从<code>GlobalObject</code>获取，并且<code>zinx.json</code>配置文件可以手动配置。</p><blockquote><p>zinx&#x2F;utils&#x2F;globalobj.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    存储一切有关Zinx框架的全局参数，供其他模块使用</span><br><span class="hljs-comment">    一些参数也可以通过 用户根据 zinx.json来配置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">type</span> GlobalObj <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Server</span><br><span class="hljs-comment">    */</span><br>    TcpServer ziface.IServer <span class="hljs-comment">//当前Zinx的全局Server对象</span><br>    Host      <span class="hljs-type">string</span>         <span class="hljs-comment">//当前服务器主机IP</span><br>    TcpPort   <span class="hljs-type">int</span>            <span class="hljs-comment">//当前服务器主机监听端口号</span><br>    Name      <span class="hljs-type">string</span>         <span class="hljs-comment">//当前服务器名称</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Zinx</span><br><span class="hljs-comment">    */</span><br>    Version          <span class="hljs-type">string</span> <span class="hljs-comment">//当前Zinx版本号</span><br>    MaxPacketSize    <span class="hljs-type">uint32</span> <span class="hljs-comment">//都需数据包的最大值</span><br>    MaxConn          <span class="hljs-type">int</span>    <span class="hljs-comment">//当前服务器主机允许的最大链接个数</span><br>    WorkerPoolSize   <span class="hljs-type">uint32</span> <span class="hljs-comment">//业务工作Worker池的数量</span><br>    MaxWorkerTaskLen <span class="hljs-type">uint32</span> <span class="hljs-comment">//业务工作Worker对应负责的任务队列最大任务存储数量</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        config file path</span><br><span class="hljs-comment">    */</span><br>    ConfFilePath <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-comment">//...</span><br><span class="hljs-comment">//...</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    提供init方法，默认加载</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//初始化GlobalObject变量，设置一些默认值</span><br>    GlobalObject = &amp;GlobalObj&#123;<br>        Name:          <span class="hljs-string">&quot;ZinxServerApp&quot;</span>,<br>        Version:       <span class="hljs-string">&quot;V0.4&quot;</span>,<br>        TcpPort:       <span class="hljs-number">7777</span>,<br>        Host:          <span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>        MaxConn:       <span class="hljs-number">12000</span>,<br>        MaxPacketSize: <span class="hljs-number">4096</span>,<br>        ConfFilePath:  <span class="hljs-string">&quot;conf/zinx.json&quot;</span>,<br>        WorkerPoolSize: <span class="hljs-number">10</span>,<br>        MaxWorkerTaskLen: <span class="hljs-number">1024</span>,<br>    &#125;<br>    <span class="hljs-comment">//从配置文件中加载一些用户配置的参数</span><br>    GlobalObject.Reload()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-创建及启动Worker工作池"><a href="#2-创建及启动Worker工作池" class="headerlink" title="2. 创建及启动Worker工作池"></a>2. 创建及启动Worker工作池</h3><p>现在添加 Worker 工作池，先定义一些启动工作池的接口。</p><blockquote><p>zinx&#x2F;ziface&#x2F;imsghandler.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    消息管理抽象层</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> IMsgHandle <span class="hljs-keyword">interface</span>&#123;<br>    DoMsgHandler(request IRequest)            <span class="hljs-comment">//马上以非阻塞方式处理消息</span><br>    AddRouter(msgId <span class="hljs-type">uint32</span>, router IRouter)    <span class="hljs-comment">//为消息添加具体的处理逻辑</span><br>    StartWorkerPool()                        <span class="hljs-comment">//启动worker工作池</span><br>    SendMsgToTaskQueue(request IRequest)    <span class="hljs-comment">//将消息交给TaskQueue,由worker进行处理</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>zinx&#x2F;znet&#x2F;msghandler.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 注意，头文件中要引入 zinx/utils</span><br><span class="hljs-comment">//启动一个Worker工作流程</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mh *MsgHandle)</span></span> StartOneWorker(workerID <span class="hljs-type">int</span>, taskQueue <span class="hljs-keyword">chan</span> ziface.IRequest) &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Worker ID = &quot;</span>, workerID, <span class="hljs-string">&quot; is started.&quot;</span>)<br>    <span class="hljs-comment">//不断的等待队列中的消息</span><br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-keyword">select</span> &#123;<br>            <span class="hljs-comment">//有消息则取出队列的Request，并执行绑定的业务方法</span><br>            <span class="hljs-keyword">case</span> request := &lt;-taskQueue:<br>                mh.DoMsgHandler(request)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//启动worker工作池</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mh *MsgHandle)</span></span> StartWorkerPool() &#123;<br>    <span class="hljs-comment">//遍历需要启动worker的数量，依此启动</span><br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-number">0</span>; i &lt; <span class="hljs-type">int</span>(mh.WorkerPoolSize); i++ &#123;<br>        <span class="hljs-comment">//一个worker被启动</span><br>        <span class="hljs-comment">//给当前worker对应的任务队列开辟空间</span><br>        mh.TaskQueue[i] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> ziface.IRequest, utils.GlobalObject.MaxWorkerTaskLen)<br>        <span class="hljs-comment">//启动当前Worker，阻塞的等待对应的任务队列是否有消息传递进来</span><br>        <span class="hljs-keyword">go</span> mh.StartOneWorker(i, mh.TaskQueue[i])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>StartWorkerPool()</code>方法是启动 Worker 工作池，这里根据用户配置好的<code>WorkerPoolSize</code>的数量来启动，然后分别给每个 Worker 分配一个<code>TaskQueue</code>，然后用一个 goroutine 来承载一个 Worker 的工作业务。</p><p><code>StartOneWorker()</code>方法就是一个 Worker 的工作业务，每个 worker 是不会退出的(目前没有设定 worker 的停止工作机制)，会永久的从对应的 TaskQueue 中等待消息，并处理。</p><h3 id="3-发送消息给消息队列"><a href="#3-发送消息给消息队列" class="headerlink" title="3. 发送消息给消息队列"></a>3. 发送消息给消息队列</h3><p>现在，worker 工作池已经准备就绪了，那么就需要有一个给到 worker 工作池消息的入口，我们再定义一个方法</p><blockquote><p>zinx&#x2F;znet&#x2F;msghandler.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//将消息交给TaskQueue,由worker进行处理</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mh *MsgHandle)</span></span>SendMsgToTaskQueue(request ziface.IRequest) &#123;<br>    <span class="hljs-comment">//根据ConnID来分配当前的连接应该由哪个worker负责处理</span><br>    <span class="hljs-comment">//轮询的平均分配法则</span><br>    <span class="hljs-comment">//得到需要处理此条连接的workerID</span><br>    workerID := request.GetConnection().GetConnID() % mh.WorkerPoolSize<br>    fmt.Println(<span class="hljs-string">&quot;Add ConnID=&quot;</span>, request.GetConnection().GetConnID(),<span class="hljs-string">&quot; request msgID=&quot;</span>, request.GetMsgID(), <span class="hljs-string">&quot;to workerID=&quot;</span>, workerID)<br>    <span class="hljs-comment">//将请求消息发送给任务队列</span><br>    mh.TaskQueue[workerID] &lt;- request<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SendMsgToTaskQueue()</code>作为工作池的数据入口，这里面采用的是轮询的分配机制，因为不同链接信息都会调用这个入口，那么到底应该由哪个 worker 处理该链接的请求处理，整理用的是一个简单的求模运算。用余数和 workerID 的匹配来进行分配。</p><p>最终将 request 请求数据发送给对应 worker 的 TaskQueue，那么对应的 worker 的 Goroutine 就会处理该链接请求了。</p><h3 id="4-工作池代码调用"><a href="#4-工作池代码调用" class="headerlink" title="4. 工作池代码调用"></a>4. 工作池代码调用</h3><p>好了，现在需要将消息队列和多任务 worker 机制集成到我们 Zinx 的中了。我们在 Server 的<code>Start()</code>方法中，在服务端 Accept 之前，启动 Worker 工作池。</p><blockquote><p>zinx&#x2F;znet&#x2F;server.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//开启网络服务,只需要修改这里所提到的部分，对于打了 //... 的部分的意思是原来的代码不需要做修改</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Server)</span></span> Start() &#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-comment">//开启一个go去做服务端Linster业务</span><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-comment">//0 启动worker工作池机制</span><br>        s.msgHandler.StartWorkerPool()<br>        <span class="hljs-comment">//1 获取一个TCP的Addr</span><br>        addr, err := net.ResolveTCPAddr(s.IPVersion, fmt.Sprintf(<span class="hljs-string">&quot;%s:%d&quot;</span>, s.IP, s.Port))<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;resolve tcp addr err: &quot;</span>, err)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-comment">//...</span><br>        &#125;<br>    &#125;()<br>&#125;<br></code></pre></td></tr></table></figure><p>其次，当我们已经得到客户端的连接请求过来数据的时候，我们应该将数据发送给 Worker 工作池进行处理。</p><p>所以应该在 Connection 的<code>StartReader()</code>方法中修改：</p><blockquote><p>zinx&#x2F;znet&#x2F;connection.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 注意，头文件中要引入 zinx/utils</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    读消息Goroutine，用于从客户端中读取数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Connection)</span></span> StartReader() &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Reader Goroutine is  running&quot;</span>)<br>    <span class="hljs-keyword">defer</span> fmt.Println(c.RemoteAddr().String(), <span class="hljs-string">&quot; conn reader exit!&quot;</span>)<br>    <span class="hljs-keyword">defer</span> c.Stop()<br>    <span class="hljs-keyword">for</span>  &#123;<br>        <span class="hljs-comment">//...</span><br>        req := Request&#123;<br>            conn:c,<br>            msg:msg,<br>        &#125;<br>        <span class="hljs-keyword">if</span> utils.GlobalObject.WorkerPoolSize &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-comment">//已经启动工作池机制，将消息交给Worker处理</span><br>            c.MsgHandler.SendMsgToTaskQueue(&amp;req)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//从绑定好的消息和对应的处理方法中执行对应的Handle方法</span><br>            <span class="hljs-keyword">go</span> c.MsgHandler.DoMsgHandler(&amp;req)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里并没有强制使用多任务 Worker 机制，而是判断用户配置<code>WorkerPoolSize</code>的个数，如果大于 0，那么我就启动多任务机制处理链接请求消息，如果&#x3D;0 或者&lt;0 那么，我们依然只是之前的开启一个临时的 Goroutine 处理客户端请求消息。</p><h1 id="v0-9-实现链接控制"><a href="#v0-9-实现链接控制" class="headerlink" title="[v0.9] 实现链接控制"></a>[v0.9] 实现链接控制</h1><h2 id="功能-6"><a href="#功能-6" class="headerlink" title="功能"></a>功能</h2><p><img src="/../../../images/Zinx/4f22d83440b9a7d22dbac2d076cbf574-0.png" alt="img"></p><blockquote><p><strong>知识点</strong></p><ol><li>链接管理</li><li>数量限制</li></ol></blockquote><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2>]]></content>
    
    
    <summary type="html">并发服务器的实现</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Go" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Go/"/>
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="实验楼" scheme="https://www.mingsrc.work/tags/%E5%AE%9E%E9%AA%8C%E6%A5%BC/"/>
    
    <category term="服务器" scheme="https://www.mingsrc.work/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="Zinx" scheme="https://www.mingsrc.work/tags/Zinx/"/>
    
  </entry>
  
  <entry>
    <title>Go学习笔记（实验楼）</title>
    <link href="https://www.mingsrc.work/posts/aa7a6db9"/>
    <id>https://www.mingsrc.work/posts/aa7a6db9</id>
    <published>2022-01-30T02:39:14.905Z</published>
    <updated>2022-02-07T11:11:00.522Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h1 id="一、Go语言介绍"><a href="#一、Go语言介绍" class="headerlink" title="一、Go语言介绍"></a>一、Go语言介绍</h1><h2 id="Go语言的特性"><a href="#Go语言的特性" class="headerlink" title="Go语言的特性"></a>Go语言的特性</h2><h4 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程*"></a>并发编程<code>*</code></h4><p>Go 语言引入了 <code>goroutine</code>，它是 Go 实现快速高效的并发编程的关键。通过调用 <code>go</code> 关键字，我们就可以让函数以 <strong>goroutine</strong> 的方式进行运行，<u>也就是以协程为单位进行运行</u>。</p><blockquote><p>协程比线程更加的轻量级，也更节省系统资源，这使得我们可以创建大量的 goroutine，从而进行轻松且高质量的并发编程。同时，goroutine 内部采用管道 <code>channel</code> 进行消息传递，从而实现共享内存。在第五章我们还将对 Go 并发编程进行详细的讲解。</p></blockquote><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>Go 语言中的错误处理的哲学和 C 语言一样，函数通过返回错误类型 (<code>error</code>) 或者 <code>bool</code> 类型（不需要区分多种错误状态时）表明函数的执行结果，调用检查返回的错误类型值是否是 <code>nil</code> 来判断调用结果。并引入了 <code>defer</code> 关键字用于标准的错误处理流程，并提供了内置函数 <code>panic</code>、<code>recover</code> 完成异常的抛出与捕捉。</p><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><p>Go 语言自带垃圾自动回收的功能，让 Go 语言不需要 <code>delete</code> 关键字，也不需要 <code>free()</code> 来释放内存。因此开发者无需考虑何时需要释放之前分配的内存的问题，系统会自动帮我们判断，并在适当的时候进行垃圾处理。<strong>垃圾自动回收是 Go 语言的一个特点，也是一大亮点。</strong></p><h4 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h4><p>Go 语言和 Python 一样也支持函数的多返回值功能，这个特性让开发者可以从原来用各种比较别扭的方式返回多个值得痛苦中解脱出来，不需要为了一次返回多个值而专门定义一个结构体。并且每个返回值都有自己的名字，开发者还可以选择具体需要返回的值，只需要使用下划线作为占位符来丢掉不要的返回值即可。</p><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>Go 语言支持常规的匿名函数和闭包，开发者可以随意对匿名函数变量进行传递和调用，下面就是一个匿名函数样例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">f := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x,y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">return</span> x+y<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Go语言可以做什么"><a href="#Go语言可以做什么" class="headerlink" title="Go语言可以做什么"></a>Go语言可以做什么</h2><p>Go 语言是谷歌发布的第二款开源编程语言。专门针对多处理器系统应用程序的编程进行了优化，<strong>使用 Go 编译的程序可以媲美 C 或 C++ 代码的速度，而且更加安全、支持并行进程。</strong></p><p>Go 的目标是希望提升现有编程语言对程序库等依赖性 (dependency) 的管理，这些软件元素会被应用程序反复调用。由于存在并行编程模式，因此也被设计用来解决多处理器的任务。目前，已经有很多公司开始使用 Go 语言开发自己的服务，甚至完全转向 Go 开发，也诞生了很多基于 Go 的服务和应用，比如 <code>Dokcer</code>、<code>k8s</code> 等，现在我们看下，有哪些大公司在用 Go 语言了。</p><ul><li><p>Google 对 Go 寄予厚望。旗下 App Engine 和其他部分产品已经开始使用 Go 语言来编写。作为开发 Go 语言的公司，当仁不让。</p></li><li><p>Facebook 也在用 GO，还专门在 GitHub 上建立了一个开源组织 Facebookgo，大家可以通过 GitHub 访问查看 Facebook 开源的项目，比如著名的——平滑升级的 grace。</p></li></ul><p>此外，<u>百度、阿里</u>都在招 GO。<u>京东云消息推送系统、云存储以及京东商城</u>等都有使用 Go 做开发。</p><p>360 对 Golang 的使用主要是开源的日志搜索系统 <strong>Poseidon</strong>。而且，<u>360 直播</u>在招聘 Golang 开发工程师。</p><p><u>小米</u>对 Golang 的支持，莫过于运维监控系统的开源，也就是 open-falcon 。此外，小米互娱、小米商城、小米视频、小米生态链等团队都在使用 Golang。</p><hr><h1 id="二、Go语言基础"><a href="#二、Go语言基础" class="headerlink" title="二、Go语言基础"></a>二、Go语言基础</h1><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量使用关键字 <code>const</code> 声明，下面有几个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> limit = <span class="hljs-number">512</span><br><span class="hljs-keyword">const</span> top <span class="hljs-type">uint16</span> = <span class="hljs-number">1421</span><br><span class="hljs-keyword">const</span> Pi <span class="hljs-type">float64</span> = <span class="hljs-number">3.1415926</span><br><span class="hljs-keyword">const</span> x,y <span class="hljs-type">int</span> = <span class="hljs-number">1</span>,<span class="hljs-number">3</span> <span class="hljs-comment">//多重赋值</span><br></code></pre></td></tr></table></figure><p>Go 的常量定义可以限定常量类型，但不是必需的。如果定义常量时没有指定类型，那么该常量就是无类型常量，也叫字面常量。</p><p>当需要设置多个常量的时候，不必重复使用 <code>const</code> 关键字，可以使用以下语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    Cyan = <span class="hljs-number">0</span><br>    Black = <span class="hljs-number">1</span><br>    White = <span class="hljs-number">2</span><br>)<br></code></pre></td></tr></table></figure><p>Go 语言还预定义了这些常量：<code>true</code>、<code>false</code>、<code>iota</code>。</p><p><code>iota</code> 是一个可以被编译器修改的常量，在 <code>const</code> 关键字出现时被重置为 0，在下一个 <code>const</code> 出现之前，每出现一次 <code>iota</code>，其所代表的数字自动加 1。下面通过一个例子讲解 <code>iota</code> 的用法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    a = <span class="hljs-literal">iota</span>  <span class="hljs-comment">//a == 0</span><br>    b = <span class="hljs-literal">iota</span>  <span class="hljs-comment">//b ==1</span><br>    c = <span class="hljs-literal">iota</span>  <span class="hljs-comment">//c == 2</span><br>)<br><br><span class="hljs-keyword">const</span> d = <span class="hljs-literal">iota</span> <span class="hljs-comment">//d==0,因为const的出现，iota被重置为0</span><br></code></pre></td></tr></table></figure><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul><li><code>+</code>：相加；</li><li><code>-</code>：相减；</li><li><code>*</code>：相乘；</li><li><code>/</code>：相除；</li><li><code>%</code>：求余；</li><li><code>++</code>：自增；</li><li><code>--</code>：自减；</li></ul><blockquote><p>其中，<code>++</code> 与 <code>--</code> 不能用于赋值表达式, 如: <code>count2 := count++</code>；并且在 Go 语言中，不存在如：<code>++count</code> 表达式。</p></blockquote><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li><code>==</code>：检查两个值是否相等，如果相等返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>!=</code>：检查两个值是否不相等，如果不相等返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>&gt;</code>：检查左边值是否大于右边值，如果是返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>&lt;</code>：检查左边值是否小于右边值，如果是返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>&gt;=</code>：检查左边值是否大于等于右边值，如果是返回 <code>true</code>，否则返回 <code>false</code>；</li><li><code>&lt;=</code>：检查左边值是否小于等于右边值，如果是返回 <code>true</code>，否则返回 <code>false</code>；</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><code>&amp;&amp;</code>：逻辑 <code>AND</code> 运算符。如果两边的操作数都是 <code>true</code>，则条件为 <code>true</code>，否则为 <code>false</code>；</li><li><code>||</code>：逻辑 <code>OR</code> 运算符。如果两边的操作数有一个 <code>true</code>，则条件为 <code>true</code>，否则为 <code>false</code>；</li><li><code>!</code>：逻辑 <code>NOT</code> 运算符。如果条件为 <code>true</code>，则逻辑 <code>NOT</code> 添加为 <code>true</code>，否则为 <code>false</code>；</li></ul><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li><code>&amp;</code>：按位与运算符。其功能是参与运算的两个数的二进制按位对齐，<strong>当对应位都为 1 时，才返回 1</strong>；</li><li><code>|</code>：按位或运算符。其功能是参与运算的两个数的二进制按位对齐，<strong>当对应位中只要有一位是 1，就返回 1</strong>；</li><li><code>^</code>：按位异或运算符。其是参与运算的两个数的二进制按位对齐，<strong>当对应位有一位是 1，就返回 1；如果对应两位都是 1 或 0，就返回 0</strong>；</li><li><code>&lt;&lt;</code>：左移运算符。<strong>其功能是将数值的二进制所有位向左移动指定的位数</strong>；</li><li><code>&gt;&gt;</code>：右移运算符。<strong>其功能是将数值的二进制所有位向右移动指定的位数</strong>；</li></ul><h3 id="赋值运算法"><a href="#赋值运算法" class="headerlink" title="赋值运算法"></a>赋值运算法</h3><ul><li><code>=</code>：简单的赋值运算符，将一个表达式的值赋给一个左值;</li><li><code>+=</code>：相加后再赋值;</li><li><code>-=</code>：相减后再赋值；</li><li><code>*=</code>：相乘后再赋值；</li><li><code>/=</code>：相除后再赋值；</li><li><code>%=</code>：取余后再赋值；</li><li><code>&amp;=</code>：按位与后赋值；</li><li><code>|=</code>：按位或后赋值；</li><li><code>^=</code>：按位异或后赋值；</li><li><code>&lt;&lt;=</code>：左位移后赋值；</li><li><code>&gt;&gt;=</code>：右位移后赋值；</li></ul><h3 id="和-amp"><a href="#和-amp" class="headerlink" title="*和&amp;"></a><code>*</code>和<code>&amp;</code></h3><ol><li><code>&amp;</code>是取地址符号 , 即取得某个变量的地址 , 如 ：<code>&amp;a</code></li><li><code>*</code>是指针运算符 , 可以表示一个变量是<strong>指针类型</strong> , 也可以表示<strong>一个指针变量所指向的存储单元</strong> , 也就是这个地址所存储的值 .</li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量是所有语言最基本和最重要的组成部分。Go 语言引入了关键字 <code>var</code> 对变量进行声明，也可以使用 <code>:=</code> 来对变量直接进行初始化，Go 编译器会自动推导出该变量的类型，这大大的方便了开发者的工作。但是需要注意的是 <code>:=</code> 左侧的变量不能是已经被声明过的，否则会导致编译器错误。</p><p>以下是 Go 声明和初始化变量的各种方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> c <span class="hljs-type">float64</span><br><span class="hljs-keyword">var</span> d [<span class="hljs-number">5</span>] <span class="hljs-type">int</span>  <span class="hljs-comment">//数组</span><br><span class="hljs-keyword">var</span> e [] <span class="hljs-type">int</span>   <span class="hljs-comment">//数组切片</span><br><span class="hljs-keyword">var</span> f * <span class="hljs-type">int</span>    <span class="hljs-comment">//正确</span><br><span class="hljs-keyword">var</span> v1 <span class="hljs-type">int</span> = <span class="hljs-number">5</span> <span class="hljs-comment">//正确</span><br><span class="hljs-keyword">var</span> v2 = <span class="hljs-number">5</span>     <span class="hljs-comment">//正确，编译器自动推导出V2类型</span><br>v3 := <span class="hljs-number">5</span>        <span class="hljs-comment">//正确，编译器自动推导出V3的类型</span><br></code></pre></td></tr></table></figure><h3 id="多重赋值"><a href="#多重赋值" class="headerlink" title="多重赋值"></a>多重赋值</h3><p>Go 语言提供了大多数语言不支持的多重赋值，这使得变量的交换变得十分简单。下面通过一个例子来了解 Go 语言的多重赋值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">2</span><br>j := <span class="hljs-number">3</span><br>i, j = j, i  <span class="hljs-comment">//交换i和j的值，此时i == 3，j == 2</span><br></code></pre></td></tr></table></figure><p>这样的方式可以一行代码实现变量的交换，明显的减少代码的行数，而不需要像 C&#x2F;C++ 那样引入一个中间变量。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型*"></a>数据类型<code>*</code></h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>Go 语言提供了 11 种整型，如下列表所示。</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>byte</code></td><td>等同于 uint8</td></tr><tr><td><code>int</code></td><td>依赖于不同平台下的实现，可以是 int32 或者 int64</td></tr><tr><td><code>int8</code></td><td>[-128, 127]</td></tr><tr><td><code>int16</code></td><td>[-32768, 32767]</td></tr><tr><td><code>int32</code></td><td>[-2147483648, 2147483647]</td></tr><tr><td><code>int64</code></td><td>[-9223372036854775808, 9223372036854775807]</td></tr><tr><td><code>rune</code></td><td>等同于 int32</td></tr><tr><td><code>uint</code></td><td>依赖于不同平台下的实现，可以是 uint32 或者 uint64</td></tr><tr><td><code>uint8</code></td><td>[0, 255]</td></tr><tr><td><code>uint16</code></td><td>[0, 65535]</td></tr><tr><td><code>uint32</code></td><td>[0, 4294967295]</td></tr><tr><td><code>uint64</code></td><td>[0, 18446744073709551615]</td></tr><tr><td><code>uintptr</code></td><td>一个可以恰好容纳指针值的无符号整型（对 32 位平台是 uint32, 对 64 位平台是 uint64）</td></tr></tbody></table><p>在 <code>C</code> 语言中我们可以通过 <code>sizeof</code> 操作符查看类型的字节长度，在 Go 语言中可以通过 <code>unsafe.Sizeof</code> 函数进行，创建源文件 <code>type_length.go</code>，输入以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;unsafe&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    a := <span class="hljs-number">12</span><br>    fmt.Println(<span class="hljs-string">&quot;length of a: &quot;</span>, unsafe.Sizeof(a))<br>    <span class="hljs-keyword">var</span> b <span class="hljs-type">int</span> = <span class="hljs-number">12</span><br>    fmt.Println(<span class="hljs-string">&quot;length of b(int): &quot;</span>, unsafe.Sizeof(b))<br>    <span class="hljs-keyword">var</span> c <span class="hljs-type">int8</span> = <span class="hljs-number">12</span><br>    fmt.Println(<span class="hljs-string">&quot;length of c(int8): &quot;</span>, unsafe.Sizeof(c))<br>    <span class="hljs-keyword">var</span> d <span class="hljs-type">int16</span> = <span class="hljs-number">12</span><br>    fmt.Println(<span class="hljs-string">&quot;length of d(int16): &quot;</span>, unsafe.Sizeof(d))<br>    <span class="hljs-keyword">var</span> e <span class="hljs-type">int32</span> = <span class="hljs-number">12</span><br>    fmt.Println(<span class="hljs-string">&quot;length of e(int32): &quot;</span>, unsafe.Sizeof(e))<br>    <span class="hljs-keyword">var</span> f <span class="hljs-type">int64</span> = <span class="hljs-number">12</span><br>    fmt.Println(<span class="hljs-string">&quot;length of f(int64): &quot;</span>, unsafe.Sizeof(f))<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中，首先声明了目前的源文件属于 <code>main</code> 包，然后导入了 <code>fmt</code> 和 <code>unsafe</code> 包，<code>fmt</code> 包用于格式化字符串，<code>unsafe</code> 包含了用于获取 Go 语言类型信息的方法。然后在 <code>main()</code> 函数中，我们分别声明了几种类型的整型变量，并通过 <code>unsafe.Sizeof</code> 方法获取该类型的字节长度。最后我们通过以下方法运行 <code>type_length.go</code>，同时打印出了输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run type_length.go<br>length of a:  8<br>length of b(int):  8<br>length of c(int8):  1<br>length of d(int16):  2<br>length of e(int32):  4<br>length of f(int64):  8<br></code></pre></td></tr></table></figure><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>Go 语言提供了两种浮点类型和两种复数类型，具体如下：</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>float32</td><td>±3.402 823 466 385 288 598 117 041 834 845 169 254 40x1038 计算精度大概是小数点后 7 个十进制数</td></tr><tr><td>float64</td><td>±1.797 693 134 862 315 708 145 274 237 317 043 567 981x1038 计算精度大概是小数点后 15 个十进制数</td></tr><tr><td>complex32</td><td>复数，实部和虚部都是 float32</td></tr><tr><td>complex64</td><td>复数，实部和虚部都是 float64</td></tr></tbody></table><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>Go 语言提供了内置的布尔值 <code>true</code> 和<code>false</code>。Go 语言支持标准的逻辑和比较操作，这些操作的结果都是布尔值。值得注意的地方是可以通过 <code>!b</code> 的方式反转变量 <code>b</code> 的真假。需要注意的是布尔类型不能接受其他类型的赋值，不支持自动或强制的类型转换。实例代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a <span class="hljs-type">bool</span><br>a = <span class="hljs-literal">true</span><br>b := (<span class="hljs-number">2</span> == <span class="hljs-number">3</span>) <span class="hljs-comment">//b也会被推导为bool类型</span><br><br><span class="hljs-comment">//错误示范</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">bool</span><br>b = <span class="hljs-number">1</span> <span class="hljs-comment">//编译错误</span><br>b = <span class="hljs-type">bool</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">//编译错误</span><br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Go 语言中的字符串是 <a href="http://zh.wikipedia.org/wiki/UTF-8">UTF-8</a> 字符的一个序列（当字符为 ASCII 码时则占用 1 个字节，其它字符根据需要占用 2-4 个字节）。UTF-8 是被广泛使用的编码格式，是文本文件的标准编码，其它包括 XML 和 JSON 在内，也都使用该编码。由于该编码对占用字节长度的不定性，Go 中的字符串也可能根据需要占用 1 至 4 个字节，这与其它语言如 C++、Java 或者 Python 不同。Go 这样做的好处是不仅减少了内存和硬盘空间占用，同时也不用像其它语言那样需要对使用 UTF-8 字符集的文本进行编码和解码。</p><p>Go 语言中字符串的可以使用双引号 (<code>&quot;</code>) 或者反引号 (&#96;&#96;&#96;) 来创建。双引号用来创建可解析的字符串字面量，所谓可解析的是指字符串中的一些符号可以被格式化为其他内容，如 <code>\n</code> 在在输出时候会被格式化成换行符，如果需要按照原始字符输出必须进行转义。而反引号创建的字符串原始是什么样，那输出还是什么，不需要进行任何转义。以下是几个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">t1 := <span class="hljs-string">&quot;\&quot;hello\&quot;&quot;</span>             <span class="hljs-comment">//内容： &quot;hello&quot;</span><br>t2 := <span class="hljs-string">`&quot;hello&quot;`</span>               <span class="hljs-comment">//内容：和t1一致</span><br>t3 := <span class="hljs-string">&quot;\u6B22\u8FCE&quot;</span>          <span class="hljs-comment">//内容：欢迎</span><br></code></pre></td></tr></table></figure><p>Go 语言中的部分转义字符如下表所示：</p><table><thead><tr><th>转义字符</th><th>含义</th></tr></thead><tbody><tr><td><code>\\</code></td><td>表示反斜线</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\n</code></td><td>换行符</td></tr><tr><td><code>\uhhhh</code></td><td>4 个 16 进制数字给定的 Unicode 字符</td></tr></tbody></table><p>在 Go 语言中单个字符可以使用单引号 (<code>&#39;</code>) 来创建。之前的课程中，我们有学习过 <code>rune</code> 类型，它等同于 <code>int32</code>，在 Go 语言中，一个单一的字符可以用一个单一的 <code>rune</code> 来表示。这也是容易理解的，因为 Go 语言的字符串是 UTF-8 编码，其底层使用 4 个字节表示，也就是 32 bit。</p><p>在 Go 语言中，字符串支持切片操作，但是需要注意的是如果字符串都是由 ASCII 字符组成，那可以随便使用切片进行操作，但是如果字符串中包含其他非 ASCII 字符，直接使用切片获取想要的单个字符时需要十分小心，因为对字符串直接使用切片时是通过字节进行索引的，但是非 ASCII 字符在内存中可能不是由一个字节组成。如果想对字符串中字符依次访问，可以使用 <code>range</code> 操作符。另外获取字符串的长度可能有两种含义，一种是指获取字符串的字节长度，一种是指获取字符串的字符数量。字符串支持以下操作：</p><table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td><code>s += t</code></td><td>将字符串 t 追加到 s 末尾</td></tr><tr><td><code>s + t</code></td><td>将字符串 s 和 t 级联</td></tr><tr><td><code>s[n]</code></td><td>从字符串 s 中索引位置为 n 处的原始字节</td></tr><tr><td><code>s[n:m]</code></td><td>从位置 n 到位置 <code>m-1</code> 处取得的字符（字节）串</td></tr><tr><td><code>s[n:]</code></td><td>从位置 n 到位置 <code>len(s)-1</code> 处取得的字符（字节）串</td></tr><tr><td><code>s[:m]</code></td><td>从位置 0 到位置 <code>m-1</code> 处取得的字符（字节）串</td></tr><tr><td><code>len(s)</code></td><td>字符串 s 中的字节数</td></tr><tr><td><code>len([]rune(s))</code></td><td>字符串 s 中字符的个数，可以使用更快的方法 <code>utf8.RuneCountInString()</code></td></tr><tr><td><code>[]rune(s)</code></td><td>将字符串 s 转换为一个 unicode 值组成的串</td></tr><tr><td><code>string(chars)</code></td><td>chars 类型是 <code>[]rune</code> 或者 <code>[]int32</code>, 将之转换为字符串</td></tr><tr><td><code>[]byte(s)</code></td><td>无副本的将字符串 s 转换为一个原始的字节的切片数组，不保证转换的字节是合法的 UTF-8 编码字节</td></tr></tbody></table><p>让我们尝试一个例子，创建源文件 <code>string_t.go</code>，然后输入以下源代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    t0 := <span class="hljs-string">&quot;\u6B22\u8FCE\u6765\u5230&quot;</span> <span class="hljs-comment">// t0内容：欢迎来到</span><br>    t1 := <span class="hljs-string">&quot;\u5B9E\u9A8C\u697C&quot;</span>       <span class="hljs-comment">// t1内容：实验楼</span><br>    t2 := t0 + t1<br>    <span class="hljs-keyword">for</span> index, char := <span class="hljs-keyword">range</span> t2 &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;%-2d    %U      &#x27;%c&#x27;    %X      %d\n&quot;</span>,<br>            index, char, char, []<span class="hljs-type">byte</span>(<span class="hljs-type">string</span>(char)), <span class="hljs-built_in">len</span>([]<span class="hljs-type">byte</span>(<span class="hljs-type">string</span>(char))))<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;length of t0: %d, t1: %d, t2: %d\n&quot;</span>, <span class="hljs-built_in">len</span>(t0), <span class="hljs-built_in">len</span>(t1), <span class="hljs-built_in">len</span>(t2))<br>    fmt.Printf(<span class="hljs-string">&quot;content of t2[0:2] is: %X\n&quot;</span>, t2[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>然后通过以下方式运行，在这里一起显示了程序的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run string_t.go<br>0     U+6B22      <span class="hljs-string">&#x27;欢&#x27;</span>    E6ACA2      3<br>3     U+8FCE      <span class="hljs-string">&#x27;迎&#x27;</span>    E8BF8E      3<br>6     U+6765      <span class="hljs-string">&#x27;来&#x27;</span>    E69DA5      3<br>9     U+5230      <span class="hljs-string">&#x27;到&#x27;</span>    E588B0      3<br>12    U+5B9E      <span class="hljs-string">&#x27;实&#x27;</span>    E5AE9E      3<br>15    U+9A8C      <span class="hljs-string">&#x27;验&#x27;</span>    E9AA8C      3<br>18    U+697C      <span class="hljs-string">&#x27;楼&#x27;</span>    E6A5BC      3<br>length of t0: 12, t1: 9, t2: 21<br>content of t2[0:2] is: E6AC<br></code></pre></td></tr></table></figure><p>说明：</p><p>通过前面的课程我们知道通过 <code>\uhhhh</code> 的方式我们可以通过创建 Unicode 字符。</p><p>在以上程序中，首先通过 <code>:=</code> 符号创建了变量 <code>t0</code>，其值为 <code>\u6B22\u8FCE\u6765\u5230</code>，是 <code>欢迎来到</code> 中文字符的 unicode 编码，然后以同样的方式创建了变量 <code>t1</code>，其值为 <code>实验楼</code>，然后通过 <code>+</code> 操作符将 <code>t0</code> 和<code>t1</code> 拼接赋值给 <code>t2</code>。然后我们通过 <code>range</code> 操作符号对 unicode 字符串 <code>t2</code> 中的每一个 unicode 字符依次操作，我们这里只是简单的打印出每个字符在 <code>t2</code> 中的位置，每个字符的 unicode 码值，每个字符的字面量，每个字符的十六进制值，以及每个字符的字节长度。</p><p>这里我们使用 <code>fmt</code> 包种支持的格式指令，如果读者学习过 C 语言的话就一目了然。接着，我们通过 <code>len</code> 操作符计算出了每个字符串的字节长度。最后，我们使用切片访问了字符串 <code>t2</code> 的第 0-1 个字节，也就是前两个字节，其内容为 <code>E6AC</code>。前面我们说到不能使用切片的方式访问非 ASCII 字符串中的字符，原因在这里一目了然。字符 <code>欢</code> 其底层使用了三个字节表示，内容是 <code>E6ACA2</code>，如果只是简单的使用切片（只取切片中的一项）访问的是不能访问到整个字符的，因为字符的切片是通过字节数来索引的。</p><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>Go 语言标准库中的 <code>fmt</code> 包提供了打印函数将数据以字符串形式输出到控制台，文件，其他满足 <code>io.Writer</code> 接口的值以及其他字符串。目前为止我们使用了 <code>fmt.Printf</code> 和 <code>fmt.Println</code>，对于前者的使用，就像 C 语言中的 <code>printf</code> 函数一样，我们可以提供一些格式化指令，让 Go 语言对输出的字符串进行格式化。同样的我们可以使用一些格式化修饰符，改变格式化指令的输出结果， 如左对齐等。常用的格式化指令如下：</p><table><thead><tr><th>格式化指令</th><th>含义</th></tr></thead><tbody><tr><td><code>%%</code></td><td>% 字面量</td></tr><tr><td><code>%b</code></td><td>一个二进制整数，将一个整数格式化为二进制的表达方式</td></tr><tr><td><code>%c</code></td><td>一个 Unicode 的字符</td></tr><tr><td><code>%d</code></td><td>十进制数值</td></tr><tr><td><code>%o</code></td><td>八进制数值</td></tr><tr><td><code>%x</code></td><td>小写的十六进制数值</td></tr><tr><td><code>%X</code></td><td>大写的十六进制数值</td></tr><tr><td><code>%U</code></td><td>一个 Unicode 表示法表示的整形码值，默认是 4 个数字字符</td></tr><tr><td><code>%s</code></td><td>输出以原生的 UTF-8 字节表示的字符，如果 console 不支持 UTF-8 编码，则会输出乱码</td></tr><tr><td><code>%t</code></td><td>以 true 或者 false 的方式输出布尔值</td></tr><tr><td><code>%v</code></td><td>使用默认格式输出值，或者使用类型的 String() 方法输出的自定义值，如果该方法存在的话</td></tr><tr><td>%T</td><td>输出值的类型</td></tr></tbody></table><p>常用的格式化指令修饰符如下：</p><ul><li><p><code>空白</code> 如果输出的数字为负，则在其前面加上一个减号 <code>-</code>。如果输出的是整数，则在前面加一个空格。使用 <code>%x</code> 或者 <code>%X</code> 格式化指令输出时，会在结果之间添加一个空格。例如 <code>fmt.Printf(&quot;% X&quot;, &quot;实&quot;)</code> 输出 E5 AE 9E。</p></li><li><p><code>#</code></p><ul><li><code>%#o</code> 输出以 <code>0</code> 开始的八进制数据。</li><li><code>%#x</code> 输出以 <code>0x</code> 开始的十六进制数据。</li></ul></li><li><p><code>+</code> 让格式化指令在数值前面输出 <code>+</code> 号或者 <code>-</code> 号，为字符串输出 ASCII 字符（非 ASCII 字符会被转义），为结构体输出其字段名。</p></li><li><p><code>-</code> 让格式化指令将值向左对齐（默认值为像右对齐）。</p></li><li><p><code>0</code> 让格式指令以数字 0 而非空白进行填充。</p></li></ul><p>让我们练习一下，创建源文件 <code>fmt_t.go</code>，输入以下源码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    text := <span class="hljs-string">&quot;\u5B9E\u9A8C\u697C&quot;</span><br>    fmt.Printf(<span class="hljs-string">&quot;bool output:\n%t\n%t\n\n&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>)<br>    fmt.Println(<span class="hljs-string">&quot;number output, origin value: 64&quot;</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;|%b|%8b|%-8b|%08b|% 8b|\n&quot;</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;|%x|%8x|%-8x|%08X|% 8X|\n\n&quot;</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>, <span class="hljs-number">64</span>)<br>    fmt.Println(<span class="hljs-string">`text output, origin value: \u5B9E\u9A8C\u697C`</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;content: %s\n&quot;</span>, text)<br>    fmt.Printf(<span class="hljs-string">&quot;hex value: % X\nUnicode value: &quot;</span>, text)<br>    <span class="hljs-keyword">for</span> _, char := <span class="hljs-keyword">range</span> text &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;%U &quot;</span>, char)<br>    &#125;<br>    fmt.Println()<br>    bytes := []<span class="hljs-type">byte</span>(text)<br>    fmt.Printf(<span class="hljs-string">&quot;value of bytes: %s\n&quot;</span>, bytes)<br>    fmt.Printf(<span class="hljs-string">&quot;hex value of bytes: % X\n&quot;</span>, bytes)<br>    fmt.Printf(<span class="hljs-string">&quot;origin value of bytes: %v\n&quot;</span>, bytes)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行代码，输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run fmt_t.go<br>bool output:<br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br><br>number output, origin value: 64<br>|1000000| 1000000|1000000 |01000000| 1000000|<br>|40|      40|40      |00000040|      40|<br><br>text output, origin value: \u5B9E\u9A8C\u697C<br>content: 实验楼<br>hex value: E5 AE 9E E9 AA 8C E6 A5 BC<br>Unicode value: U+5B9E U+9A8C U+697C<br>value of bytes: 实验楼<br>hex value of bytes: E5 AE 9E E9 AA 8C E6 A5 BC<br>origin value of bytes: [229 174 158 233 170 140 230 165 188]<br></code></pre></td></tr></table></figure><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><p>在 Go 语言中支持两个字符类型，</p><ul><li><code>UTF-8</code>：一个是 <code>Byte</code>（实际上是 Unit8 的别名），代表 UTF-8 字符串的单个字节的值；</li><li><code>Unicode</code>:另一个是 <code>rune</code>，代表单个 Unicode 字符。</li></ul><p>处于简化语言的考虑，<strong>Go 语言的多数 API 都假设字符串为 UTF-8 编码</strong>。尽管 Unicode 字符在标准库中有支持，但实际很少使用。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Go 语言的数组是一个定长的序列，其中的元素类型相同。多维数组可以简单地使用自身为数组的元素来创建。数组的元素使用操作符号 <code>[ ]</code> 来索引，索引从 <code>0</code> 开始，到 <code>len(array)-1</code> 结束。数组使用以下语法创建：</p><ul><li><code>[length]Type</code></li><li><code>[N]Type&#123;value1, value2, ..., valueN&#125;</code></li><li><code>[...]Type&#123;value1, value2, ..., valueN&#125;</code></li></ul><p>如果使用了 <code>...</code>（省略符）操作符，Go 语言会为我们自动计算数组的长度。在任何情况下，一个数组的长度都是固定的并且不可修改。数组的长度可以使用 <code>len()</code> 函数获得。由于数组的长度是固定的，因此数组的长度和容量都是一样的，因此对于数组而言 <code>cap()</code> 和 <code>len()</code> 函数返回值都是一样的。数组也可以使用和切片一样的语法进行切片，只是其结果为一个切片，而非数组。同样的，数组也可以使用 <code>range</code> 进行索引访问。</p><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>一般而言，Go 语言的切片比数组更加灵活，强大而且方便。数组是按值传递的（即是传递的副本），而切片是引用类型，传递切片的成本非常小，而且是不定长的。而且数组是定长的，而切片可以调整长度。创建切片的语法如下：</p><ul><li><code>make([ ]Type, length, capacity)</code></li><li><code>make([ ]Type, length)</code></li><li><code>[ ]Type&#123;&#125;</code></li><li><code>[ ]Type&#123;value1, value2, ..., valueN&#125;</code></li></ul><p>内置函数 <code>make()</code> 用于创建切片、映射和通道。当用于创建一个切片时，它会创建一个隐藏的初始化为零值的数组，然后返回一个引用该隐藏数组的切片。该隐藏的数组与 Go 语言中的所有数组一样，都是固定长度，如果使用第一种语法创建，那么其长度为切片的容量 <code>capacity</code>；如果是第二种语法，那么其长度记为切片的长度 <code>length</code>。一个切片的容量即为隐藏数组的长度，而其长度则为不超过该容量的任意值。另外可以通过内置的函数 <code>append()</code> 来增加切片的容量。切片可以支持以下操作：</p><p>我们练习下，创建源文件 <code>slice_array.go</code>，输入以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    a := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;<br>    fmt.Printf(<span class="hljs-string">&quot;len and cap of array %v is: %d and %d\n&quot;</span>, a, <span class="hljs-built_in">len</span>(a), <span class="hljs-built_in">cap</span>(a))<br>    fmt.Printf(<span class="hljs-string">&quot;item in array: %v is:&quot;</span>, a)<br>    <span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> a &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;% d&quot;</span>, value)<br>    &#125;<br><br>    fmt.Println()<br><br>    s1 := a[<span class="hljs-number">3</span>:<span class="hljs-number">6</span>]<br>    fmt.Printf(<span class="hljs-string">&quot;len and cap of slice: %v is: %d and %d\n&quot;</span>, s1, <span class="hljs-built_in">len</span>(s1), <span class="hljs-built_in">cap</span>(s1))<br>    fmt.Printf(<span class="hljs-string">&quot;item in slice: %v is:&quot;</span>, s1)<br>    <span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> s1 &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;%d&quot;</span>, value)<br>    &#125;<br><br>    fmt.Println()<br><br>    s1[<span class="hljs-number">0</span>] = <span class="hljs-number">456</span><br>    fmt.Printf(<span class="hljs-string">&quot;item in array changed after changing slice: %v is:&quot;</span>, s1)<br>    <span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> a &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;%d&quot;</span>, value)<br>    &#125;<br><br>    fmt.Println()<br><br>    s2 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br>    s2[<span class="hljs-number">4</span>] = <span class="hljs-number">5</span><br>    fmt.Printf(<span class="hljs-string">&quot;len and cap of slice: %v is: %d and %d\n&quot;</span>, s2, <span class="hljs-built_in">len</span>(s2), <span class="hljs-built_in">cap</span>(s2))<br>    fmt.Printf(<span class="hljs-string">&quot;item in slice %v is:&quot;</span>, s2)<br>    <span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> s2 &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;%d&quot;</span>, value)<br>    &#125;<br><br>    fmt.Println()<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中，我们首先创建了一个数组，数组的长度是由 Go 语言自动计算出的（省略号语法），然后通过切片操作从数组 <code>a</code> 中创建了切片 <code>s1</code>，接着我们修改了该切片的第一个位置的数值，然后发现数组 <code>a</code> 中的值也发生了变化。最后我们通过 <code>make()</code> 函数创建了一个切片，该切片的长度和容量分别为 10 和 20，还可以发现 Go 语言将未初始化的项自动赋予零值。运行代码输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  go run slice_array.go<br>len and <span class="hljs-built_in">cap</span> of array [1 2 3 4 5 6 7] is: 7 and 7<br>item <span class="hljs-keyword">in</span> array: [1 2 3 4 5 6 7] is: 1 2 3 4 5 6 7<br>len and <span class="hljs-built_in">cap</span> of slice: [4 5 6] is: 3 and 4<br>item <span class="hljs-keyword">in</span> slice: [4 5 6] is: 4 5 6<br>item <span class="hljs-keyword">in</span> array changed after changing slice: [456 5 6] is: 1 2 3 456 5 6 7<br>len and <span class="hljs-built_in">cap</span> of slice: [0 0 0 0 5 0 0 0 0 0] is: 10 and 20<br>item <span class="hljs-keyword">in</span> slice [0 0 0 0 5 0 0 0 0 0] is: 0 0 0 0 5 0 0 0 0 0<br></code></pre></td></tr></table></figure><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><blockquote><p><strong>包</strong>是各种类型和函数的集合。在包中，如果标示符（类型名称，函数名称，方法名称）的首字母是大写，那这些标示符是可以被导出的，也就是说可以在包以外直接使用。</p></blockquote><p><code>$GOPATH</code> ：环境变量（指向一个或多个目录），以及其子目录 <code>src</code> 目录的，当我们使用 <code>import</code> 关键字导入包的时候，Go 语言会在 <code>$GOPATH</code> 和 <code>GOROOT</code> 目录中搜索包。</p><hr><h1 id="三、Go语言顺序编程"><a href="#三、Go语言顺序编程" class="headerlink" title="三、Go语言顺序编程"></a>三、Go语言顺序编程</h1><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><blockquote><p>Go 语言提供的流程控制语句包括 <code>if</code>、<code>switch</code>、<code>for</code>、<code>goto</code>、<code>select</code>，其中 <code>select</code> 用于监听 <code>channel</code>（通道）在讲解通道的时候再详细介绍。</p></blockquote><h4 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h4><p>语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> optionalStatement1; booleanExpression1 &#123;<br>    block1<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> optionalStatement2; booleanExpression2 &#123;<br>    block2<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    block3<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>optionalStatement</code> 是可选的表达式，真正决定分支走向的是 <code>booleanExpression1</code> 的值。</p><h4 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h4><p>Go 语言的 <code>for</code> 语句可以遍历数组，切片，映射等类型，也可以用于无限循环。以下是其语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> &#123; <span class="hljs-comment">// 无限循环</span><br>    block<br>&#125;<br><br><span class="hljs-keyword">for</span> booleanExpression &#123; <span class="hljs-comment">// while循环，在Go语言中没有while关键字</span><br><br>&#125;<br><br><span class="hljs-keyword">for</span> index, char := <span class="hljs-keyword">range</span> aString &#123; <span class="hljs-comment">// 迭代字符串</span><br><br>&#125;<br><br><span class="hljs-keyword">for</span> item := <span class="hljs-keyword">range</span> aChannel &#123; <span class="hljs-comment">// 迭代通道</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="跳转语句goto"><a href="#跳转语句goto" class="headerlink" title="跳转语句goto"></a>跳转语句<code>goto</code></h4><p>Go 语言中使用 <code>goto</code> 关键字实现跳转。<code>goto</code> 语句的语义非常简单，就是跳转到本函数内的某个标签，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myfunc</span><span class="hljs-params">()</span></span>&#123;<br>    i := <span class="hljs-number">0</span><br>    THIS: <span class="hljs-comment">//定义一个THIS标签</span><br>    fmt.Println(i)<br>    i++<br>    <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">goto</span> THIS <span class="hljs-comment">//跳转到THIS标签</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="switch分支"><a href="#switch分支" class="headerlink" title="switch分支"></a>switch分支</h4><p>Go 语言中 <code>switch</code> 分支既可用于常用的分支就像 C 语言中的 <code>switch</code> 一样，也可以用于类型开关，所谓类型开关就是用于判断变量属于什么类型。但是需要注意的是 Go 语言的 <code>switch</code> 语句不会自动贯穿，相反，如果想要贯穿需要添加 <code>fallthrough</code> 语句。表达式开关 <code>switch</code> 的语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> optionalStatement; optionalExpression &#123;<br>    <span class="hljs-keyword">case</span> expression1: block1<br>    ...<br>    <span class="hljs-keyword">case</span> expressionN: blockN<br>    <span class="hljs-keyword">default</span>: blockD<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> &#123;        <span class="hljs-comment">// 没有表达式，默认为True值，匹配分支中值为True的分支</span><br>    <span class="hljs-keyword">case</span> value &lt; minimum:<br>        <span class="hljs-keyword">return</span> minimum<br>    <span class="hljs-keyword">case</span> value &gt; maximum:<br>        <span class="hljs-keyword">return</span> maximum<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">return</span> value<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，switch 后面没有默认的表达式，这个时候 Go 语言默认其值为 <code>True</code>。</p><p>在前面我们提到过类型断言，如果我们知道变量的类型就可以使用类型断言，但是当我们知道类型可能是许多类型中的一种时候，我们就可以使用类型开关。其语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> optionalStatement; typeSwitchGuard &#123;<br>    <span class="hljs-keyword">case</span> type1: block1<br>    ...<br>    <span class="hljs-keyword">case</span> typeN: blockN<br>    <span class="hljs-keyword">default</span>: blockD<br>&#125;<br></code></pre></td></tr></table></figure><p>说了这么多，让我们进行下练习，创建源文件 <code>switch_t.go</code>，输入以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">classchecker</span><span class="hljs-params">(items ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123; <span class="hljs-comment">// 创建一个函数，该函数可以接受任意多的任意类型的参数</span><br>    <span class="hljs-keyword">for</span> i, x := <span class="hljs-keyword">range</span> items &#123;<br>        <span class="hljs-keyword">switch</span> x := x.(<span class="hljs-keyword">type</span>) &#123; <span class="hljs-comment">// 创建了影子变量</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-type">bool</span>:<br>            fmt.Printf(<span class="hljs-string">&quot;param #%d is a bool, value: %t\n&quot;</span>, i, x)<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">float64</span>:<br>            fmt.Printf(<span class="hljs-string">&quot;param #%d is a float64, value: %f\n&quot;</span>, i, x)<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">int</span>, <span class="hljs-type">int8</span>, <span class="hljs-type">int16</span>, <span class="hljs-type">int32</span>, <span class="hljs-type">int64</span>:<br>            fmt.Printf(<span class="hljs-string">&quot;param #%d is a int, value: %d\n&quot;</span>, i, x)<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">uint</span>, <span class="hljs-type">uint8</span>, <span class="hljs-type">uint16</span>, <span class="hljs-type">uint32</span>, <span class="hljs-type">uint64</span>:<br>            fmt.Printf(<span class="hljs-string">&quot;param #%d is a uint, value: %d\n&quot;</span>, i, x)<br>        <span class="hljs-keyword">case</span> <span class="hljs-literal">nil</span>:<br>            fmt.Printf(<span class="hljs-string">&quot;param #%d is a nil\n&quot;</span>, i)<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">string</span>:<br>            fmt.Printf(<span class="hljs-string">&quot;param #%d is a string, value: %s\n&quot;</span>, i, x)<br>        <span class="hljs-keyword">default</span>:<br>            fmt.Printf(<span class="hljs-string">&quot;param #%d&#x27;s type is unknow\n&quot;</span>, i)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    classchecker(<span class="hljs-number">5</span>, <span class="hljs-number">-17.98</span>, <span class="hljs-string">&quot;AIDEN&quot;</span>, <span class="hljs-literal">nil</span>, <span class="hljs-literal">true</span>, <span class="hljs-built_in">complex</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中我们首先创建了一个接收任意数量任意类型参数的函数，然后使用 <code>for ... range aSlice</code> 的语法迭代了每一个在切片 <code>items</code> 中的元素，接着使用了 <code>switch</code> 类型开关判断了每一个参数的类型，并打印了其值和类型。程序运行输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> run switch_t.<span class="hljs-keyword">go</span><br>param #<span class="hljs-number">0</span> is a <span class="hljs-type">int</span>, value: <span class="hljs-number">5</span><br>param #<span class="hljs-number">1</span> is a <span class="hljs-type">float64</span>, value: <span class="hljs-number">-17.980000</span><br>param #<span class="hljs-number">2</span> is a <span class="hljs-type">string</span>, value: AIDEN<br>param #<span class="hljs-number">3</span> is a <span class="hljs-literal">nil</span><br>param #<span class="hljs-number">4</span> is a <span class="hljs-type">bool</span>, value: <span class="hljs-literal">true</span><br>param #<span class="hljs-number">5</span><span class="hljs-string">&#x27;s type is unknow</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Go 语言可以很方便的自定义函数，其中有特殊的函数 <code>main</code> 函数。<code>main</code> 函数必须出现在 <code>main</code> 包里，且只能出现一次。当 Go 程序运行时候会自动调用 <code>main</code> 函数开始整个程序的执行。<code>main</code> 函数不可接收任何参数，也不返回任何结果。</p><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><p>在 Go 语言中，函数的基本组成包括：关键字 <code>func</code>、函数名、参数列表、返回值、函数体和返回语句，这里我们用一个简单的加法函数来对函数的定义进行说明。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> add<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Add</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (num <span class="hljs-type">int</span>)&#123;<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h4><p>函数调用非常简单，先将被调用函数所在的包导入，就可以直接使用该函数了。注意需要把包文件夹放到 <code>$GOPATH</code> 目录中，实例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;add&quot;</span> <span class="hljs-comment">//导入 add 包</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    c := add.Add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">//调用 add 包中的 add 函数</span><br>    fmt.Println(c)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数的多返回值"><a href="#函数的多返回值" class="headerlink" title="函数的多返回值"></a>函数的多返回值</h4><p>与 C&#x2F;C++ 和 JAVA 不同，Go 语言的函数和方法可以有多个返回值，这是 Go 提供的一个优美的特性，示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> Divide<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;errors&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">divide</span> <span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (num <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)&#123; <span class="hljs-comment">//定义两个返回值</span><br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span> &#123;<br>        err = errors.New(<span class="hljs-string">&quot;被除数不能为零！&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> a / b, <span class="hljs-literal">nil</span>   <span class="hljs-comment">//支持多个返回值</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="匿名函数-1"><a href="#匿名函数-1" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>在 Go 语言中，你可以在代码里随时定义匿名函数，匿名函数由一个不带函数名的函数声明和函数体组成，示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a, b, c <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">return</span> a * b &lt; c<br>&#125;<br></code></pre></td></tr></table></figure><p>你可以将匿名函数直接赋值给一个变量，也可以直接调用运行，示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">x := <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a, b, c <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">return</span> a * b &lt; c<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a, b, c <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">return</span> a * b &lt; c<br>&#125; (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">//小括号内直接给参数列表表示函数调用</span><br></code></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h4 id="类型转换-1"><a href="#类型转换-1" class="headerlink" title="类型转换"></a>类型转换</h4><p>Go 语言提供了一种在不同但相互兼容的类型之间相互转换的方式，这种转换非常有用并且是安全的。但是需要注意的是在数值之间进行转换可能造成其他问题，如精度丢失或者错误的结果。以下是类型转换的语法：</p><ul><li><code>resultOfType := Type(expression)</code></li></ul><p>几个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">x := <span class="hljs-type">int16</span>(<span class="hljs-number">2345</span>)        <span class="hljs-comment">// 声明一个类型为int16的整数，其值为2345</span><br>y := <span class="hljs-type">int32</span>(x)           <span class="hljs-comment">// 将int16类型的整数转换为int32类型</span><br>a := <span class="hljs-type">uint16</span>(<span class="hljs-number">65000</span>)       <span class="hljs-comment">// 声明一个类型为uint16类型的整数</span><br>b := <span class="hljs-type">int16</span>(a)           <span class="hljs-comment">// 转换为int16类型，虽然能转换成功，但是由于65000超过in16类型的范围，会导致结果错误，b的值为 -536</span><br></code></pre></td></tr></table></figure><p>另外在 Go 语言中可以通过 <code>type</code> 关键字声明类型，如 <code>type StringsSlice []string</code> 将 <code>[]string</code>（<code>string</code> 类型的切片）声明为 <code>StringSlice</code> 类型。</p><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>说到类型断言就需要先了解下 Go 语言中的接口。在 Go 语言中接口是一个自定义类型。它声明了一个或者多个方法。任何实现了这些方法的对象（类型）都满足这个接口。</p><p>接口是完全抽象的，不能实例化。<code>interface&#123;&#125;</code> 类型表示一个空接口，任何类型都满足空接口。也就是说 <code>interface&#123;&#125;</code> 类型的值可以用于表示任意 Go 语言类型的值。</p><p>这里的空接口有点类似于 Python 语言中的 object 实例。既然 <code>interface&#123;&#125;</code> 可以用于表示任意类型，那有的时候我们需要将 <code>interface&#123;&#125;</code> 类型转换为我们需要的类型，这个操作称为类型断言。</p><p><strong>一般情况下只有我们希望表达式是某种特定类型的值时才使用类型断言</strong>。Go 语言中可以使用以下语法：</p><ul><li><code>resultOfType, boolean := expression.(Type)</code>：安全的类型断言。</li><li><code>resultOfType := expression.(Type)</code>：非安全的类型断言，失败时程序会产生异常。</li></ul><p>创建源文件 <code>type_t.go</code>，输入以下源文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    x := <span class="hljs-type">uint16</span>(<span class="hljs-number">65000</span>)<br>    y := <span class="hljs-type">int16</span>(x) <span class="hljs-comment">// 将 x转换为int16类型</span><br>    fmt.Printf(<span class="hljs-string">&quot;type and value of x is: %T and %d\n&quot;</span>, x, x) <span class="hljs-comment">// %T 格式化指令的作用是输出变量的类型</span><br>    fmt.Printf(<span class="hljs-string">&quot;type and value of y is: %T and %d\n&quot;</span>, y, y)<br><br>    <span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-number">99</span> <span class="hljs-comment">// 创建一个interface&#123;&#125;类型，其值为99</span><br>    <span class="hljs-keyword">var</span> s <span class="hljs-keyword">interface</span>&#123;&#125; = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;left&quot;</span>, <span class="hljs-string">&quot;right&quot;</span>&#125;<br>    j := i.(<span class="hljs-type">int</span>) <span class="hljs-comment">// 我们假设i是兼容int类型，并使用类型断言将其转换为int类型</span><br>    fmt.Printf(<span class="hljs-string">&quot;type and value of j is: %T and %d\n&quot;</span>, j, j)<br><br>    <span class="hljs-keyword">if</span> s, ok := s.([]<span class="hljs-type">string</span>); ok &#123; <span class="hljs-comment">// 创建了影子变量，if的作用域中覆盖了外部的变量s</span><br>        fmt.Printf(<span class="hljs-string">&quot;%T -&gt; %q\n&quot;</span>, s, s)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run type_t.go<br><span class="hljs-built_in">type</span> and value of x is: uint16 and 65000<br><span class="hljs-built_in">type</span> and value of y is: int16 and -536<br><span class="hljs-built_in">type</span> and value of j is: int and 99<br>[]string -&gt; [<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-string">&quot;right&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="错误处理-1"><a href="#错误处理-1" class="headerlink" title="错误处理*"></a>错误处理<code>*</code></h2><blockquote><p>错误处理是任何语言都需要考虑到的问题，而 Go 语言在错误处理上解决得更为完善，优雅的错误处理机制是 Go 语言的一大特点。</p></blockquote><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>Go 语言引入了一个错误处理的标准模式，即 <code>error</code> 接口，该接口定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> <span class="hljs-type">error</span> <span class="hljs-keyword">interface</span> &#123;<br>    Error() <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对于大多数函数，如果要返回错误，可以将 <code>error</code> 作为多返回值的最后一个：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">(param <span class="hljs-type">int</span>)</span></span>(ret <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br>&#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>调用时的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">n, err := foo(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-comment">//  错误处理</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 使用返回值n</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们还可以自定义错误类型，创建源文件 <code>error.go</code>，输入以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;errors&quot;</span><br><br><span class="hljs-comment">//自定义的出错结构</span><br><span class="hljs-keyword">type</span> myError <span class="hljs-keyword">struct</span> &#123;<br>    arg  <span class="hljs-type">int</span><br>    errMsg <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-comment">//实现Error接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *myError)</span></span> Error() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%d - %s&quot;</span>, e.arg, e.errMsg)<br>&#125;<br><br><span class="hljs-comment">//两种出错</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">error_test</span><span class="hljs-params">(arg <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">if</span> arg &lt; <span class="hljs-number">0</span>  &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>, errors.New(<span class="hljs-string">&quot;Bad Arguments - negtive!&quot;</span>)<br>     &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> arg &gt;<span class="hljs-number">256</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>, &amp;myError&#123;arg, <span class="hljs-string">&quot;Bad Arguments - too large!&quot;</span>&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arg*arg, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">//相关的测试</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> []<span class="hljs-type">int</span>&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1000</span>&#125; &#123;<br>        <span class="hljs-keyword">if</span> r, e := error_test(i); e != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;failed:&quot;</span>, e)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;success:&quot;</span>, r)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><blockquote><p>你可以在 Go 函数中添加多个 <code>defer</code> 语句，当函数执行到最后时，这些 defer 语句会按照逆序执行（即最后一个 <code>defer</code> 语句将最先执行），最后该函数返回。特别是当你在进行一些打开资源的操作时，遇到错误需要提前返回，在返回前你需要关闭相应的资源，不然很容易造成资源泄露等问题。</p></blockquote><p>如下代码所示，我们一般写打开一个资源是这样操作的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CopyFile</span><span class="hljs-params">(dst, src <span class="hljs-type">string</span>)</span></span> (w <span class="hljs-type">int64</span>, err <span class="hljs-type">error</span>) &#123;<br>    srcFile, err := os.Open(src)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-keyword">defer</span> srcFile.Close()<br><br>    dstFile, err := os.Create(dst)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-keyword">defer</span> dstFile.Close()<br><br>    <span class="hljs-keyword">return</span> io.Copy(dstFile, srcFile)<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 <code>defer</code> 后面一条语句干不完清理工作，也可以使用一个匿名函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>&#125;()<br></code></pre></td></tr></table></figure><p>注意，<code>defer</code> 语句是在 <code>return</code> 之后执行的，新建源文件 <code>defer.go</code> 输入以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> (result <span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        result = <span class="hljs-number">12</span><br>    &#125;()<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(test())     <span class="hljs-comment">// 12</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="panic-和-recover"><a href="#panic-和-recover" class="headerlink" title="panic 和 recover"></a><code>panic</code> 和 <code>recover</code></h3><p><code>panic()</code> 函数用于抛出异常，<code>recover()</code> 函数用于捕获异常，这两个函数的原型如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">panic</span><span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">recover</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">interface</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>当在一个函数中调用 <code>panic()</code> 时，正常的函数执行流程将立即终止，但函数中之前使用 <code>defer</code> 关键字延迟执行的语句将正常展开执行，之后该函数将返回到调用函数，并导致逐层向上执行 <code>panic()</code> 流程，直至所属的 <code>goroutine</code> 中所有正在执行的函数被终止。错误信息将被报告，包括在调用 <code>panic()</code> 函数时传入的参数，这个过程称为错误流程处理。</p><p><code>panic()</code> 接受一个 <code>interface&#123;&#125;</code> 参数，可支持任意类型，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">panic</span>(<span class="hljs-number">404</span>)<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;network broken&quot;</span>)<br><span class="hljs-built_in">panic</span>(Error(<span class="hljs-string">&quot;file not exists&quot;</span>))<br></code></pre></td></tr></table></figure><p>在 <code>defer</code> 语句中，可以使用 <code>recover()</code> 终止错误处理流程，这样可以避免异常向上传递，但要注意 <code>recover()</code> 之后，程序不会再回到 <code>panic()</code> 那里，函数仍在 <code>defer</code> 之后返回。新建一个源文件 <code>error1.go</code>，输入以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-built_in">panic</span>(errors.New(<span class="hljs-string">&quot;i&#x27;m a bug&quot;</span>))<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> (result <span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">if</span> r := <span class="hljs-built_in">recover</span>(); r != <span class="hljs-literal">nil</span> &#123;<br>            err := r.(<span class="hljs-type">error</span>)<br>            fmt.Println(<span class="hljs-string">&quot;Cache Exception:&quot;</span>, err)<br>        &#125;<br>    &#125;()<br>    foo()<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(test())     <span class="hljs-comment">// 0</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="四、面向对象编程"><a href="#四、面向对象编程" class="headerlink" title="四、面向对象编程"></a>四、面向对象编程</h1><blockquote><p>Go 语言的代码是以包结构来组织的，且如果标示符（变量名，函数名，自定义类型等）**<code>*</code>如果以大写字母开头那么这些标示符是可以导出的**，可以在任何导入了定义该标示符的包的包中直接使用。Go 语言中的面向对象和 C++，Java 中的面向对象不同，因为 Go 语言不支持继承，Go 语言只支持组合。</p></blockquote><h2 id="自定义类型及结构体"><a href="#自定义类型及结构体" class="headerlink" title="自定义类型及结构体"></a>自定义类型及结构体</h2><blockquote><p>Go 语言的中结构体 <code>struct</code> 与 C++、JAVA 中的类 <code>class</code> 相似，但 Go 放弃了传统面向对象的诸多特性，只保留了组合。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> typeName typeSpecification<br></code></pre></td></tr></table></figure><p>其中，<code>typeName</code> 可以是一个包或者函数内唯一合法的 Go 标示符。<code>typeSpecification</code> 可以是任何内置的类型，一个接口或者是一个结构体。所谓结构体，它的字段是由其他类型或者接口组成。例如我们通过结构体定义了一下类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ColorPoint <span class="hljs-keyword">struct</span> &#123;<br>    color.Color     <span class="hljs-comment">// 匿名字段(嵌入)</span><br>    x, y <span class="hljs-type">int</span>        <span class="hljs-comment">// 具名字段(聚合)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码我们通过结构体自定义了类型 <code>ColorPoint</code>，结构体中 <code>color.Color</code> 字段是 Color 包的类型 color，这个字段没有名字，所以被称为匿名的，也是嵌入字段。字段 <code>x</code> 和 <code>y</code> 是有变量名的，所以被称为具名字段。假如我们创建了类型 <code>ColorPoint</code> 的一个值 <code>point</code>（通过语法：<code>point := ColorPoint&#123;&#125;</code> 创建），那么这些字段可以通过 <code>point.Color</code>、<code>point.x</code>、<code>point.y</code> 访问。其他面向对象语言中的”类 (<code>class</code>)”、”对象 (<code>object</code>)”、”实例 (<code>instance</code>)”在 Go 语言中我们完全避开使用。相反的我们使用”类型 (<code>type</code>)”和其对应的”值”，其中自定义类型的值可以包含方法。</p><p>定义了结构体后如何创建并初始化一个对象实例呢？Go 语言支持以下几种方法进行实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//先定义一个结构体Man</span><br><span class="hljs-keyword">type</span> Man <span class="hljs-keyword">struct</span>&#123;<br>    name <span class="hljs-type">string</span><br>    age <span class="hljs-type">int</span><br>&#125;<br><span class="hljs-comment">//对象创建与初始化</span><br>man := <span class="hljs-built_in">new</span>(Man)<br>man := &amp;Man&#123;&#125;<br>man := &amp;Man&#123;<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">18</span>&#125;<br>man := &amp;Man&#123;name: <span class="hljs-string">&quot;Tom&quot;</span>, age: <span class="hljs-number">18</span>&#125;<br></code></pre></td></tr></table></figure><p>为了更加方便的创建对象，我们一般会使用一个全局函数来完成对象的创建，这和传统的“构造函数”类似。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMan</span><span class="hljs-params">(name <span class="hljs-type">string</span>, age <span class="hljs-type">int</span>)</span></span> *Man &#123;<br>    <span class="hljs-keyword">return</span> &amp;Man&#123;name, age&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p><strong>方法</strong>是作用在自定义类型上的一类特殊函数，通常自定义类型的值会被传递给该函数，该值可能是以指针或者复制值的形式传递。定义方法和定义函数几乎相同，只是需要在 <code>func</code> 关键字和方法名之间必须写上接接受者。例如我们给类型 <code>Count</code> 定义了以下方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Count <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(count *Count)</span></span> Increment() &#123; *count++ &#125;  <span class="hljs-comment">// 接受者是一个 `Count` 类型的指针</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(count *Count)</span></span> Decrement() &#123; *count-- &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(count Count)</span></span> IsZero() <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> count == <span class="hljs-number">0</span> &#125;<br></code></pre></td></tr></table></figure><p>以上代码中，我们在内置类型 <code>int</code> 的基础上定义了自定义类型 <code>Count</code>，然后给该类型添加了 <code>Increment()</code>、<code>Decrement()</code> 和 <code>IsZero()</code> 方法，其中前两者的接受者为 <code>Count</code> 类型的指针，后一个方法接收 <code>Count</code> 类型的值。</p></blockquote><p>Demo:</p><p>类型的方法集是指可以被该类型的值调用的所有方法的集合。</p><p>一个指向自定义类型的值的指针，它的方法集由该类型定义的所有方法组成，无论这些方法接受的是一个值还是一个指针。如果在指针上调用一个接受值的方法，Go 语言会聪明地将该指针解引用。</p><p>一个自定义类型值的方法集合则由该类型定义的接收者为值类型的方法组成，但是不包括那些接收者类型为指针的方法。</p><p>其实这些限制 Go 语言帮我们解决的非常好，结果就是我们可以在值类型上调用接收者为指针的方法。假如我们只有一个值，仍然可以调用一个接收者为指针类型的方法，这是因为 Go 语言会自动获取值的地址传递给该方法，前提是该值是可寻址的。</p><p>在以上定义的类型 <code>Count</code> 中，<code>*Count</code> 方法集是 <code>Increment()</code>, <code>Decrement()</code> 和 <code>IsZero()</code>，<code>Count</code> 的值的方法集是 <code>IsZero()</code>。但是因为 <code>Count</code> 类型的是可寻址的，所以我们可以使用 <code>Count</code> 的值调用全部的方法。</p><p>另外如果结构体的字段也有方法，我们也可以直接通过结构体访问字段中的方法。下面让我们练习下，创建源文件 <code>struct_t.go</code>，输入以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Count <span class="hljs-type">int</span> <span class="hljs-comment">// 创建自定义类型 Count</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(count *Count)</span></span> Increment()  &#123; *count++ &#125; <span class="hljs-comment">// Count类型的方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(count *Count)</span></span> Decrement()  &#123; *count-- &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(count Count)</span></span> IsZero() <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> count == <span class="hljs-number">0</span> &#125;<br><br><span class="hljs-keyword">type</span> Part <span class="hljs-keyword">struct</span> &#123; <span class="hljs-comment">// 基于结构体创建自定义类型 Part</span><br>    stat  <span class="hljs-type">string</span><br>    Count <span class="hljs-comment">// 匿名字段</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(part Part)</span></span> IsZero() <span class="hljs-type">bool</span> &#123; <span class="hljs-comment">// 覆盖了匿名字段Count的IsZero()方法</span><br>    <span class="hljs-keyword">return</span> part.Count.IsZero() &amp;&amp; part.stat == <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 调用了匿名字段的方法</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(part Part)</span></span> String() <span class="hljs-type">string</span> &#123; <span class="hljs-comment">// 定义String()方法，自定义了格式化指令%v的输出</span><br>    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;&lt;&lt;%s, %d&gt;&gt;&quot;</span>, part.stat, part.Count)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> i Count = <span class="hljs-number">-1</span><br>    fmt.Printf(<span class="hljs-string">&quot;Start \&quot;Count\&quot; test:\nOrigin value of count: %d\n&quot;</span>, i)<br>    i.Increment()<br>    fmt.Printf(<span class="hljs-string">&quot;Value of count after increment: %d\n&quot;</span>, i)<br>    fmt.Printf(<span class="hljs-string">&quot;Count is zero t/f? : %t\n\n&quot;</span>, i.IsZero())<br>    fmt.Println(<span class="hljs-string">&quot;Start: \&quot;Part\&quot; test:&quot;</span>)<br>    part := Part&#123;<span class="hljs-string">&quot;232&quot;</span>, <span class="hljs-number">0</span>&#125;<br>    fmt.Printf(<span class="hljs-string">&quot;Part: %v\n&quot;</span>, part)<br>    fmt.Printf(<span class="hljs-string">&quot;Part is zero t/f? : %t\n&quot;</span>, part.IsZero())<br>    fmt.Printf(<span class="hljs-string">&quot;Count in Part is zero t/f?: %t\n&quot;</span>, part.Count.IsZero()) <span class="hljs-comment">// 尽管覆盖了匿名字段的方法，单还是可以访问</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中，我们创建了 <code>Count</code> 类型，然后在其基础上又创建了结构体类型 <code>Part</code>。我们为 <code>Count</code> 类型定义了 3 个方法，并在 <code>Part</code> 类型中创建了方法 <code>IsZero()</code> 覆盖了其匿名字段 <code>Count</code> 中 <code>IsZero()</code> 方法。但是我们还是可以二次访问到匿名字段中被覆盖的方法。执行代码，输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run struct_t.go<br>Start <span class="hljs-string">&quot;Count&quot;</span> <span class="hljs-built_in">test</span>:<br><br><br>Origin value of count: -1<br>Value of count after increment: 0<br>Count is zero t/f? : <span class="hljs-literal">true</span><br><br>Start: <span class="hljs-string">&quot;Part&quot;</span> <span class="hljs-built_in">test</span>:<br>Part: &lt;&lt;<span class="hljs-string">232, 0&gt;&gt;</span><br><span class="hljs-string">Part is zero t/f? : false</span><br><span class="hljs-string">Count in Part is zero t/f?: true</span><br></code></pre></td></tr></table></figure><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><blockquote><p>Go 语言虽然抛弃了继承，但是却提供了一个更加方便的组合特性。相对于继承的编译期确定实现，组合的运行态指定实现，更加灵活。下面通过一段代码来了解组合的基本属性以及它与继承的不同之处。</p></blockquote><p>先定义一个结构体 Base, 并为它添加两个方法 <code>Foo()</code> 和 <code>Bar()</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Base <span class="hljs-keyword">struct</span>&#123;<br>    Name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b *Base)</span></span> Foo() &#123;...&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(b *Base)</span></span> Bar() &#123;...&#125;<br><br><span class="hljs-keyword">type</span> Seed <span class="hljs-keyword">struct</span> &#123;<br>    Base<br>    ...<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *Seed)</span></span> Foo() &#123;<br>    s.Base.Foo()<br>    s.Bar()<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码先定义了一个 Base 类，然后定义了一个 Seed 类。Seed 类“继承”了 Base 类的所有成员属性和方法并重写了 <code>Foo()</code> 方法。同时在重写 <code>Foo()</code> 方法时调用了 Base 类的 <code>Foo()</code> 方法和 <code>Bar()</code> 方法。需要注意的是，若此时 Seed 的对象通过 <code>s.Foo()</code> 调用 <code>Foo()</code> 方法时，实际调用的是 Seed 重写过后的 <code>Foo()</code> 方法，而不是基类 Base 的 <code>Foo()</code> 方法，若想调用 Base 类的 <code>Foo()</code> 方法则要使用 <code>s.Base.Foo</code>，而调用没有重写的 <code>Bar()</code> 方法时，<span style="background: PaleVioletRed;border-radius:10px;padding:1px 5px;color:white;font-weight:900">使用 <code>s.Bar()</code> 和<code>s.Base.Bar()</code> 效果是一样的</span>。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>在 Go 中，<strong>接口</strong>是一组方法签名。当一个类型为接口中的所有方法提供定义时，它被称为实现该接口。它与 oop 非常相似。接口指定类型应具有的方法，类型决定如何实现这些方法。</p><h3 id="接口基础"><a href="#接口基础" class="headerlink" title="接口基础"></a>接口基础</h3><p>之所以说 Go 语言的面向对象很灵活，很大一部分原因是由于接口的存在。接口是一个自定义类型，它声明了一个或者多个方法签名，任何实现了这些方法的类型都实现这个接口。<code>infterface&#123;&#125;</code> 类型是声明了空方法集的接口类型。任何一个值都满足 <code>interface&#123;&#125;</code> 类型，也就是说如果一个函数或者方法接收 <code>interface&#123;&#125;</code> 类型的参数，那么任意类型的参数都可以传递给该函数。接口是完全抽象的，不能实例化。接口能存储任何实现了该接口的类型。直接看例子吧，创建源文件 <code>interface_t.go</code>，输入以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Human <span class="hljs-keyword">struct</span> &#123; <span class="hljs-comment">// 结构体</span><br>    name  <span class="hljs-type">string</span><br>    age   <span class="hljs-type">int</span><br>    phone <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">//Human实现SayHi方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h Human)</span></span> SayHi() &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;Hi, I am %s you can call me on %s\n&quot;</span>, h.name, h.phone)<br>&#125;<br><br><span class="hljs-comment">//Human实现Sing方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h Human)</span></span> Sing(lyrics <span class="hljs-type">string</span>) &#123;<br>    fmt.Println(<span class="hljs-string">&quot;La la la la...&quot;</span>, lyrics)<br>&#125;<br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>    Human  <span class="hljs-comment">//匿名字段</span><br>    school <span class="hljs-type">string</span><br>    loan   <span class="hljs-type">float32</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;<br>    Human   <span class="hljs-comment">//匿名字段</span><br>    company <span class="hljs-type">string</span><br>    money   <span class="hljs-type">float32</span><br>&#125;<br><br><span class="hljs-comment">// Employee重载Human的SayHi方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Employee)</span></span> SayHi() &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;Hi, I am %s, I work at %s. Call me on %s\n&quot;</span>, e.name,<br>        e.company, e.phone)<br>&#125;<br><br><span class="hljs-comment">// Interface Men被Human,Student和Employee实现</span><br><span class="hljs-comment">// 因为这三个类型都实现了这两个方法</span><br><span class="hljs-keyword">type</span> Men <span class="hljs-keyword">interface</span> &#123;<br>    SayHi()<br>    Sing(lyrics <span class="hljs-type">string</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    mike := Student&#123;Human&#123;<span class="hljs-string">&quot;Mike&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;222-222-XXX&quot;</span>&#125;, <span class="hljs-string">&quot;MIT&quot;</span>, <span class="hljs-number">0.00</span>&#125;<br>    paul := Student&#123;Human&#123;<span class="hljs-string">&quot;Paul&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;111-222-XXX&quot;</span>&#125;, <span class="hljs-string">&quot;Harvard&quot;</span>, <span class="hljs-number">100</span>&#125;<br>    sam := Employee&#123;Human&#123;<span class="hljs-string">&quot;Sam&quot;</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&quot;444-222-XXX&quot;</span>&#125;, <span class="hljs-string">&quot;Golang Inc.&quot;</span>, <span class="hljs-number">1000</span>&#125;<br>    Tom := Employee&#123;Human&#123;<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">37</span>, <span class="hljs-string">&quot;222-444-XXX&quot;</span>&#125;, <span class="hljs-string">&quot;Things Ltd.&quot;</span>, <span class="hljs-number">5000</span>&#125;<br><br>    <span class="hljs-comment">//定义Men类型的变量i</span><br>    <span class="hljs-keyword">var</span> i Men<br><br>    <span class="hljs-comment">//i能存储Student</span><br>    i = mike<br>    fmt.Println(<span class="hljs-string">&quot;This is Mike, a Student:&quot;</span>)<br>    i.SayHi()<br>    i.Sing(<span class="hljs-string">&quot;November rain&quot;</span>)<br><br>    <span class="hljs-comment">//i也能存储Employee</span><br>    i = Tom<br>    fmt.Println(<span class="hljs-string">&quot;This is Tom, an Employee:&quot;</span>)<br>    i.SayHi()<br>    i.Sing(<span class="hljs-string">&quot;Born to be wild&quot;</span>)<br><br>    <span class="hljs-comment">//定义了slice Men</span><br>    fmt.Println(<span class="hljs-string">&quot;Let&#x27;s use a slice of Men and see what happens&quot;</span>)<br>    x := <span class="hljs-built_in">make</span>([]Men, <span class="hljs-number">3</span>)<br>    <span class="hljs-comment">//这三个都是不同类型的元素，但是他们实现了interface同一个接口</span><br>    x[<span class="hljs-number">0</span>], x[<span class="hljs-number">1</span>], x[<span class="hljs-number">2</span>] = paul, sam, mike<br><br>    <span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> x &#123;<br>        value.SayHi()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口变量值的类型"><a href="#接口变量值的类型" class="headerlink" title="接口变量值的类型*"></a>接口变量值的类型<code>*</code></h3><blockquote><p><span style="background: PaleVioletRed;border-radius:10px;padding:1px 5px;color:white;font-weight:900">接口类型声明的变量里能存储任何实现了该接口的类型的值。</span></p><p>有的时候我们需要知道这个变量里的值的类型，那么需要怎么做呢？可以使用类型断言，或者是 <code>switch</code> 类型判断分支。以下的例子 <code>interface_t1.go</code> 我们使用了 <code>switch</code> 类型判断分支。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*使用了switch 类型判断分支*/</span><br><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Element <span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-keyword">type</span> List []Element<br><br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-comment">// 实现了fmt.Stringer接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Person)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(name: &quot;</span> + p.name + <span class="hljs-string">&quot;- age: &quot;</span> + strconv.Itoa(p.age) + <span class="hljs-string">&quot; years)&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>list := <span class="hljs-built_in">make</span>(List, <span class="hljs-number">4</span>)<br>list[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>list[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Hello&quot;</span><br>list[<span class="hljs-number">2</span>] = Person&#123;<span class="hljs-string">&quot;Dennis&quot;</span>, <span class="hljs-number">70</span>&#125;<br>list[<span class="hljs-number">3</span>] = <span class="hljs-number">1</span> + <span class="hljs-number">2i</span><br><br><span class="hljs-keyword">for</span> index, element := <span class="hljs-keyword">range</span> list &#123;<br><span class="hljs-keyword">switch</span> value := element.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-type">int</span>:<br>fmt.Printf(<span class="hljs-string">&quot;list[%d] is an int and its value is %d\n&quot;</span>, index, value)<br><span class="hljs-keyword">case</span> <span class="hljs-type">string</span>:<br>fmt.Printf(<span class="hljs-string">&quot;list[%d] is an int and its value is %s\n&quot;</span>, index, value)<br><span class="hljs-keyword">case</span> Person:<br>fmt.Printf(<span class="hljs-string">&quot;list[%d] is an int and its value is %s\n&quot;</span>, index, value)<br><span class="hljs-keyword">default</span>:<br>fmt.Printf(<span class="hljs-string">&quot;list[%d] is of a different type&quot;</span>, index)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="嵌入interface"><a href="#嵌入interface" class="headerlink" title="嵌入interface"></a>嵌入interface</h3><p>结构体中可以嵌入匿名字段，其实在接口里也可以再嵌入接口。<span style="background: PaleVioletRed;border-radius:10px;padding:1px 5px;color:white;font-weight:900">如果一个 <code>interface1</code> 作为 <code>interface2</code> 的一个嵌入字段，那么 <code>interface2</code> 隐式的包含了 <code>interface1</code> 里的方法。</span>如下例子中，<code>Interface2</code> 包含了 <code>Interface1</code> 的所有方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Interface1 <span class="hljs-keyword">interface</span> &#123;<br>    Send()<br>    Receive()<br>&#125;<br><br><span class="hljs-keyword">type</span> Interface2 <span class="hljs-keyword">interface</span> &#123;<br>    Interface1<br>    Close()<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="五、并发编程"><a href="#五、并发编程" class="headerlink" title="五、并发编程"></a>五、并发编程</h1><blockquote><h4 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h4><p>并发指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，通过 CPU 时间片轮转使多个进程快速交替的执行。而并行的关键是你有同时处理多个任务的能力。并发和并行都可以是很多个线程，就看这些线程能不能同时被（多个）CPU 执行，如果可以就说明是并行，而并发是多个线程被（一个）CPU 轮流切换着执行。一个经典且通俗易懂的例子这样解释并发与并行的区别：并发是两个队列，使用一台咖啡机；并行是两个队列，使用两台咖啡机。如果串行，一个队列使用一台咖啡机，那么哪怕前面那个人有事出去了半天，后面的人也只能等着他回来才能去接咖啡，这效率无疑是最低的。图解：</p><p><img src="/../../../images/GO_%E5%AE%9E%E9%AA%8C%E6%A5%BC%E7%AC%94%E8%AE%B0/GO_1.png" alt="并发与并行"></p></blockquote><blockquote><h4 id="协程"><a href="#协程" class="headerlink" title="协程*"></a>协程<code>*</code></h4><p>协程也叫轻量级线程。与传统的进程和线程相比，协程最大的优点就在于其足够“轻”，操作系统可以轻松创建上百万个协程而不会导致系统资源枯竭，而线程和进程通常最多不过近万个。而多数语言在语法层面上是不支持协程的，一般都是通过库的方式进行支持，但库的支持方式和功能不够完善，经常会引发阻塞等一系列问题，而 Go 语言在语法层面上支持协程，也叫 <code>goroutine</code>。这让协程变得非常简单，让轻量级线程的切换管理不再依赖于系统的进程和线程，也不依赖 CPU 的数量。</p></blockquote><h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine*"></a>goroutine<code>*</code></h2><p><code>goroutine</code> 是 Go 语言并行设计的核心。<code>goroutine</code> 是一种比线程更轻量的实现，十几个 <code>goroutine</code> 可能在底层就是几个线程。 不同的是，Golang 在 runtime、系统调用等多方面对 <code>goroutine</code> 调度进行了封装和处理，当遇到长时间执行或者进行系统调用时，会主动把当前 <code>goroutine</code> 的 CPU (P) 转让出去，让其他 <code>goroutine</code> 能被调度并执行，也就是 Golang 从语言层面支持了协程。要使用 <code>goroutine</code> 只需要简单的在需要执行的函数前添加 <code>go</code> 关键字即可。当执行 <code>goroutine</code> 时候，Go 语言立即返回，接着执行剩余的代码，<code>goroutine</code> 不阻塞主线程。下面我们通过一小段代码来讲解 <code>go</code> 的使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//首先我们先实现一个 Add()函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Add</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> &#123;<br>    c := a + b<br>    fmt.Println(c)<br>&#125;<br><br><span class="hljs-keyword">go</span> Add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">//使用go关键字让函数并发执行</span><br></code></pre></td></tr></table></figure><p>Go 的并发执行就是这么简单，当在一个函数前加上 <code>go</code> 关键字，该函数就会在一个新的 goroutine 中并发执行，当该函数执行完毕时，这个新的 goroutine 也就结束了。不过需要注意的是，如果该函数具有返回值，那么返回值会被丢弃。所以什么时候用 <code>go</code> 还需要酌情考虑。</p><p>接着我们通过一个案例来体验一下 Go 的并发到底是怎么样的。新建源文件 <code>goroutine.go</code>，输入以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Add</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> &#123;<br>    c := a + b<br>    fmt.Println(c)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>        <span class="hljs-keyword">go</span> Add(i, i)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行 <code>goroutine.go</code> 文件会发现屏幕上什么都没有，但程序并不会报错，这是什么原因呢？原来当主程序执行到 for 循环时启动了 10 个 <code>goroutine</code>，然后主程序就退出了，而启动的 10 个 <code>goroutine</code> 还没来得及执行 <code>Add()</code> 函数，所以程序不会有任何输出。也就是说主 <code>goroutine</code> 并不会等待其他 <code>goroutine</code> 执行结束。那么如何解决这个问题呢？Go 语言提供的信道（<code>channel</code>）就是专门解决并发通信问题的</p><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><p><code>channel</code> 是<code>goroutine</code> 之间互相通讯的东西。类似我们 Unix 上的管道（可以在进程间传递消息），用来 <code>goroutine</code> 之间发消息和接收消息。其实，就是在做 <code>goroutine</code> 之间的内存共享。<code>channel</code> 是类型相关的，也就是说一个 <code>channel</code> 只能传递一种类型的值，这个类型需要在 <code>channel</code> 声明时指定。</p><h3 id="声明与初始化"><a href="#声明与初始化" class="headerlink" title="声明与初始化"></a>声明与初始化</h3><p><code>channel</code> 的一般声明形式：<strong>var</strong> chanName <strong>chan</strong> ElementType。</p><p>与普通变量的声明不同的是在类型前面加了 <code>channel</code> 关键字，<code>ElementType</code> 则指定了这个 <code>channel</code> 所能传递的元素类型。示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span> <span class="hljs-comment">//声明一个传递元素类型为int的channel</span><br><span class="hljs-keyword">var</span> b <span class="hljs-keyword">chan</span> <span class="hljs-type">float64</span><br><span class="hljs-keyword">var</span> c <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>初始化一个 <code>channel</code> 也非常简单，直接使用 Go 语言内置的 <code>make()</code> 函数，示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>) <span class="hljs-comment">//初始化一个int型的名为a的channel</span><br>b := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">float64</span>)<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br></code></pre></td></tr></table></figure><p><code>channel</code> 最频繁的操作就是写入和读取，这两个操作也非常简单，示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>a &lt;- <span class="hljs-number">1</span>  <span class="hljs-comment">//将数据写入channel</span><br>z := &lt;-a  <span class="hljs-comment">//从channel中读取数据</span><br></code></pre></td></tr></table></figure><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p><code>select</code> 用于处理异步 IO 问题，它的语法与 <code>switch</code> 非常类似。由 <code>select</code> 开始一个新的选择块，每个选择条件由 <code>case</code> 语句来描述，并且每个 <code>case</code> 语句里必须是一个 <code>channel</code> 操作。它既可以用于 <code>channel</code> 的数据接收，也可以用于 <code>channel</code> 的数据发送。如果 <code>select</code> 的多个分支都满足条件，则会随机的选取其中一个满足条件的分支。</p><p>新建源文件 <code>channel.go</code>，输入以下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;time&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    c1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>    c2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        time.Sleep(time.Second * <span class="hljs-number">1</span>)<br>        c1 &lt;- <span class="hljs-string">&quot;one&quot;</span><br>    &#125;()<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        time.Sleep(time.Second * <span class="hljs-number">2</span>)<br>        c2 &lt;- <span class="hljs-string">&quot;two&quot;</span><br>    &#125;()<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++ &#123;<br>        <span class="hljs-keyword">select</span> &#123;<br>        <span class="hljs-keyword">case</span> msg1 := &lt;-c1:<br>            fmt.Println(<span class="hljs-string">&quot;received&quot;</span>, msg1)<br>        <span class="hljs-keyword">case</span> msg2 := &lt;-c2:<br>            fmt.Println(<span class="hljs-string">&quot;received&quot;</span>, msg2)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码先初始化两个 <code>channel</code> c1 和 c2，然后开启两个 <code>goroutine</code> 分别往 c1 和 c2 写入数据，再通过 <code>select</code> 监听两个 <code>channel</code>，从中读取数据并输出。</p><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ go run channel.go<br>received one<br>received two<br></code></pre></td></tr></table></figure><h2 id="关于-for-select-和-channel-的用法："><a href="#关于-for-select-和-channel-的用法：" class="headerlink" title="关于 for select 和 channel 的用法："></a>关于 for select 和 channel 的用法：</h2><p>select 语句只能与通道联用，它一般由若干个分支组成。每次执行这种语句的时候，一般只有一个分支中的代码会被运行。select 语句的分支分为两种，一种叫做候选分支，另一种叫做默认分支。候选分支总是以关键字 case 开头，后跟一个 case 表达式和一个冒号，然后我们可以从下一行开始写入当分支被选中时需要执行的语句。</p><p>由于 select 语句是专为通道而设计的，所以每个 case 表达式中都只能包含操作通道的表达式，比如接收表达式。使用一个接收值可以接收通道里的值，使用两个接收值可以判断通道是否已经关闭了。</p><p>对于 select 语句的执行规则如下：</p><ul><li>每个 case 都必须是一个通信。</li><li>所有 Channel 表达式都会被求值。</li><li>所有被发送的表达式都会被求值。</li><li>如果任意某个通信可以进行，它就执行，其他被忽略。</li><li>如果有多个 case 都可以运行，Select 会随机公平地选出一个执行。其他不会执行。 否则：</li><li>如果有 default 子句，则执行该语句。</li><li>如果没有 default 子句，select 将阻塞，直到某个通信可以运行；Go 不会重新对 Channel 或值进行求值。</li></ul><p>注意这里是和 switch 的操作是不一样的，switch 操作中，只要从上到下有一个满足条件了，就会执行相应的那一个 case，select 中，我们是全部计算一遍，然后再从可满足条件的 case 中公平的执行其中一个。这是为了防止有些通道长期得不到执行。</p><h2 id="超时机制"><a href="#超时机制" class="headerlink" title="超时机制"></a>超时机制</h2><p>通过前面的内容我们了解到，<code>channel</code> 的读写操作非常简单，只需要通过 <code>&lt;-</code> 操作符即可实现，但是 <code>channel</code> 的使用不当却会带来大麻烦。我们先来看之前的一段代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>a &lt;- <span class="hljs-number">1</span><br>z := &lt;-a<br></code></pre></td></tr></table></figure><p>观察上面三行代码，第 2 行往 <code>channel</code> 内写入了数据，第 3 行从 <code>channel</code> 中读取了数据，如果程序运行正常当然不会出什么问题，可如果第二行数据写入失败，或者 <code>channel</code> 中没有数据，那么第 3 行代码会因为永远无法从 <code>a</code> 中读取到数据而一直处于阻塞状态。相反的，如果 <code>channel</code> 中的数据一直没有被读取，那么写入操作也会一直处于阻塞状态。如果不正确处理这个情况，很可能会导致整个 <code>goroutine</code> 锁死，这就是超时问题。Go 语言没有针对超时提供专门的处理机制，但是我们却可以利用 <code>select</code> 来巧妙地实现超时处理机制，下面看一个示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">t := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span></span> &#123;<br>    time.Sleep(<span class="hljs-number">1e9</span>) <span class="hljs-comment">//等待1秒</span><br>    t &lt;- <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-keyword">select</span> &#123;<br>    <span class="hljs-keyword">case</span> &lt;-ch:  <span class="hljs-comment">//从ch中读取数据</span><br><br>    <span class="hljs-keyword">case</span> &lt;-t:  <span class="hljs-comment">//如果1秒后没有从ch中读取到数据，那么从t中读取，并进行下一步操作</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样的方法就可以让程序在等待 1 秒后继续执行，而不会因为 ch 读取等待而导致程序停滞，从而巧妙地实现了超时处理机制，这种方法不仅简单，在实际项目开发中也是非常实用的。</p><h4 id="channel-的关闭"><a href="#channel-的关闭" class="headerlink" title="channel 的关闭"></a>channel 的关闭</h4><p><code>channel</code> 的关闭非常简单，使用 Go 语言内置的 <code>close()</code> 函数即可关闭 <code>channel</code>，示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-built_in">close</span>(ch)<br></code></pre></td></tr></table></figure><p>关闭了 <code>channel</code> 后如何查看 <code>channel</code> 是否关闭成功了呢？很简单，我们可以在读取 <code>channel</code> 时采用多重返回值的方式，示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">x, ok := &lt;-ch<br></code></pre></td></tr></table></figure><p>通过查看第二个返回值的 <code>bool</code> 值即可判断 <code>channel</code> 是否关闭，若为 <code>false</code> 则表示 <code>channel</code> 被关闭，反之则没有关闭。</p><hr><h1 id="六、词频统计综合案例"><a href="#六、词频统计综合案例" class="headerlink" title="六、词频统计综合案例"></a>六、词频统计综合案例</h1><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>词频统计的程序逻辑很简单。我们首先会创建一个映射，然后读取文件的每一行，提取单词，然后更新映射中单词所对应的数量即可。</p><p>为了演示面向对象和 goroutine 的使用，我们将基础映射类型封装成了一个统计单词频率的包。我们在基础映射类型上创建了类型 <code>WordCound</code>，然后为该类型了实现了关键方法 <code>UpdateFreq()</code> 和 <code>WordFreqCounter()</code>，其中前者会读取一个文件并统计该文件中的所有单词的词频，后者通过 goroutine 实现了并发统计。</p><p>其并发逻辑是：对于每一个文件，创建一个 goroutine，在这个 goroutine 内部调用 <code>UpdateFreq()</code> 方法统计对应文件的词频，当统计完成以后会将映射中每一对键值转化为 <code>Pair</code> 结构发送到 <code>results</code> 通道，并在发送完成时候发送一个空结构体的值到 <code>done</code> 通道以表示自己的任务已经完成。由于 <code>map</code> 映射结构不支持并发写操作，所以我们通过 <code>result</code> 通道来保证每次只有一个 goroutine 能更新映射。又因为当所有的 goroutine 结束以后，有可能 <code>results</code> 通道中还有没来得及处理的数据，所以在 <code>WordFreqCounter()</code> 的结尾我们又开启了一个 <code>for</code> 循环处理 <code>results</code> 通道中的剩余数据。说了这么多，我们直接写代码吧。</p><p>在 <code>$GOPATH/src/wordcount</code> 目录中创建文件 <code>wordcount.go</code>，输入以下源码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> wordcount<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;bufio&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;sort&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br>    <span class="hljs-string">&quot;unicode&quot;</span><br>    <span class="hljs-string">&quot;unicode/utf8&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Pair <span class="hljs-keyword">struct</span> &#123;<br>    Key   <span class="hljs-type">string</span><br>    Value <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-comment">// PariList实现了sort接口，可以使用sort.Sort对其排序</span><br><br><span class="hljs-keyword">type</span> PairList []Pair<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p PairList)</span></span> Swap(i, j <span class="hljs-type">int</span>)      &#123; p[i], p[j] = p[j], p[i] &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p PairList)</span></span> Len() <span class="hljs-type">int</span>           &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(p) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p PairList)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> p[j].Value &lt; p[i].Value &#125; <span class="hljs-comment">// 逆序</span><br><br><span class="hljs-comment">// 提取单词</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SplitOnNonLetters</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br>    notALetter := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(char <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> !unicode.IsLetter(char) &#125;<br>    <span class="hljs-keyword">return</span> strings.FieldsFunc(s, notALetter)<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   基于map实现了类型WordCount, 并对期实现了Merge(), Report(), SortReport(), UpdateFreq(),</span><br><span class="hljs-comment">   WordFreqCounter() 方法</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">type</span> WordCount <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br><br><span class="hljs-comment">// 用于合并两个WordCount</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(source WordCount)</span></span> Merge(wordcount WordCount) WordCount &#123;<br>    <span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> wordcount &#123;<br>        source[k] += v<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> source<br>&#125;<br><br><span class="hljs-comment">// 打印词频统计情况</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(wordcount WordCount)</span></span> Report() &#123;<br>    words := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(wordcount))<br>    wordWidth, frequencyWidth := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> word, frequency := <span class="hljs-keyword">range</span> wordcount &#123;<br>        words = <span class="hljs-built_in">append</span>(words, word)<br>        <span class="hljs-keyword">if</span> width := utf8.RuneCountInString(word); width &gt; wordWidth &#123;<br>            wordWidth = width<br>        &#125;<br>        <span class="hljs-keyword">if</span> width := <span class="hljs-built_in">len</span>(fmt.Sprint(frequency)); width &gt; frequencyWidth &#123;<br>            frequencyWidth = width<br>        &#125;<br>    &#125;<br>    sort.Strings(words)<br>    gap := wordWidth + frequencyWidth - <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;Word&quot;</span>) - <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;Frequency&quot;</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;Word %*s%s\n&quot;</span>, gap, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;Frequency&quot;</span>)<br>    <span class="hljs-keyword">for</span> _, word := <span class="hljs-keyword">range</span> words &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;%-*s %*d\n&quot;</span>, wordWidth, word, frequencyWidth,<br>            wordcount[word])<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 从多到少打印词频</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(wordcount WordCount)</span></span> SortReport() &#123;<br>    p := <span class="hljs-built_in">make</span>(PairList, <span class="hljs-built_in">len</span>(wordcount))<br>    i := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> wordcount &#123; <span class="hljs-comment">// 将wordcount map转换成PairList</span><br>        p[i] = Pair&#123;k, v&#125;<br>        i++<br>    &#125;<br><br>    sort.Sort(p) <span class="hljs-comment">// 因为PairList实现了排序接口，所以可以使用sort.Sort()对其排序</span><br><br>    wordWidth, frequencyWidth := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _, pair := <span class="hljs-keyword">range</span> p &#123;<br>        word, frequency := pair.Key, pair.Value<br>        <span class="hljs-keyword">if</span> width := utf8.RuneCountInString(word); width &gt; wordWidth &#123;<br>            wordWidth = width<br>        &#125;<br>        <span class="hljs-keyword">if</span> width := <span class="hljs-built_in">len</span>(fmt.Sprint(frequency)); width &gt; frequencyWidth &#123;<br>            frequencyWidth = width<br>        &#125;<br>    &#125;<br>    gap := wordWidth + frequencyWidth - <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;Word&quot;</span>) - <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;Frequency&quot;</span>)<br>    fmt.Printf(<span class="hljs-string">&quot;Word %*s%s\n&quot;</span>, gap, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;Frequency&quot;</span>)<br><br>    <span class="hljs-keyword">for</span> _, pair := <span class="hljs-keyword">range</span> p &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;%-*s %*d\n&quot;</span>, wordWidth, pair.Key, frequencyWidth,<br>            pair.Value)<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 从文件中读取单词，并更新其出现的次数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(wordcount WordCount)</span></span> UpdateFreq(filename <span class="hljs-type">string</span>) &#123;<br>    <span class="hljs-keyword">var</span> file *os.File<br>    <span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><br>    <span class="hljs-keyword">if</span> file, err = os.Open(filename); err != <span class="hljs-literal">nil</span> &#123;<br>        log.Println(<span class="hljs-string">&quot;failed to open the file: &quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">defer</span> file.Close() <span class="hljs-comment">// 本函数退出之前时，关闭文件</span><br><br>    reader := bufio.NewReader(file)<br>    <span class="hljs-keyword">for</span> &#123;<br>        line, err := reader.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">for</span> _, word := <span class="hljs-keyword">range</span> SplitOnNonLetters(strings.TrimSpace(line)) &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(word) &gt; utf8.UTFMax ||<br>                utf8.RuneCountInString(word) &gt; <span class="hljs-number">1</span> &#123;<br>                wordcount[strings.ToLower(word)] += <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">if</span> err != io.EOF &#123;<br>                log.Println(<span class="hljs-string">&quot;failed to finish reading the file: &quot;</span>, err)<br>            &#125;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 并发统计单词频次</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(wordcount WordCount)</span></span> WordFreqCounter(files []<span class="hljs-type">string</span>) &#123;<br><br>    results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> Pair, <span class="hljs-built_in">len</span>(files))  <span class="hljs-comment">// goroutine 将结果发送到该channel</span><br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-built_in">len</span>(files)) <span class="hljs-comment">// 每个goroutine工作完成后，发送一个空结构体到该channel，表示工作完成</span><br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(files); &#123; <span class="hljs-comment">// 有多少个文件就开启多少个goroutine, 使用匿名函数的方式</span><br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(done <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-keyword">struct</span>&#123;&#125;, results <span class="hljs-keyword">chan</span>&lt;- Pair, filename <span class="hljs-type">string</span>)</span></span> &#123;<br>            wordcount := <span class="hljs-built_in">make</span>(WordCount)<br>            wordcount.UpdateFreq(filename)<br>            <span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> wordcount &#123;<br>                pair := Pair&#123;k, v&#125;<br>                results &lt;- pair<br>            &#125;<br>            done &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>        &#125;(done, results, files[i])<br><br>        i++<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> working := <span class="hljs-built_in">len</span>(files); working &gt; <span class="hljs-number">0</span>; &#123; <span class="hljs-comment">// 监听通道，直到所有的工作goroutine完成任务时才退出</span><br>        <span class="hljs-keyword">select</span> &#123;<br>        <span class="hljs-keyword">case</span> pair := &lt;-results: <span class="hljs-comment">// 接收发送到通道中的统计结果</span><br>            wordcount[pair.Key] += pair.Value<br><br>        <span class="hljs-keyword">case</span> &lt;-done: <span class="hljs-comment">// 判断工作goroutine是否全部完成</span><br>            working--<br><br>        &#125;<br>    &#125;<br><br>DONE: <span class="hljs-comment">// 再次启动for循环处理通道中还未处理完的值</span><br>    <span class="hljs-keyword">for</span> &#123;<br>        <span class="hljs-keyword">select</span> &#123;<br>        <span class="hljs-keyword">case</span> pair := &lt;-results:<br>            wordcount[pair.Key] += pair.Value<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span> DONE<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">close</span>(results)<br>    <span class="hljs-built_in">close</span>(done)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>然后在 <code>$GOPATH</code> 目录中创建文件 <code>wordfreq.go</code>，输入以下源码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;path/filepath&quot;</span><br>    <span class="hljs-string">&quot;wordcount&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) == <span class="hljs-number">1</span> || os.Args[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;-h&quot;</span> || os.Args[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;--help&quot;</span> &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;usage: %s &lt;file1&gt; [&lt;file2&gt; [... &lt;fileN&gt;]]\n&quot;</span>,<br>            filepath.Base(os.Args[<span class="hljs-number">0</span>]))<br>        os.Exit(<span class="hljs-number">1</span>)<br>    &#125;<br><br>    wordcounter := <span class="hljs-built_in">make</span>(wordcount.WordCount)<br>    <span class="hljs-comment">// for _, filename := range os.Args[1:] &#123;</span><br>    <span class="hljs-comment">//  wordcount.UpdateFreq(filename)</span><br>    <span class="hljs-comment">// &#125;</span><br>    wordcounter.WordFreqCounter(os.Args[<span class="hljs-number">1</span>:])<br><br>    wordcounter.SortReport()<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="七、IDE及环境配置"><a href="#七、IDE及环境配置" class="headerlink" title="七、IDE及环境配置"></a>七、IDE及环境配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Go学习之路,感谢实验楼的课程</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Go" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Go/"/>
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="实验楼" scheme="https://www.mingsrc.work/tags/%E5%AE%9E%E9%AA%8C%E6%A5%BC/"/>
    
  </entry>
  
  <entry>
    <title>力扣高效算法入门</title>
    <link href="https://www.mingsrc.work/posts/8cb5320c"/>
    <id>https://www.mingsrc.work/posts/8cb5320c</id>
    <published>2022-01-23T07:00:29.215Z</published>
    <updated>2022-01-27T14:37:25.333Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h1><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em>  的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [3,3], target = 6<br>输出：[0,1]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= target &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n&lt;sup&gt;2&lt;/sup&gt;)</code> 的算法吗？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">for</span> i,x := <span class="hljs-keyword">range</span> nums &#123;<br>        <span class="hljs-keyword">for</span> j := i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">len</span>(nums); j++ &#123;<br>            <span class="hljs-keyword">if</span> x+nums[j] == target &#123;<br>                <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;i,j&#125; <br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a></h1><p>给定一个已按照**非递减顺序排列 ** 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p><p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值_。_<code>numbers</code> 的下标 <strong>从 1 开始计数</strong> ，所以答案数组应当满足 <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length</code> 。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你 <strong>不可以</strong> 重复使用相同的元素。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：numbers = [2,7,11,15], target = 9<br>输出：[1,2]<br>解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：numbers = [2,3,4], target = 6<br>输出：[1,3]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：numbers = [-1,0], target = -1<br>输出：[1,2]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> 按 <strong>非递减顺序</strong> 排列</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li><strong>仅存在一个有效答案</strong></li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>#双指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(numbers []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    left,right := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(numbers) - <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">for</span> left &lt; right &#123;<br>        sum := numbers[left] + numbers [right]<br>        <span class="hljs-keyword">if</span> sum == target &#123;<br>            <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;left + <span class="hljs-number">1</span>, right + <span class="hljs-number">1</span>&#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> sum &lt; target &#123;<br>            left++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right--<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h1><p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 _a，b，c ，_使得 <em>a + b + c &#x3D;</em> 0 ？请你找出所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = []<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [0]<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 3000</code></li><li><code>-10&lt;sup&gt;5&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li></ul><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>#三指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go">class Solution &#123;<br>public:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; threeSum(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-comment">// 先排序</span><br>        <span class="hljs-type">int</span> n = nums.size();<br>        sort(nums.begin(), nums.end());<br><br>        <span class="hljs-comment">// 定义首指针==target</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> ( i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>]) <br>                <span class="hljs-keyword">continue</span>;<br>            <br>            <span class="hljs-type">int</span> k = n - <span class="hljs-number">1</span>; <span class="hljs-comment">// 内层首指针</span><br>            <span class="hljs-type">int</span> target = -nums[i];<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) <span class="hljs-comment">// 内层尾指针</span><br>            &#123; <br>                <span class="hljs-keyword">if</span>( j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j<span class="hljs-number">-1</span>]) <br>                    <span class="hljs-keyword">continue</span>;<br><br>                while (j &lt; k &amp;&amp; nums[j] + nums[k] &gt; target) &#123; <span class="hljs-comment">// 遍历尾指针，找合适序列</span><br>                    --k;<br>                &#125;<br><br>                <span class="hljs-comment">// 当前i不满足</span><br>                <span class="hljs-keyword">if</span>(j == k) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 得到符合条件序列</span><br>                <span class="hljs-keyword">if</span>(nums[j] + nums[k] == target) &#123;<br>                    ans.push_back(&#123;nums[i],nums[j],nums[k]&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode-cn.com/problems/4sum/">18. 四数之和</a></h1><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [1,0,-1,0,-2,2], target = 0<br>输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [2,2,2,2,2], target = 8<br>输出：[[2,2,2,2]]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= target &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li></ul><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go">class Solution &#123;<br>public:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; fourSum(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-type">int</span> n = nums.size();<br>        <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">return</span> ans;<br>        sort(nums.begin(), nums.end());<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>])<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> ((long) nums[i] + nums[i + <span class="hljs-number">1</span>] + nums[i + <span class="hljs-number">2</span>] + nums[i + <span class="hljs-number">3</span>] &gt; target) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((long) nums[i] + nums[n - <span class="hljs-number">3</span>] + nums[n - <span class="hljs-number">2</span>] + nums[n - <span class="hljs-number">1</span>] &lt; target) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n - <span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j<span class="hljs-number">-1</span>])<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> ((long) nums[i] + nums[j] + nums[j + <span class="hljs-number">1</span>] + nums[j + <span class="hljs-number">2</span>] &gt; target) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> ((long) nums[i] + nums[j] + nums[n - <span class="hljs-number">2</span>] + nums[n - <span class="hljs-number">1</span>] &lt; target) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 最内层首尾指针</span><br>                <span class="hljs-type">int</span> m = n - <span class="hljs-number">1</span>, k = j + <span class="hljs-number">1</span>;<br>                while(k &lt; m) &#123;<br>                    <span class="hljs-type">int</span> sum = nums[i] + nums[j] + nums[k] + nums[m];<br>                    <span class="hljs-keyword">if</span> (sum == target) &#123;<br>                        ans.push_back(&#123;nums[i], nums[j], nums[k], nums[m]&#125;);<br>                        while (k &lt; m &amp;&amp; nums[k] == nums[k + <span class="hljs-number">1</span>]) &#123;<br>                            k++;<br>                        &#125;<br>                        k++;<br>                        while (k &lt; m &amp;&amp; nums[m] == nums[m - <span class="hljs-number">1</span>]) &#123;<br>                            m--;<br>                        &#125;<br>                        m--;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; target) &#123;<br>                        k++;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        m--;<br>                    &#125;<br>                &#125; <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a><a href="https://leetcode-cn.com/problems/fibonacci-number/">509. 斐波那契数</a></h1><p><strong>斐波那契数</strong>，通常用 <code>F(n)</code> 表示，形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">F(0) = 0，F(1) = 1<br>F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1<br></code></pre></td></tr></table></figure><p>给你 <code>n</code> ，请计算 <code>F(n)</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：2<br>输出：1<br>解释：F(2) = F(1) + F(0) = 1 + 0 = 1<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：3<br>输出：2<br>解释：F(3) = F(2) + F(1) = 1 + 1 = 2<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：4<br>输出：3<br>解释：F(4) = F(3) + F(2) = 2 + 1 = 3<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 30</code></li></ul><h2 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fib</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> fib(n<span class="hljs-number">-2</span>) + fib(n<span class="hljs-number">-1</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a></h1><p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>注意：</strong>给定 <em>n</em> 是一个正整数。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。<br>1\.  1 阶 + 1 阶<br>2\.  2 阶<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。<br>1\.  1 阶 + 1 阶 + 1 阶<br>2\.  1 阶 + 2 阶<br>3\.  2 阶 + 1 阶<br></code></pre></td></tr></table></figure><h2 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span> &#123;<br>        <span class="hljs-keyword">return</span> n<br>    &#125;<br>    pre1,pre2 := <span class="hljs-number">2</span>,<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">2</span>; i &lt; n; i++ &#123;<br>        cur := pre1 + pre2<br>        pre2 = pre1<br>        pre1 = cur<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre1<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子数组和</a></h1><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [1]<br>输出：1<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [5,4,-1,7,8]<br>输出：23<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;4&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><p><strong>进阶：</strong>如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p><h2 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    sum := nums[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;<br>        <span class="hljs-keyword">if</span> nums[i] + nums[i<span class="hljs-number">-1</span>] &gt; nums[i] &#123;<br>            nums[i] += nums[i<span class="hljs-number">-1</span>]<br>        &#125;<br>        <span class="hljs-keyword">if</span>  nums[i] &gt; sum &#123;<br>            sum = nums[i]<br>        &#125;<br>    &#125;  <br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h1><p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [1,5,11,5]<br>输出：true<br>解释：数组可以分割成 [1, 5, 5] 和 [11] 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [1,2,3,5]<br>输出：false<br>解释：数组不能分割成两个元素和相等的子集。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划 #背包问题 #difficult</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(nums)<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    sum, maxNum := <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _,num := <span class="hljs-keyword">range</span> nums &#123;<br>        sum += num<br>        <span class="hljs-keyword">if</span> num &gt; maxNum &#123;<br>            maxNum = num<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断总和是不是奇数</span><br>    <span class="hljs-keyword">if</span> sum%<span class="hljs-number">2</span> != <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    target := sum / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> target &lt; maxNum &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <br>    dp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">bool</span>, target+<span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        v := nums[i]<br>        <span class="hljs-keyword">for</span> j := target; j &gt;= v; j-- &#123;<br>            dp[j] = dp[j] || dp[j-v]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[target]<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a><a href="https://leetcode-cn.com/problems/coin-change/">322. 零钱兑换</a></h1><p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> 。</p><p>你可以认为每种硬币的数量是无限的。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：coins = [1, 2, 5], amount = 11<br>输出：3 <br>解释：11 = 5 + 5 + 1<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：coins = [2], amount = 3<br>输出：-1<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：coins = [1], amount = 0<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：coins = [1], amount = 1<br>输出：1<br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：coins = [1], amount = 2<br>输出：2<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 12</code></li><li><code>1 &lt;= coins[i] &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code></li><li><code>0 &lt;= amount &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><h2 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(coins []<span class="hljs-type">int</span>, amount <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    dp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, amount + <span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>    <span class="hljs-comment">// 初始化为math.MaxInt32</span><br><span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= amount; j++ &#123;<br>dp[j] = math.MaxInt32<br>&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(coins); i++ &#123;<br>        <span class="hljs-keyword">for</span> j := coins[i]; j &lt;= amount ; j++ &#123;<br>            <span class="hljs-keyword">if</span> dp[j-coins[i]] != math.MaxInt32 &#123;<br>                dp[j] = min(dp[j], dp[j-coins[i]]+<span class="hljs-number">1</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 没找到能装满背包的, 就返回-1</span><br><span class="hljs-keyword">if</span> dp[amount] == math.MaxInt32 &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-keyword">return</span> dp[amount]<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">min</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> a &lt; b&#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h1><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;()&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;()[]&#123;&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;(]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;([)]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;&#123;[]&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li></ul><h2 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h2><p>#栈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(s)<br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    pairs := <span class="hljs-keyword">map</span>[<span class="hljs-type">byte</span>]<span class="hljs-type">byte</span> &#123;<br>        <span class="hljs-string">&#x27;)&#x27;</span>:<span class="hljs-string">&#x27;(&#x27;</span>,<br>        <span class="hljs-string">&#x27;]&#x27;</span>:<span class="hljs-string">&#x27;[&#x27;</span>,<br>        <span class="hljs-string">&#x27;&#125;&#x27;</span>:<span class="hljs-string">&#x27;&#123;&#x27;</span>,<br>    &#125;<br><br>    stack := []<span class="hljs-type">byte</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">if</span> pairs[s[i]] &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span> || stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] != pairs[s[i]] &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>            stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            stack = <span class="hljs-built_in">append</span>(stack,s[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="20-有效的括号-1"><a href="#20-有效的括号-1" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h1><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;()&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;()[]&#123;&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;(]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;([)]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;&#123;[]&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li></ul><h2 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h2><p>#栈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(s)<br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    pairs := <span class="hljs-keyword">map</span>[<span class="hljs-type">byte</span>]<span class="hljs-type">byte</span> &#123;<br>        <span class="hljs-string">&#x27;)&#x27;</span>:<span class="hljs-string">&#x27;(&#x27;</span>,<br>        <span class="hljs-string">&#x27;]&#x27;</span>:<span class="hljs-string">&#x27;[&#x27;</span>,<br>        <span class="hljs-string">&#x27;&#125;&#x27;</span>:<span class="hljs-string">&#x27;&#123;&#x27;</span>,<br>    &#125;<br><br>    stack := []<span class="hljs-type">byte</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">if</span> pairs[s[i]] &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span> || stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] != pairs[s[i]] &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>            stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            stack = <span class="hljs-built_in">append</span>(stack,s[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496. 下一个更大元素 I"></a><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496. 下一个更大元素 I</a></h1><p><code>nums1</code> 中数字 <code>x</code> 的 <strong>下一个更大元素</strong> 是指 <code>x</code> 在 <code>nums2</code> 中对应位置 <strong>右侧</strong> 的 <strong>第一个</strong> 比 <code>x</code>大的元素。</p><p>给你两个 <strong>没有重复元素</strong> 的数组 <code>nums1</code> 和 <code>nums2</code> ，下标从 <strong>0</strong> 开始计数，其中<code>nums1</code> 是 <code>nums2</code> 的子集。</p><p>对于每个 <code>0 &lt;= i &lt; nums1.length</code> ，找出满足 <code>nums1[i] == nums2[j]</code> 的下标 <code>j</code> ，并且在 <code>nums2</code> 确定 <code>nums2[j]</code> 的 <strong>下一个更大元素</strong> 。如果不存在下一个更大元素，那么本次查询的答案是 <code>-1</code> 。</p><p>返回一个长度为 <code>nums1.length</code> 的数组<code>ans</code>作为答案，满足<code>ans[i]</code>是如上所述的 <strong>下一个更大元素</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums1 = [4,1,2], nums2 = [1,3,4,2].<br>输出：[-1,3,-1]<br>解释：nums1 中每个值的下一个更大元素如下所述：<br>- 4 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。<br>- 1 ，用加粗斜体标识，nums2 = [1,3,4,2]。下一个更大元素是 3 。<br>- 2 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums1 = [2,4], nums2 = [1,2,3,4].<br>输出：[3,-1]<br>解释：nums1 中每个值的下一个更大元素如下所述：<br>- 2 ，用加粗斜体标识，nums2 = [1,2,3,4]。下一个更大元素是 3 。<br>- 4 ，用加粗斜体标识，nums2 = [1,2,3,4]。不存在下一个更大元素，所以答案是 -1 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>nums1</code>和<code>nums2</code>中所有整数 <strong>互不相同</strong></li><li><code>nums1</code> 中的所有整数同样出现在 <code>nums2</code> 中</li></ul><p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(nums1.length + nums2.length)</code> 的解决方案吗？</p><h2 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h2><p>&#x2F;#暴力解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">nextGreaterElement</span><span class="hljs-params">(nums1 []<span class="hljs-type">int</span>, nums2 []<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    m,n := <span class="hljs-built_in">len</span>(nums1),<span class="hljs-built_in">len</span>(nums2)<br>    res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, m)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; m; i++ &#123;<br>        j := <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j &lt; n &amp;&amp; nums2[j] != nums1[i] &#123;<br>            j++<br>        &#125;<br>        k := j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> k &lt; n &amp;&amp; nums2[k] &lt; nums2[j] &#123;<br>            k++<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> k &lt; n &#123;<br>            res[i] = nums2[k]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res[i] = <span class="hljs-number">-1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="456-132-模式"><a href="#456-132-模式" class="headerlink" title="456. 132 模式"></a><a href="https://leetcode-cn.com/problems/132-pattern/">456. 132 模式</a></h1><p>给你一个整数数组 <code>nums</code> ，数组中共有 <code>n</code> 个整数。<strong>132 模式的子序列</strong> 由三个整数 <code>nums[i]</code>、<code>nums[j]</code> 和 <code>nums[k]</code> 组成，并同时满足：<code>i &lt; j &lt; k</code> 和 <code>nums[i] &lt; nums[k] &lt; nums[j]</code> 。</p><p>如果 <code>nums</code> 中存在 <strong>132 模式的子序列</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [1,2,3,4]<br>输出：false<br>解释：序列中不存在 132 模式的子序列。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [3,1,4,2]<br>输出：true<br>解释：序列中有 1 个 132 模式的子序列： [1, 4, 2] 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [-1,3,2,0]<br>输出：true<br>解释：序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 2 * 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li></ul><h4 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h4><p>#栈 #单调栈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">find132pattern</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(nums)<br>    candidateK := []<span class="hljs-type">int</span>&#123;nums[n<span class="hljs-number">-1</span>]&#125;<br><br>    maxK := math.MinInt64<br><br>    <span class="hljs-keyword">for</span> i := n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br>        <span class="hljs-keyword">if</span> nums[i] &lt; maxK &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(candidateK) &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt; candidateK[<span class="hljs-built_in">len</span>(candidateK)<span class="hljs-number">-1</span>] &#123;<br>            maxK = candidateK[<span class="hljs-built_in">len</span>(candidateK)<span class="hljs-number">-1</span>]<br>            candidateK = candidateK[:<span class="hljs-built_in">len</span>(candidateK)<span class="hljs-number">-1</span>]<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> nums[i] &gt; maxK &#123;<br>            candidateK = <span class="hljs-built_in">append</span>(candidateK, nums[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="119-杨辉三角-II"><a href="#119-杨辉三角-II" class="headerlink" title="119. 杨辉三角 II"></a><a href="https://leetcode-cn.com/problems/pascals-triangle-ii/">119. 杨辉三角 II</a></h1><p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code>行。</p><p><small style="display: inline;">在「杨辉三角」中，每个数是它左上方和右上方的数的和。</small></p><p><img src="https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif"></p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: rowIndex = 3<br>输出: [1,3,3,1]<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: rowIndex = 0<br>输出: [1]<br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: rowIndex = 1<br>输出: [1,1]<br></code></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>0 &lt;= rowIndex &lt;= 33</code></li></ul><p><strong>进阶：</strong></p><p>你可以优化你的算法到 <code>_O_(_rowIndex_)</code> 空间复杂度吗？</p><h2 id="Solution-13"><a href="#Solution-13" class="headerlink" title="Solution"></a>Solution</h2><p>#数学</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getRow</span><span class="hljs-params">(rowIndex <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    C := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int</span>, rowIndex+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> C &#123;<br>        C[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>,i+<span class="hljs-number">1</span>)<br>        C[i][<span class="hljs-number">0</span>],C[i][i] = <span class="hljs-number">1</span>,<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt; i; j++ &#123;<br>            C[i][j] = C[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + C[i<span class="hljs-number">-1</span>][j]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> C[rowIndex]<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a><a href="https://leetcode-cn.com/problems/perfect-squares/">279. 完全平方数</a></h1><p>给定正整数 _n_，找到若干个完全平方数（比如 <code>1, 4, 9, 16, ...</code>）使得它们的和等于 _n_。你需要让组成和的完全平方数的个数最少。</p><p>给你一个整数 <code>n</code> ，返回和为 <code>n</code> 的完全平方数的 <strong>最少数量</strong> 。</p><p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：n = 12<br>输出：3 <br>解释：12 = 4 + 4 + 4<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：n = 13<br>输出：2<br>解释：13 = 4 + 9<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><h2 id="Solution-14"><a href="#Solution-14" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">numSquares</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    f := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= n; i++ &#123;<br>        minn := math.MaxInt32<br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j*j &lt;= i; j++ &#123;<br>            minn = min(minn, f[i-j*j])<br>        &#125;<br>        f[i] = minn + <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> f[n]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">min</span><span class="hljs-params">(a,b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> a &lt; b &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><h1 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a><a href="https://leetcode-cn.com/problems/path-sum/">112. 路径总和</a></h1><p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22<br>输出：true<br>解释：等于目标和的根节点到叶节点路径如上图所示。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：root = [1,2,3], targetSum = 5<br>输出：false<br>解释：树中存在两条根节点到叶子节点的路径：<br>(1 --&gt; 2): 和为 3<br>(1 --&gt; 3): 和为 4<br>不存在 sum = 5 的根节点到叶子节点的路径。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：root = [], targetSum = 0<br>输出：false<br>解释：由于树是空的，所以不存在根节点到叶子节点的路径。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点的数目在范围 <code>[0, 5000]</code> 内</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li><li><code>-1000 &lt;= targetSum &lt;= 1000</code></li></ul><h2 id="Solution-15"><a href="#Solution-15" class="headerlink" title="Solution"></a>Solution</h2><p>#广度搜索</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasPathSum</span><span class="hljs-params">(root *TreeNode, targetSum <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    queNode := []*TreeNode&#123;&#125;<br>    queVal := []<span class="hljs-type">int</span>&#123;&#125;<br>    queNode = <span class="hljs-built_in">append</span>(queNode,root)<br>    queVal = <span class="hljs-built_in">append</span>(queVal,root.Val)<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queNode) != <span class="hljs-number">0</span> &#123;<br>        now := queNode[<span class="hljs-number">0</span>]<br>        queNode = queNode[<span class="hljs-number">1</span>:]<br>        temp := queVal[<span class="hljs-number">0</span>]<br>        queVal = queVal[<span class="hljs-number">1</span>:]<br><br>        <span class="hljs-keyword">if</span> now.Left == <span class="hljs-literal">nil</span> &amp;&amp; now.Right == <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">if</span> temp == targetSum &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> now.Left != <span class="hljs-literal">nil</span> &#123;<br>            queNode = <span class="hljs-built_in">append</span>(queNode,now.Left)<br>            queVal = <span class="hljs-built_in">append</span>(queVal,now.Left.Val + temp)<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> now.Right != <span class="hljs-literal">nil</span> &#123;<br>            queNode = <span class="hljs-built_in">append</span>(queNode, now.Right)<br>            queVal = <span class="hljs-built_in">append</span>(queVal, now.Right.Val + temp)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><hr><h1 id="720-词典中最长的单词"><a href="#720-词典中最长的单词" class="headerlink" title="720. 词典中最长的单词"></a><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary/">720. 词典中最长的单词</a></h1><p>给出一个字符串数组<code>words</code>组成的一本英语词典。从中找出最长的一个单词，该单词是由<code>words</code>词典中其他单词逐步添加一个字母组成。若其中有多个可行的答案，则返回答案中字典序最小的单词。</p><p>若无答案，则返回空字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：<br>words = [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;, &quot;world&quot;]<br>输出：&quot;world&quot;<br>解释： <br>单词&quot;world&quot;可由&quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, 和 &quot;worl&quot;添加一个字母组成。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：<br>words = [&quot;a&quot;, &quot;banana&quot;, &quot;app&quot;, &quot;appl&quot;, &quot;ap&quot;, &quot;apply&quot;, &quot;apple&quot;]<br>输出：&quot;apple&quot;<br>解释：<br>&quot;apply&quot;和&quot;apple&quot;都能由词典中的单词组成。但是&quot;apple&quot;的字典序小于&quot;apply&quot;。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>所有输入的字符串都只包含小写字母。</li><li><code>words</code>数组长度范围为<code>[1,1000]</code>。</li><li><code>words[i]</code>的长度范围为<code>[1,30]</code>。</li></ul><h4 id="Solution-16"><a href="#Solution-16" class="headerlink" title="Solution"></a>Solution</h4><p>Language: ****</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longestWord</span><span class="hljs-params">(words []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-comment">// 排序哈希</span><br>    sort.Strings(words)<br><br>    <span class="hljs-comment">// 字符串/是否出现</span><br>    wordsMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br>    res := <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> _,word := <span class="hljs-keyword">range</span> words &#123;<br>        wlen, reslen := <span class="hljs-built_in">len</span>(word), <span class="hljs-built_in">len</span>(res)<br><br>        <span class="hljs-comment">// 字符串前缀</span><br>        <span class="hljs-keyword">if</span> wlen == <span class="hljs-number">1</span> || wordsMap[word[:wlen<span class="hljs-number">-1</span>]] &#123;<br>            wordsMap[word] = <span class="hljs-literal">true</span><br>            <span class="hljs-comment">// 更新res为最长的单词</span><br>            <span class="hljs-keyword">if</span> reslen == <span class="hljs-number">0</span> || reslen &lt; wlen &#123;<br>                res = word<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><h1 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h1><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 **最长子串 **的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: s = &quot;abcabcbb&quot;<br>输出: 3 <br>解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: s = &quot;bbbbb&quot;<br>输出: 1<br>解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。<br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: s = &quot;pwwkew&quot;<br>输出: 3<br>解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。<br></code></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: s = &quot;&quot;<br>输出: 0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><h2 id="Solution-17"><a href="#Solution-17" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    m := <span class="hljs-keyword">map</span>[<span class="hljs-type">byte</span>]<span class="hljs-type">int</span>&#123;&#125;<br>    n := <span class="hljs-built_in">len</span>(s)<br><br>    rk, ans := <span class="hljs-number">-1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-built_in">delete</span>(m,s[i<span class="hljs-number">-1</span>])<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> rk + <span class="hljs-number">1</span> &lt; n &amp;&amp; m[s[rk+<span class="hljs-number">1</span>]] == <span class="hljs-number">0</span> &#123;<br>            m[s[rk+<span class="hljs-number">1</span>]]++<br>            rk++<br>        &#125; <br><br>        ans = max(ans, rk - i + <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> x &lt; y &#123;<br>        <span class="hljs-keyword">return</span> y<br>    &#125;<br>    <span class="hljs-keyword">return</span> x<br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><hr><h1 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/">28. 实现 strStr()</a></h1><p>实现  函数。</p><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  <code>-1</code>。</p><p><strong>说明：</strong></p><p>当 <code>needle</code> 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p>对于本题而言，当 <code>needle</code> 是空字符串时我们应当返回 0 。这与 C 语言的  以及 Java 的  定义相符。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：haystack = &quot;hello&quot;, needle = &quot;ll&quot;<br>输出：2<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;<br>输出：-1<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：haystack = &quot;&quot;, needle = &quot;&quot;<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= haystack.length, needle.length &lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li></ul><h2 id="Solution-18"><a href="#Solution-18" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strStr</span><span class="hljs-params">(haystack <span class="hljs-type">string</span>, needle <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    n,m := <span class="hljs-built_in">len</span>(haystack), <span class="hljs-built_in">len</span>(needle)<br>outer:<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i + m &lt;= n; i++ &#123;<br>        <span class="hljs-keyword">for</span> j:= <span class="hljs-keyword">range</span> needle &#123;<br>            <span class="hljs-keyword">if</span> haystack[i+j] != needle[j] &#123;<br>                <span class="hljs-keyword">continue</span> outer<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></h1><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：[7,1,5,3,6,4]<br>输出：5<br>解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：prices = [7,6,4,3,1]<br>输出：0<br>解释：在这种情况下, 没有交易完成, 所以最大利润为 0。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>0 &lt;= prices[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><h2 id="Solution-19"><a href="#Solution-19" class="headerlink" title="Solution"></a>Solution</h2><p>#贪心 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(prices []<span class="hljs-type">int</span>)</span></span> (max <span class="hljs-type">int</span>) &#123;<br>    min := prices[<span class="hljs-number">0</span>]<br>    max = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _,price := <span class="hljs-keyword">range</span> prices &#123;<br>        <span class="hljs-keyword">if</span> price &lt; min &#123;<br>            min = price<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> max &gt; price - min &#123;<br>                <span class="hljs-keyword">continue</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                max = price - min<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">力扣算法高效入门（21道题-GoLang）</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Go" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Go/"/>
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="LeetCode" scheme="https://www.mingsrc.work/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Python端口占用测试（检测Socket）</title>
    <link href="https://www.mingsrc.work/posts/2498e501"/>
    <id>https://www.mingsrc.work/posts/2498e501</id>
    <published>2022-01-20T16:34:32.931Z</published>
    <updated>2022-01-23T06:59:28.864Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="windows-端口相关"><a href="#windows-端口相关" class="headerlink" title="windows 端口相关"></a>windows 端口相关</h1><h2 id="动态端口查询"><a href="#动态端口查询" class="headerlink" title="动态端口查询"></a>动态端口查询</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">netsh int ipv4 show dynamicport tcp<br><br>协议 tcp 动态端口范围<br><span class="hljs-literal">---------------------------------</span><br>启动端口        : <span class="hljs-number">49152</span><br>端口数          : <span class="hljs-number">16384</span><br></code></pre></td></tr></table></figure><h2 id="动态端口设置"><a href="#动态端口设置" class="headerlink" title="动态端口设置"></a>动态端口设置</h2><p>需要再管理员命令行下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">netsh int ipv4 <span class="hljs-built_in">set</span> dynamicport tcp <span class="hljs-built_in">start</span>=<span class="hljs-number">49152</span> num=<span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><h1 id="Python实现的端口测试接口"><a href="#Python实现的端口测试接口" class="headerlink" title="Python实现的端口测试接口"></a>Python实现的端口测试接口</h1><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-comment"># 文件名：client.py</span><br> <br><span class="hljs-keyword">from</span> ast <span class="hljs-keyword">import</span> Try<br><span class="hljs-keyword">import</span> socket               <span class="hljs-comment"># 导入 socket 模块</span><br><span class="hljs-keyword">import</span> sys<br><br>socketList = []<br><br>host = socket.gethostname() <span class="hljs-comment"># 获取本地主机名</span><br>remoteHost = <span class="hljs-string">&#x27;192.168.3.171&#x27;</span><br>remotePort = <span class="hljs-number">6000</span>                <span class="hljs-comment"># 设置端口号</span><br><br>errNum = <span class="hljs-number">0</span><br>ToTalNum = <span class="hljs-number">0</span><br>errPorts = &#123;&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请通过\&#x27;netsh int ipv4 show dynamicport tcp\&#x27;查看启动端口和端口数,一般情况下该值为49152&quot;</span>)<br>start = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;启动端口:&quot;</span>))<br>end = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;终止端口:&quot;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start , end): <br>    ToTalNum += <span class="hljs-number">1</span><br>    s = socket.socket()         <span class="hljs-comment"># 创建 socket 对象</span><br>    localHostAndPort = (host,i)<br>    <span class="hljs-keyword">try</span>:<br>        s.bind(localHostAndPort)<br>        <span class="hljs-keyword">if</span> s.connect((remoteHost, remotePort)) == socket.error:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;FAILED&#x27;</span>, i)<br>        <span class="hljs-built_in">print</span>(s.recv(<span class="hljs-number">1024</span>).decode(), i)<br>        socketList.append(s)<br>    <span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> e:<br>        errNum += <span class="hljs-number">1</span><br>        errPorts[i] = (localHostAndPort, <span class="hljs-string">&quot;OSError:&quot;</span>, e)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total Port Number(%r)&quot;</span>%ToTalNum, <span class="hljs-string">&quot;Error Port Number(%r)&quot;</span>%errNum)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error Ports:&quot;</span>)<br><span class="hljs-keyword">for</span> err <span class="hljs-keyword">in</span> errPorts.keys():<br>    <span class="hljs-built_in">print</span>(err, errPorts[err])<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(errPorts) == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All Ports success (%d) ~&quot;</span>%start, <span class="hljs-string">&quot;(%d)&quot;</span>% end)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入\&#x27;exit\&#x27;关闭CLIENT:&quot;</span>)<br>char = <span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">while</span> char != <span class="hljs-string">&quot;exit&quot;</span>:<br><span class="hljs-comment"># print(char)</span><br>char = <span class="hljs-built_in">input</span>()<br><br><span class="hljs-keyword">for</span> skt <span class="hljs-keyword">in</span> socketList:<br>    skt.close()<br><span class="hljs-comment"># print(socketList)</span><br></code></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-comment"># 文件名：server.py</span><br> <br><span class="hljs-keyword">import</span> socket               <span class="hljs-comment"># 导入 socket 模块</span><br> <br>s = socket.socket()         <span class="hljs-comment"># 创建 socket 对象</span><br>host = socket.gethostname() <span class="hljs-comment"># 获取本地主机名</span><br>port = <span class="hljs-number">12345</span>                <span class="hljs-comment"># 设置端口</span><br>s.bind((host, port))        <span class="hljs-comment"># 绑定端口</span><br><br>msg = <span class="hljs-string">&#x27;Success！&#x27;</span>  <span class="hljs-comment">#strip默认取出字符串的头尾空格</span><br> <br>s.listen(<span class="hljs-number">5</span>)                 <span class="hljs-comment"># 等待客户端连接</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    c,addr = s.accept()     <span class="hljs-comment"># 建立客户端连接</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;连接地址：&#x27;</span>, addr)<br>    c.send(msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    c.close()                <span class="hljs-comment"># 关闭连接</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一个简单的端口占用测试</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    
    <category term="python" scheme="https://www.mingsrc.work/tags/python/"/>
    
    <category term="Socket" scheme="https://www.mingsrc.work/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>力扣高效算法入门</title>
    <link href="https://www.mingsrc.work/posts/8cb5320c"/>
    <id>https://www.mingsrc.work/posts/8cb5320c</id>
    <published>2022-01-17T14:20:54.265Z</published>
    <updated>2022-01-27T14:43:15.601Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><hr><h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h1><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em>  的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [3,3], target = 6<br>输出：[0,1]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= target &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n&lt;sup&gt;2&lt;/sup&gt;)</code> 的算法吗？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">for</span> i,x := <span class="hljs-keyword">range</span> nums &#123;<br>        <span class="hljs-keyword">for</span> j := i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">len</span>(nums); j++ &#123;<br>            <span class="hljs-keyword">if</span> x+nums[j] == target &#123;<br>                <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;i,j&#125; <br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a></h1><p>给定一个已按照**非递减顺序排列 ** 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p><p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值_。_<code>numbers</code> 的下标 <strong>从 1 开始计数</strong> ，所以答案数组应当满足 <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length</code> 。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你 <strong>不可以</strong> 重复使用相同的元素。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：numbers = [2,7,11,15], target = 9<br>输出：[1,2]<br>解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：numbers = [2,3,4], target = 6<br>输出：[1,3]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：numbers = [-1,0], target = -1<br>输出：[1,2]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> 按 <strong>非递减顺序</strong> 排列</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li><strong>仅存在一个有效答案</strong></li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>#双指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(numbers []<span class="hljs-type">int</span>, target <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    left,right := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(numbers) - <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">for</span> left &lt; right &#123;<br>        sum := numbers[left] + numbers [right]<br>        <span class="hljs-keyword">if</span> sum == target &#123;<br>            <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;left + <span class="hljs-number">1</span>, right + <span class="hljs-number">1</span>&#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> sum &lt; target &#123;<br>            left++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right--<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> []<span class="hljs-type">int</span>&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h1><p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 _a，b，c ，_使得 <em>a + b + c &#x3D;</em> 0 ？请你找出所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = []<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [0]<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 3000</code></li><li><code>-10&lt;sup&gt;5&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li></ul><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>#三指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go">class Solution &#123;<br>public:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; threeSum(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-comment">// 先排序</span><br>        <span class="hljs-type">int</span> n = nums.size();<br>        sort(nums.begin(), nums.end());<br><br>        <span class="hljs-comment">// 定义首指针==target</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> ( i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>]) <br>                <span class="hljs-keyword">continue</span>;<br>            <br>            <span class="hljs-type">int</span> k = n - <span class="hljs-number">1</span>; <span class="hljs-comment">// 内层首指针</span><br>            <span class="hljs-type">int</span> target = -nums[i];<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) <span class="hljs-comment">// 内层尾指针</span><br>            &#123; <br>                <span class="hljs-keyword">if</span>( j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j<span class="hljs-number">-1</span>]) <br>                    <span class="hljs-keyword">continue</span>;<br><br>                while (j &lt; k &amp;&amp; nums[j] + nums[k] &gt; target) &#123; <span class="hljs-comment">// 遍历尾指针，找合适序列</span><br>                    --k;<br>                &#125;<br><br>                <span class="hljs-comment">// 当前i不满足</span><br>                <span class="hljs-keyword">if</span>(j == k) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 得到符合条件序列</span><br>                <span class="hljs-keyword">if</span>(nums[j] + nums[k] == target) &#123;<br>                    ans.push_back(&#123;nums[i],nums[j],nums[k]&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode-cn.com/problems/4sum/">18. 四数之和</a></h1><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [1,0,-1,0,-2,2], target = 0<br>输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [2,2,2,2,2], target = 8<br>输出：[[2,2,2,2]]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= target &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li></ul><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go">class Solution &#123;<br>public:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; fourSum(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-type">int</span> n = nums.size();<br>        <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">return</span> ans;<br>        sort(nums.begin(), nums.end());<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>])<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> ((long) nums[i] + nums[i + <span class="hljs-number">1</span>] + nums[i + <span class="hljs-number">2</span>] + nums[i + <span class="hljs-number">3</span>] &gt; target) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((long) nums[i] + nums[n - <span class="hljs-number">3</span>] + nums[n - <span class="hljs-number">2</span>] + nums[n - <span class="hljs-number">1</span>] &lt; target) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n - <span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j<span class="hljs-number">-1</span>])<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> ((long) nums[i] + nums[j] + nums[j + <span class="hljs-number">1</span>] + nums[j + <span class="hljs-number">2</span>] &gt; target) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> ((long) nums[i] + nums[j] + nums[n - <span class="hljs-number">2</span>] + nums[n - <span class="hljs-number">1</span>] &lt; target) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 最内层首尾指针</span><br>                <span class="hljs-type">int</span> m = n - <span class="hljs-number">1</span>, k = j + <span class="hljs-number">1</span>;<br>                while(k &lt; m) &#123;<br>                    <span class="hljs-type">int</span> sum = nums[i] + nums[j] + nums[k] + nums[m];<br>                    <span class="hljs-keyword">if</span> (sum == target) &#123;<br>                        ans.push_back(&#123;nums[i], nums[j], nums[k], nums[m]&#125;);<br>                        while (k &lt; m &amp;&amp; nums[k] == nums[k + <span class="hljs-number">1</span>]) &#123;<br>                            k++;<br>                        &#125;<br>                        k++;<br>                        while (k &lt; m &amp;&amp; nums[m] == nums[m - <span class="hljs-number">1</span>]) &#123;<br>                            m--;<br>                        &#125;<br>                        m--;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; target) &#123;<br>                        k++;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        m--;<br>                    &#125;<br>                &#125; <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a><a href="https://leetcode-cn.com/problems/fibonacci-number/">509. 斐波那契数</a></h1><p><strong>斐波那契数</strong>，通常用 <code>F(n)</code> 表示，形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">F(0) = 0，F(1) = 1<br>F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1<br></code></pre></td></tr></table></figure><p>给你 <code>n</code> ，请计算 <code>F(n)</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：2<br>输出：1<br>解释：F(2) = F(1) + F(0) = 1 + 0 = 1<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：3<br>输出：2<br>解释：F(3) = F(2) + F(1) = 1 + 1 = 2<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：4<br>输出：3<br>解释：F(4) = F(3) + F(2) = 2 + 1 = 3<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 30</code></li></ul><h2 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fib</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> fib(n<span class="hljs-number">-2</span>) + fib(n<span class="hljs-number">-1</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a></h1><p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>注意：</strong>给定 <em>n</em> 是一个正整数。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。<br>1\.  1 阶 + 1 阶<br>2\.  2 阶<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。<br>1\.  1 阶 + 1 阶 + 1 阶<br>2\.  1 阶 + 2 阶<br>3\.  2 阶 + 1 阶<br></code></pre></td></tr></table></figure><h2 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span> &#123;<br>        <span class="hljs-keyword">return</span> n<br>    &#125;<br>    pre1,pre2 := <span class="hljs-number">2</span>,<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">2</span>; i &lt; n; i++ &#123;<br>        cur := pre1 + pre2<br>        pre2 = pre1<br>        pre1 = cur<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre1<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子数组和</a></h1><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [1]<br>输出：1<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [5,4,-1,7,8]<br>输出：23<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;4&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><p><strong>进阶：</strong>如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p><h2 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    sum := nums[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;<br>        <span class="hljs-keyword">if</span> nums[i] + nums[i<span class="hljs-number">-1</span>] &gt; nums[i] &#123;<br>            nums[i] += nums[i<span class="hljs-number">-1</span>]<br>        &#125;<br>        <span class="hljs-keyword">if</span>  nums[i] &gt; sum &#123;<br>            sum = nums[i]<br>        &#125;<br>    &#125;  <br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h1><p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [1,5,11,5]<br>输出：true<br>解释：数组可以分割成 [1, 5, 5] 和 [11] 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [1,2,3,5]<br>输出：false<br>解释：数组不能分割成两个元素和相等的子集。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划 #背包问题 #difficult</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(nums)<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    sum, maxNum := <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _,num := <span class="hljs-keyword">range</span> nums &#123;<br>        sum += num<br>        <span class="hljs-keyword">if</span> num &gt; maxNum &#123;<br>            maxNum = num<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断总和是不是奇数</span><br>    <span class="hljs-keyword">if</span> sum%<span class="hljs-number">2</span> != <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    target := sum / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> target &lt; maxNum &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <br>    dp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">bool</span>, target+<span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        v := nums[i]<br>        <span class="hljs-keyword">for</span> j := target; j &gt;= v; j-- &#123;<br>            dp[j] = dp[j] || dp[j-v]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[target]<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a><a href="https://leetcode-cn.com/problems/coin-change/">322. 零钱兑换</a></h1><p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> 。</p><p>你可以认为每种硬币的数量是无限的。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：coins = [1, 2, 5], amount = 11<br>输出：3 <br>解释：11 = 5 + 5 + 1<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：coins = [2], amount = 3<br>输出：-1<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：coins = [1], amount = 0<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：coins = [1], amount = 1<br>输出：1<br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：coins = [1], amount = 2<br>输出：2<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 12</code></li><li><code>1 &lt;= coins[i] &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code></li><li><code>0 &lt;= amount &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><h2 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(coins []<span class="hljs-type">int</span>, amount <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    dp := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, amount + <span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>    <span class="hljs-comment">// 初始化为math.MaxInt32</span><br><span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= amount; j++ &#123;<br>dp[j] = math.MaxInt32<br>&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(coins); i++ &#123;<br>        <span class="hljs-keyword">for</span> j := coins[i]; j &lt;= amount ; j++ &#123;<br>            <span class="hljs-keyword">if</span> dp[j-coins[i]] != math.MaxInt32 &#123;<br>                dp[j] = min(dp[j], dp[j-coins[i]]+<span class="hljs-number">1</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 没找到能装满背包的, 就返回-1</span><br><span class="hljs-keyword">if</span> dp[amount] == math.MaxInt32 &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-keyword">return</span> dp[amount]<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">min</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> a &lt; b&#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h1><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;()&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;()[]&#123;&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;(]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;([)]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;&#123;[]&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li></ul><h2 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h2><p>#栈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(s)<br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    pairs := <span class="hljs-keyword">map</span>[<span class="hljs-type">byte</span>]<span class="hljs-type">byte</span> &#123;<br>        <span class="hljs-string">&#x27;)&#x27;</span>:<span class="hljs-string">&#x27;(&#x27;</span>,<br>        <span class="hljs-string">&#x27;]&#x27;</span>:<span class="hljs-string">&#x27;[&#x27;</span>,<br>        <span class="hljs-string">&#x27;&#125;&#x27;</span>:<span class="hljs-string">&#x27;&#123;&#x27;</span>,<br>    &#125;<br><br>    stack := []<span class="hljs-type">byte</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">if</span> pairs[s[i]] &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span> || stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] != pairs[s[i]] &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>            stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            stack = <span class="hljs-built_in">append</span>(stack,s[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="20-有效的括号-1"><a href="#20-有效的括号-1" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h1><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;()&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;()[]&#123;&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;(]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;([)]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;&#123;[]&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li></ul><h2 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h2><p>#栈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(s)<br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    pairs := <span class="hljs-keyword">map</span>[<span class="hljs-type">byte</span>]<span class="hljs-type">byte</span> &#123;<br>        <span class="hljs-string">&#x27;)&#x27;</span>:<span class="hljs-string">&#x27;(&#x27;</span>,<br>        <span class="hljs-string">&#x27;]&#x27;</span>:<span class="hljs-string">&#x27;[&#x27;</span>,<br>        <span class="hljs-string">&#x27;&#125;&#x27;</span>:<span class="hljs-string">&#x27;&#123;&#x27;</span>,<br>    &#125;<br><br>    stack := []<span class="hljs-type">byte</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">if</span> pairs[s[i]] &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span> || stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] != pairs[s[i]] &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>            stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            stack = <span class="hljs-built_in">append</span>(stack,s[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496. 下一个更大元素 I"></a><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496. 下一个更大元素 I</a></h1><p><code>nums1</code> 中数字 <code>x</code> 的 <strong>下一个更大元素</strong> 是指 <code>x</code> 在 <code>nums2</code> 中对应位置 <strong>右侧</strong> 的 <strong>第一个</strong> 比 <code>x</code>大的元素。</p><p>给你两个 <strong>没有重复元素</strong> 的数组 <code>nums1</code> 和 <code>nums2</code> ，下标从 <strong>0</strong> 开始计数，其中<code>nums1</code> 是 <code>nums2</code> 的子集。</p><p>对于每个 <code>0 &lt;= i &lt; nums1.length</code> ，找出满足 <code>nums1[i] == nums2[j]</code> 的下标 <code>j</code> ，并且在 <code>nums2</code> 确定 <code>nums2[j]</code> 的 <strong>下一个更大元素</strong> 。如果不存在下一个更大元素，那么本次查询的答案是 <code>-1</code> 。</p><p>返回一个长度为 <code>nums1.length</code> 的数组<code>ans</code>作为答案，满足<code>ans[i]</code>是如上所述的 <strong>下一个更大元素</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums1 = [4,1,2], nums2 = [1,3,4,2].<br>输出：[-1,3,-1]<br>解释：nums1 中每个值的下一个更大元素如下所述：<br>- 4 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。<br>- 1 ，用加粗斜体标识，nums2 = [1,3,4,2]。下一个更大元素是 3 。<br>- 2 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums1 = [2,4], nums2 = [1,2,3,4].<br>输出：[3,-1]<br>解释：nums1 中每个值的下一个更大元素如下所述：<br>- 2 ，用加粗斜体标识，nums2 = [1,2,3,4]。下一个更大元素是 3 。<br>- 4 ，用加粗斜体标识，nums2 = [1,2,3,4]。不存在下一个更大元素，所以答案是 -1 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>nums1</code>和<code>nums2</code>中所有整数 <strong>互不相同</strong></li><li><code>nums1</code> 中的所有整数同样出现在 <code>nums2</code> 中</li></ul><p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(nums1.length + nums2.length)</code> 的解决方案吗？</p><h2 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h2><p>&#x2F;#暴力解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">nextGreaterElement</span><span class="hljs-params">(nums1 []<span class="hljs-type">int</span>, nums2 []<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    m,n := <span class="hljs-built_in">len</span>(nums1),<span class="hljs-built_in">len</span>(nums2)<br>    res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, m)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; m; i++ &#123;<br>        j := <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j &lt; n &amp;&amp; nums2[j] != nums1[i] &#123;<br>            j++<br>        &#125;<br>        k := j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> k &lt; n &amp;&amp; nums2[k] &lt; nums2[j] &#123;<br>            k++<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> k &lt; n &#123;<br>            res[i] = nums2[k]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res[i] = <span class="hljs-number">-1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="456-132-模式"><a href="#456-132-模式" class="headerlink" title="456. 132 模式"></a><a href="https://leetcode-cn.com/problems/132-pattern/">456. 132 模式</a></h1><p>给你一个整数数组 <code>nums</code> ，数组中共有 <code>n</code> 个整数。<strong>132 模式的子序列</strong> 由三个整数 <code>nums[i]</code>、<code>nums[j]</code> 和 <code>nums[k]</code> 组成，并同时满足：<code>i &lt; j &lt; k</code> 和 <code>nums[i] &lt; nums[k] &lt; nums[j]</code> 。</p><p>如果 <code>nums</code> 中存在 <strong>132 模式的子序列</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [1,2,3,4]<br>输出：false<br>解释：序列中不存在 132 模式的子序列。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [3,1,4,2]<br>输出：true<br>解释：序列中有 1 个 132 模式的子序列： [1, 4, 2] 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：nums = [-1,3,2,0]<br>输出：true<br>解释：序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 2 * 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li></ul><h4 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h4><p>#栈 #单调栈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">find132pattern</span><span class="hljs-params">(nums []<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(nums)<br>    candidateK := []<span class="hljs-type">int</span>&#123;nums[n<span class="hljs-number">-1</span>]&#125;<br><br>    maxK := math.MinInt64<br><br>    <span class="hljs-keyword">for</span> i := n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br>        <span class="hljs-keyword">if</span> nums[i] &lt; maxK &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(candidateK) &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt; candidateK[<span class="hljs-built_in">len</span>(candidateK)<span class="hljs-number">-1</span>] &#123;<br>            maxK = candidateK[<span class="hljs-built_in">len</span>(candidateK)<span class="hljs-number">-1</span>]<br>            candidateK = candidateK[:<span class="hljs-built_in">len</span>(candidateK)<span class="hljs-number">-1</span>]<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> nums[i] &gt; maxK &#123;<br>            candidateK = <span class="hljs-built_in">append</span>(candidateK, nums[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="119-杨辉三角-II"><a href="#119-杨辉三角-II" class="headerlink" title="119. 杨辉三角 II"></a><a href="https://leetcode-cn.com/problems/pascals-triangle-ii/">119. 杨辉三角 II</a></h1><p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code>行。</p><p><small style="display: inline;">在「杨辉三角」中，每个数是它左上方和右上方的数的和。</small></p><p><img src="https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif"></p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: rowIndex = 3<br>输出: [1,3,3,1]<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: rowIndex = 0<br>输出: [1]<br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: rowIndex = 1<br>输出: [1,1]<br></code></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>0 &lt;= rowIndex &lt;= 33</code></li></ul><p><strong>进阶：</strong></p><p>你可以优化你的算法到 <code>_O_(_rowIndex_)</code> 空间复杂度吗？</p><h2 id="Solution-13"><a href="#Solution-13" class="headerlink" title="Solution"></a>Solution</h2><p>#数学</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getRow</span><span class="hljs-params">(rowIndex <span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br>    C := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int</span>, rowIndex+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> C &#123;<br>        C[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>,i+<span class="hljs-number">1</span>)<br>        C[i][<span class="hljs-number">0</span>],C[i][i] = <span class="hljs-number">1</span>,<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt; i; j++ &#123;<br>            C[i][j] = C[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + C[i<span class="hljs-number">-1</span>][j]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> C[rowIndex]<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a><a href="https://leetcode-cn.com/problems/perfect-squares/">279. 完全平方数</a></h1><p>给定正整数 _n_，找到若干个完全平方数（比如 <code>1, 4, 9, 16, ...</code>）使得它们的和等于 _n_。你需要让组成和的完全平方数的个数最少。</p><p>给你一个整数 <code>n</code> ，返回和为 <code>n</code> 的完全平方数的 <strong>最少数量</strong> 。</p><p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：n = 12<br>输出：3 <br>解释：12 = 4 + 4 + 4<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：n = 13<br>输出：2<br>解释：13 = 4 + 9<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><h2 id="Solution-14"><a href="#Solution-14" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">numSquares</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    f := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= n; i++ &#123;<br>        minn := math.MaxInt32<br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j*j &lt;= i; j++ &#123;<br>            minn = min(minn, f[i-j*j])<br>        &#125;<br>        f[i] = minn + <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> f[n]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">min</span><span class="hljs-params">(a,b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> a &lt; b &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><h1 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a><a href="https://leetcode-cn.com/problems/path-sum/">112. 路径总和</a></h1><p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22<br>输出：true<br>解释：等于目标和的根节点到叶节点路径如上图所示。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：root = [1,2,3], targetSum = 5<br>输出：false<br>解释：树中存在两条根节点到叶子节点的路径：<br>(1 --&gt; 2): 和为 3<br>(1 --&gt; 3): 和为 4<br>不存在 sum = 5 的根节点到叶子节点的路径。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：root = [], targetSum = 0<br>输出：false<br>解释：由于树是空的，所以不存在根节点到叶子节点的路径。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点的数目在范围 <code>[0, 5000]</code> 内</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li><li><code>-1000 &lt;= targetSum &lt;= 1000</code></li></ul><h2 id="Solution-15"><a href="#Solution-15" class="headerlink" title="Solution"></a>Solution</h2><p>#广度搜索</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasPathSum</span><span class="hljs-params">(root *TreeNode, targetSum <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    queNode := []*TreeNode&#123;&#125;<br>    queVal := []<span class="hljs-type">int</span>&#123;&#125;<br>    queNode = <span class="hljs-built_in">append</span>(queNode,root)<br>    queVal = <span class="hljs-built_in">append</span>(queVal,root.Val)<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queNode) != <span class="hljs-number">0</span> &#123;<br>        now := queNode[<span class="hljs-number">0</span>]<br>        queNode = queNode[<span class="hljs-number">1</span>:]<br>        temp := queVal[<span class="hljs-number">0</span>]<br>        queVal = queVal[<span class="hljs-number">1</span>:]<br><br>        <span class="hljs-keyword">if</span> now.Left == <span class="hljs-literal">nil</span> &amp;&amp; now.Right == <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">if</span> temp == targetSum &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> now.Left != <span class="hljs-literal">nil</span> &#123;<br>            queNode = <span class="hljs-built_in">append</span>(queNode,now.Left)<br>            queVal = <span class="hljs-built_in">append</span>(queVal,now.Left.Val + temp)<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> now.Right != <span class="hljs-literal">nil</span> &#123;<br>            queNode = <span class="hljs-built_in">append</span>(queNode, now.Right)<br>            queVal = <span class="hljs-built_in">append</span>(queVal, now.Right.Val + temp)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><hr><h1 id="720-词典中最长的单词"><a href="#720-词典中最长的单词" class="headerlink" title="720. 词典中最长的单词"></a><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary/">720. 词典中最长的单词</a></h1><p>给出一个字符串数组<code>words</code>组成的一本英语词典。从中找出最长的一个单词，该单词是由<code>words</code>词典中其他单词逐步添加一个字母组成。若其中有多个可行的答案，则返回答案中字典序最小的单词。</p><p>若无答案，则返回空字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：<br>words = [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;, &quot;world&quot;]<br>输出：&quot;world&quot;<br>解释： <br>单词&quot;world&quot;可由&quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, 和 &quot;worl&quot;添加一个字母组成。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：<br>words = [&quot;a&quot;, &quot;banana&quot;, &quot;app&quot;, &quot;appl&quot;, &quot;ap&quot;, &quot;apply&quot;, &quot;apple&quot;]<br>输出：&quot;apple&quot;<br>解释：<br>&quot;apply&quot;和&quot;apple&quot;都能由词典中的单词组成。但是&quot;apple&quot;的字典序小于&quot;apply&quot;。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>所有输入的字符串都只包含小写字母。</li><li><code>words</code>数组长度范围为<code>[1,1000]</code>。</li><li><code>words[i]</code>的长度范围为<code>[1,30]</code>。</li></ul><h4 id="Solution-16"><a href="#Solution-16" class="headerlink" title="Solution"></a>Solution</h4><p>Language: ****</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longestWord</span><span class="hljs-params">(words []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-comment">// 排序哈希</span><br>    sort.Strings(words)<br><br>    <span class="hljs-comment">// 字符串/是否出现</span><br>    wordsMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br>    res := <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> _,word := <span class="hljs-keyword">range</span> words &#123;<br>        wlen, reslen := <span class="hljs-built_in">len</span>(word), <span class="hljs-built_in">len</span>(res)<br><br>        <span class="hljs-comment">// 字符串前缀</span><br>        <span class="hljs-keyword">if</span> wlen == <span class="hljs-number">1</span> || wordsMap[word[:wlen<span class="hljs-number">-1</span>]] &#123;<br>            wordsMap[word] = <span class="hljs-literal">true</span><br>            <span class="hljs-comment">// 更新res为最长的单词</span><br>            <span class="hljs-keyword">if</span> reslen == <span class="hljs-number">0</span> || reslen &lt; wlen &#123;<br>                res = word<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><hr><hr><hr><h1 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/">28. 实现 strStr()</a></h1><p>实现  函数。</p><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  <code>-1</code>。</p><p><strong>说明：</strong></p><p>当 <code>needle</code> 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p>对于本题而言，当 <code>needle</code> 是空字符串时我们应当返回 0 。这与 C 语言的  以及 Java 的  定义相符。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：haystack = &quot;hello&quot;, needle = &quot;ll&quot;<br>输出：2<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;<br>输出：-1<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：haystack = &quot;&quot;, needle = &quot;&quot;<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= haystack.length, needle.length &lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li></ul><h2 id="Solution-17"><a href="#Solution-17" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strStr</span><span class="hljs-params">(haystack <span class="hljs-type">string</span>, needle <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    n,m := <span class="hljs-built_in">len</span>(haystack), <span class="hljs-built_in">len</span>(needle)<br>outer:<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i + m &lt;= n; i++ &#123;<br>        <span class="hljs-keyword">for</span> j:= <span class="hljs-keyword">range</span> needle &#123;<br>            <span class="hljs-keyword">if</span> haystack[i+j] != needle[j] &#123;<br>                <span class="hljs-keyword">continue</span> outer<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h1><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 **最长子串 **的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: s = &quot;abcabcbb&quot;<br>输出: 3 <br>解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: s = &quot;bbbbb&quot;<br>输出: 1<br>解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。<br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: s = &quot;pwwkew&quot;<br>输出: 3<br>解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。<br></code></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: s = &quot;&quot;<br>输出: 0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><h2 id="Solution-18"><a href="#Solution-18" class="headerlink" title="Solution"></a>Solution</h2><p>Language: ****</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    m := <span class="hljs-keyword">map</span>[<span class="hljs-type">byte</span>]<span class="hljs-type">int</span>&#123;&#125;<br>    n := <span class="hljs-built_in">len</span>(s)<br><br>    rk, ans := <span class="hljs-number">-1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-built_in">delete</span>(m,s[i<span class="hljs-number">-1</span>])<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> rk + <span class="hljs-number">1</span> &lt; n &amp;&amp; m[s[rk+<span class="hljs-number">1</span>]] == <span class="hljs-number">0</span> &#123;<br>            m[s[rk+<span class="hljs-number">1</span>]]++<br>            rk++<br>        &#125; <br><br>        ans = max(ans, rk - i + <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">if</span> x &lt; y &#123;<br>        <span class="hljs-keyword">return</span> y<br>    &#125;<br>    <span class="hljs-keyword">return</span> x<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Go刷题笔记_Init_Come on!!!</summary>
    
    
    
    <category term="Go" scheme="https://www.mingsrc.work/categories/Go/"/>
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/Go/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="刷题笔记" scheme="https://www.mingsrc.work/categories/Go/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="LeetCode" scheme="https://www.mingsrc.work/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>(Golang)链表学习记录</title>
    <link href="https://www.mingsrc.work/posts/85980731"/>
    <id>https://www.mingsrc.work/posts/85980731</id>
    <published>2022-01-16T04:11:08.436Z</published>
    <updated>2022-01-27T14:37:30.913Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><hr><h1 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></h1><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = [3,2,0,-4], pos = 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = [1,2], pos = 0<br>输出：true<br>解释：链表中有一个环，其尾部连接到第一个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = [1], pos = -1<br>输出：false<br>解释：链表中没有环。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 10&lt;sup&gt;4&lt;/sup&gt;]</code></li><li><code>-10&lt;sup&gt;5&lt;/sup&gt; &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li></ul><p><strong>进阶：</strong>你能用 <code>O(1)</code>（即，常量）内存解决此问题吗？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>#快慢指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(head *ListNode)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-comment">// 快慢指针</span><br>    <span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    slow, fast := head, head.Next<br><br>    <span class="hljs-keyword">for</span> fast != slow &#123;<br>        <span class="hljs-keyword">if</span> fast == <span class="hljs-literal">nil</span> || fast.Next == <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br><br>        slow = slow.Next<br>        fast = fast.Next.Next<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h1><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改</strong> 链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = [3,2,0,-4], pos = 1<br>输出：返回索引为 1 的链表节点<br>解释：链表中有一个环，其尾部连接到第二个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = [1,2], pos = 0<br>输出：返回索引为 0 的链表节点<br>解释：链表中有一个环，其尾部连接到第一个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = [1], pos = -1<br>输出：返回 null<br>解释：链表中没有环。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 10&lt;sup&gt;4&lt;/sup&gt;]</code> 内</li><li><code>-10&lt;sup&gt;5&lt;/sup&gt; &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul><p><strong>进阶：</strong>你是否可以使用 <code>O(1)</code> 空间解决此题？</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">detectCycle</span><span class="hljs-params">(head *ListNode)</span></span> *ListNode &#123;<br>    seen := <span class="hljs-keyword">map</span>[*ListNode]<span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>    <span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">if</span> _,ok := seen[head]; ok &#123;<br>            <span class="hljs-keyword">return</span> head<br>        &#125;<br>        seen[head] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>        head = head.Next<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>#快慢指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">detectCycle</span><span class="hljs-params">(head *ListNode)</span></span> *ListNode &#123;<br>    slow, fast := head, head<br>    <span class="hljs-keyword">for</span> fast != <span class="hljs-literal">nil</span> &#123;<br>        slow = slow.Next<br>        <span class="hljs-keyword">if</span> fast.Next == <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>        &#125;<br>        fast = fast.Next.Next<br><br>        <span class="hljs-keyword">if</span> fast == slow &#123;<br>            p := head<br>            <span class="hljs-keyword">for</span> p != slow &#123;<br>                p = p.Next<br>                slow = slow.Next<br>            &#125;<br>            <span class="hljs-keyword">return</span> p<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">160. 相交链表</a></h1><p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p><strong>自定义评测：</strong></p><p><strong>评测系统</strong> 的输入如下（你设计的程序 <strong>不适用</strong> 此输入）：</p><ul><li><code>intersectVal</code> - 相交的起始节点的值。如果不存在相交节点，这一值为 <code>0</code></li><li><code>listA</code> - 第一个链表</li><li><code>listB</code> - 第二个链表</li><li><code>skipA</code> - 在 <code>listA</code> 中（从头节点开始）跳到交叉节点的节点数</li><li><code>skipB</code> - 在 <code>listB</code> 中（从头节点开始）跳到交叉节点的节点数</li></ul><p>评测系统将根据这些输入创建链式数据结构，并将两个头节点 <code>headA</code> 和 <code>headB</code> 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 <strong>视作正确答案</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3<br>输出：Intersected at &#x27;8&#x27;<br>解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。<br>在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br>输出：Intersected at &#x27;2&#x27;<br>解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。<br>在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br>输出：null<br>解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。<br>由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>这两个链表不相交，因此返回 null 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>listA</code> 中节点数目为 <code>m</code></li><li><code>listB</code> 中节点数目为 <code>n</code></li><li><code>1 &lt;= m, n &lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>1 &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>0 &lt;= skipA &lt;= m</code></li><li><code>0 &lt;= skipB &lt;= n</code></li><li>如果 <code>listA</code> 和 <code>listB</code> 没有交点，<code>intersectVal</code> 为 <code>0</code></li><li>如果 <code>listA</code> 和 <code>listB</code> 有交点，<code>intersectVal == listA[skipA] == listB[skipB]</code></li></ul><p><strong>进阶：</strong>你能否设计一个时间复杂度 <code>O(m + n)</code> 、仅用 <code>O(1)</code> 内存的解决方案？</p><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(headA, headB *ListNode)</span></span> *ListNode &#123;<br>    <span class="hljs-keyword">if</span> headA == <span class="hljs-literal">nil</span> || headB == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br><br>    pa,pb := headA, headB<br>    <span class="hljs-keyword">for</span> pa != pb &#123;<br>        <span class="hljs-keyword">if</span> pa == <span class="hljs-literal">nil</span> &#123;<br>            pa = headB<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            pa = pa.Next<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> pb == <span class="hljs-literal">nil</span> &#123;<br>            pb = headA<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            pb = pb.Next<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pa<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h1><p>Difficulty: **给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。   示例 1： 输入：head &#x3D; [1,2,3,4,5], n &#x3D; 2 输出：[1,2,3,5] 示例 2： 输入：head &#x3D; [1], n &#x3D; 1 输出：[] 示例 3： 输入：head &#x3D; [1,2], n &#x3D; 1 输出：[1]   提示： 链表中结点的数目为 sz 1 &lt;&#x3D; sz &lt;&#x3D; 30 0 &lt;&#x3D; Node.val &lt;&#x3D; 100 1 &lt;&#x3D; n &lt;&#x3D; sz   进阶：你能尝试使用一趟扫描实现吗？ **</p><p>给你一个链表，删除链表的倒数第 <code>n</code>个结点，并且返回链表的头结点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = [1,2,3,4,5], n = 2<br>输出：[1,2,3,5]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = [1], n = 1<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = [1,2], n = 1<br>输出：[1]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中结点的数目为 <code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><p>#双指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> cur <span class="hljs-type">int</span> = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(head *ListNode, n <span class="hljs-type">int</span>)</span></span> *ListNode &#123;<br>    dummy := &amp;ListNode&#123;<span class="hljs-number">0</span>,head&#125;<br>    first, second := head, dummy<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        first = first.Next<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> ; first != <span class="hljs-literal">nil</span>; first = first.Next &#123;<br>        second = second.Next<br>    &#125;<br><br>    second.Next = second.Next.Next<br>    <span class="hljs-keyword">return</span> dummy.Next<br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><hr>]]></content>
    
    
    <summary type="html">力扣链表学习记录，使用Golang的数据结构入门</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Go" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Go/"/>
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="LeetCode" scheme="https://www.mingsrc.work/tags/LeetCode/"/>
    
    <category term="链表" scheme="https://www.mingsrc.work/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>力扣每日一题</title>
    <link href="https://www.mingsrc.work/posts/206c9e3b"/>
    <id>https://www.mingsrc.work/posts/206c9e3b</id>
    <published>2022-01-16T04:06:45.329Z</published>
    <updated>2022-01-23T06:59:28.876Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[Toc]</p><h1 id="382-链表随机节点"><a href="#382-链表随机节点" class="headerlink" title="382. 链表随机节点"></a><a href="https://leetcode-cn.com/problems/linked-list-random-node/">382. 链表随机节点</a></h1><p>给你一个单链表，随机选择链表的一个节点，并返回相应的节点值。每个节点 <strong>被选中的概率一样</strong> 。</p><p>实现 <code>Solution</code> 类：</p><ul><li><code>Solution(ListNode head)</code> 使用整数数组初始化对象。</li><li><code>int getRandom()</code> 从链表中随机选择一个节点并返回该节点的值。链表中所有节点被选中的概率相等。</li></ul><p><strong>示例：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/16/getrand-linked-list.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入<br>[&quot;Solution&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;]<br>[[[1, 2, 3]], [], [], [], [], []]<br>输出<br>[null, 1, 3, 2, 2, 3]<br><br>解释<br>Solution solution = new Solution([1, 2, 3]);<br>solution.getRandom(); // 返回 1<br>solution.getRandom(); // 返回 3<br>solution.getRandom(); // 返回 2<br>solution.getRandom(); // 返回 2<br>solution.getRandom(); // 返回 3<br>// getRandom() 方法应随机返回 1、2、3中的一个，每个元素被返回的概率相等。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中的节点数在范围 <code>[1, 10&lt;sup&gt;4&lt;/sup&gt;]</code> 内</li><li><code>-10&lt;sup&gt;4&lt;/sup&gt; &lt;= Node.val &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li>至多调用 <code>getRandom</code> 方法 <code>10&lt;sup&gt;4&lt;/sup&gt;</code> 次</li></ul><p><strong>进阶：</strong></p><ul><li>如果链表非常大且长度未知，该怎么处理？</li><li>你能否在不使用额外空间的情况下解决此问题？</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>#链表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> Solution []<span class="hljs-type">int</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">(head *ListNode)</span></span> (s Solution) &#123;<br>    <span class="hljs-keyword">for</span> node := head; node != <span class="hljs-literal">nil</span>; node = node.Next &#123;<br>        s = <span class="hljs-built_in">append</span>(s, node.Val)<br>    &#125;<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s Solution)</span></span> GetRandom() <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">return</span> s[rand.Intn(<span class="hljs-built_in">len</span>(s))]<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your Solution object will be instantiated and called as such:</span><br><span class="hljs-comment"> * obj := Constructor(head);</span><br><span class="hljs-comment"> * param_1 := obj.GetRandom();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="LeetCode" scheme="https://www.mingsrc.work/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Go_hard_Algorithm</title>
    <link href="https://www.mingsrc.work/posts/24feca74"/>
    <id>https://www.mingsrc.work/posts/24feca74</id>
    <published>2022-01-08T17:57:48.928Z</published>
    <updated>2022-01-08T18:32:19.294Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="913-猫和老鼠-图-dfs-dp"><a href="#913-猫和老鼠-图-dfs-dp" class="headerlink" title="913. 猫和老鼠 #图 #dfs #dp"></a><a href="https://leetcode-cn.com/problems/cat-and-mouse/">913. 猫和老鼠</a> #图 #dfs #dp</h1><p>两位玩家分别扮演猫和老鼠，在一张 <strong>无向</strong> 图上进行游戏，两人轮流行动。</p><p>图的形式是：<code>graph[a]</code> 是一个列表，由满足 <code>ab</code> 是图中的一条边的所有节点 <code>b</code> 组成。</p><p>老鼠从节点 <code>1</code> 开始，第一个出发；猫从节点 <code>2</code> 开始，第二个出发。在节点 <code>0</code> 处有一个洞。</p><p>在每个玩家的行动中，他们 <strong>必须</strong> 沿着图中与所在当前位置连通的一条边移动。例如，如果老鼠在节点 <code>1</code> ，那么它必须移动到 <code>graph[1]</code> 中的任一节点。</p><p>此外，猫无法移动到洞中（节点 <code>0</code>）。</p><p>然后，游戏在出现以下三种情形之一时结束：</p><ul><li>如果猫和老鼠出现在同一个节点，猫获胜。</li><li>如果老鼠到达洞中，老鼠获胜。</li><li>如果某一位置重复出现（即，玩家的位置和移动顺序都与上一次行动相同），游戏平局。</li></ul><p>给你一张图 <code>graph</code> ，并假设两位玩家都都以最佳状态参与游戏：</p><ul><li>如果老鼠获胜，则返回 <code>1</code>；</li><li>如果猫获胜，则返回 <code>2</code>；</li><li>如果平局，则返回 <code>0</code> 。</li></ul><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/17/cat1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/17/cat2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：graph = [[1,3],[0],[3],[0,2]]<br>输出：1<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= graph.length &lt;= 50</code></li><li><code>1 &lt;= graph[i].length &lt; graph.length</code></li><li><code>0 &lt;= graph[i][j] &lt; graph.length</code></li><li><code>graph[i][j] != i</code></li><li><code>graph[i]</code> 互不相同</li><li>猫和老鼠在游戏中总是移动</li></ul><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOUSE_WIN = <span class="hljs-number">1</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> CAT_WIN = <span class="hljs-number">2</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> DRAW = <span class="hljs-number">0</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">51</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> dp[MAXN][MAXN][MAXN*<span class="hljs-number">2</span>];<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; graph;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">catMouseGame</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;n = graph.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">this</span>-&gt;graph = graph;<br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(dp));<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getResult</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-type">int</span> mouse, <span class="hljs-type">int</span> cat, <span class="hljs-type">int</span> turns)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(turns == n * <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> DRAW;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>( dp[mouse][cat][turns] &lt; <span class="hljs-number">0</span> )<br>        &#123;<br>            <span class="hljs-keyword">if</span>(mouse == <span class="hljs-number">0</span>)<br>            &#123;<br>                dp[mouse][cat][turns] = MOUSE_WIN;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cat == mouse)<br>            &#123;<br>                dp[mouse][cat][turns] = CAT_WIN;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">getNextResult</span>(mouse, cat, turns);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[mouse][cat][turns];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getNextResult</span><span class="hljs-params">(<span class="hljs-type">int</span> mouse, <span class="hljs-type">int</span> cat, <span class="hljs-type">int</span> turns)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> curMove = turns % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? mouse : cat;<br>        <span class="hljs-type">int</span> defaultResult = curMove == mouse ? CAT_WIN : MOUSE_WIN;<br>        <span class="hljs-type">int</span> result = defaultResult;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> next : graph[curMove])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(curMove == cat &amp;&amp; next == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-type">int</span> nextMouse = curMove == mouse ? next : mouse;<br>            <span class="hljs-type">int</span> nextCat = curMove == cat ? next : cat;<br>            <span class="hljs-type">int</span> nextResult = <span class="hljs-built_in">getResult</span>(nextMouse, nextCat, turns+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(nextResult != defaultResult)<br>            &#123;<br>                result = nextResult;<br>                <span class="hljs-keyword">if</span>(result != DRAW)<br>                &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        dp[mouse][cat][turns] = result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    draw = <span class="hljs-number">0</span><br>    mouseWin = <span class="hljs-number">1</span><br>    catWin = <span class="hljs-number">2</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">catMouseGame</span><span class="hljs-params">(graph [][]<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(graph)<br>    dp := <span class="hljs-built_in">make</span>([][][]<span class="hljs-type">int</span>, n)<br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-keyword">range</span> dp &#123;<br>        dp[i] = <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int</span>, n)<br>        <span class="hljs-keyword">for</span> j:= <span class="hljs-keyword">range</span> dp[i] &#123;<br>            dp[i][j] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n*<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">for</span> k:= <span class="hljs-keyword">range</span> dp[i][j] &#123;<br>                dp[i][j][k] = <span class="hljs-number">-1</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> getResult, getNextResult <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> <br>    getResult = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(mouse, cat, turns <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>        <span class="hljs-keyword">if</span> turns == n*<span class="hljs-number">2</span> &#123;<br>            <span class="hljs-keyword">return</span> draw<br>        &#125;<br><br>        res := dp[mouse][cat][turns]<br>        <span class="hljs-keyword">if</span> res != <span class="hljs-number">-1</span> &#123;<br>            <span class="hljs-keyword">return</span> res<br>        &#125;<br>        <span class="hljs-keyword">if</span> mouse == <span class="hljs-number">0</span> &#123;<br>            res = mouseWin<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> cat == mouse &#123;<br>            res = catWin<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res = getNextResult(mouse, cat, turns)<br>        &#125;<br>        dp[mouse][cat][turns] = res<br>        <span class="hljs-keyword">return</span> res<br>        &#125;<br><br>        getNextResult = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(mouse, cat, turns <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>        curMove := mouse<br>        <span class="hljs-keyword">if</span> turns % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#123;<br>            curMove = cat<br>        &#125;<br>        defaultRes := mouseWin<br>        <span class="hljs-keyword">if</span> curMove == mouse &#123;<br>            defaultRes = catWin<br>        &#125;<br>        <br>        res := defaultRes<br>        <span class="hljs-keyword">for</span> _,next := <span class="hljs-keyword">range</span> graph[curMove] &#123;<br>            <span class="hljs-keyword">if</span> curMove == cat &amp;&amp; next == <span class="hljs-number">0</span> &#123;<br>                <span class="hljs-keyword">continue</span><br>            &#125;<br><br>            nextMouse, nextCat := mouse,cat<br>            <span class="hljs-keyword">if</span> curMove == mouse &#123;<br>                nextMouse = next<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> curMove == cat &#123;<br>                nextCat = next<br>            &#125;<br><br>            nextRes := getResult(nextMouse, nextCat, turns + <span class="hljs-number">1</span> )<br>            <span class="hljs-keyword">if</span> nextRes != defaultRes &#123;<br>                res = nextRes<br>                <span class="hljs-keyword">if</span> res != draw &#123;<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> getResult(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="思路（转自力扣官方）"><a href="#思路（转自力扣官方）" class="headerlink" title="思路（转自力扣官方）"></a>思路（转自力扣官方）</h2><p>这道题是博弈问题，猫和老鼠都按照最优策略参与游戏。</p><p>在阐述具体解法之前，首先介绍博弈问题中的三个概念：必胜状态、必败状态与必和状态。</p><ol><li><p>对于特定状态，如果游戏已经结束，则根据结束时的状态决定必胜状态、必败状态与必和状态。</p><ul><li><p>如果分出胜负，则该特定状态对于获胜方为必胜状态，对于落败方为必败状态。</p></li><li><p>如果是平局，则该特定状态对于双方都为必和状态。</p></li></ul></li><li><p>从特定状态开始，如果存在一种操作将状态变成必败状态，则当前玩家可以选择该操作，将必败状态留给对方玩家，因此该特定状态对于当前玩家为必胜状态。</p></li><li><p>从特定状态开始，如果所有操作都会将状态变成必胜状态，则无论当前玩家选择哪种操作，都会将必胜状态留给对方玩家，因此该特定状态对于当前玩家为必败状态。</p></li><li><p>从特定状态开始，如果任何操作都不能将状态变成必败状态，但是存在一种操作将状态变成必和状态，则当前玩家可以选择该操作，将必和状态留给对方玩家，因此该特定状态对于双方玩家都为必和状态。</p></li></ol><p>对于每个玩家，最优策略如下：</p><ol><li><p>争取将必胜状态留给自己，将必败状态留给对方玩家。</p></li><li><p>在自己无法到达必胜状态的情况下，争取将必和状态留给自己。</p></li></ol><p>方法一：动态规划<br>博弈问题通常可以使用动态规划求解。</p><p>使用三维数组 $dp$ 表示状态，$dp[mouse][cat][turns] $表示从老鼠位于节点 $\textit{mouse}mouse$、猫位于节点 $\textit{cat}cat$、游戏已经进行了 $\textit{turns}turns $轮的状态开始，猫和老鼠都按照最优策略的情况下的游戏结果。假设图中的节点数是 nn，则有 $0 \le \textit{mouse}, \textit{cat} &lt; n0≤mouse,cat&lt;n$。</p><p>由于游戏的初始状态是老鼠位于节点 11，猫位于节点 22，因此$ \textit{dp}[1][2][0]dp[1][2][0] $为从初始状态开始的游戏结果。</p><p>动态规划的边界条件为可以直接得到游戏结果的状态，包括以下三种状态：</p><ul><li><p>如果$ \textit{mouse} &#x3D; 0mouse&#x3D;0$，老鼠躲入洞里，则老鼠获胜，因此对于任意$ \textit{cat}cat$ 和 $\textit{turns}turns 都有 \textit{dp}[0][\textit{cat}][\textit{turns}] &#x3D; 1dp[0][cat][turns]&#x3D;1$，该状态为老鼠的必胜状态，猫的必败状态。</p></li><li><p>如果$ \textit{cat} &#x3D; \textit{mouse}cat&#x3D;mouse$，猫和老鼠占据相同的节点，则猫获胜，因此当 $\textit{cat} &#x3D; \textit{mouse}cat&#x3D;mouse $时，对于任意 $\textit{mouse}mouse、\textit{cat}cat $和 $\textit{turns}turns$ 都有$ \textit{dp}[\textit{mouse}][\textit{cat}][\textit{turns}] &#x3D; 2dp[mouse][cat][turns]&#x3D;2$，该状态为老鼠的必败状态，猫的必胜状态。注意猫不能移动到节点 00，因此当$ \textit{mouse} &#x3D; 0mouse&#x3D;0$ 时，一定有$ \textit{cat} \ne \textit{mouse}cat &#x3D;mouse$。</p></li><li><p>如果$ \textit{turns} \ge 2nturns≥2n$，则是平局，该状态为双方的必和状态。</p></li></ul><blockquote><p>为什么当 $\textit{turns} \ge 2nturns≥2n$时，游戏结果是平局呢？</p><p>如果游戏已经进行了$ 2n2n$ 轮，但是仍然没有任何一方获胜，此时猫和老鼠各移动了 nn 次，该移动次数等于图中的节点数，因此一定存在一个老鼠到达过至少两次的节点，以及一定存在一个猫到达过至少两次的节点。</p><p>对于老鼠而言，即使按照最优策略，也无法躲入洞内，而是只能回到一个已经到达过的节点。当老鼠回到一个在过去的某个回合已经到达过的节点时，猫可能回到在相同回合已经到达过的节点，也可能移动到一个更有利于猫获胜的节点，不可能移动到一个更有利于老鼠获胜的节点（否则猫就不是按照最优策略参与游戏）。如果猫回到在相同回合已经到达过的节点，则形成循环，因此是平局；如果猫移动到一个更有利于猫获胜的节点，则老鼠的获胜机会更小，因此老鼠无法获胜。</p><p>同理可知，如果猫按照最优策略也只能回到一个已经到达过的节点，则猫无法获胜。<br>因此当猫和老鼠分别回到一个已经到达过的节点时，猫和老鼠都无法获胜，游戏结果是平局。</p></blockquote><p>动态规划的状态转移需要考虑当前玩家所有可能的移动，选择最优策略的移动。<br>由于老鼠先开始移动，猫后开始移动，因此可以根据游戏已经进行的轮数 $\textit{turns}turns $的奇偶性决定当前轮到的玩家，当$ \textit{turns}turns $是偶数时轮到老鼠移动，当 $\textit{turns}turns $是奇数时轮到猫移动。</p><ol><li>如果轮到老鼠移动，则对于老鼠从当前节点移动一次之后可能到达的每个节点，进行如下操作：</li><li>如果存在一个节点，老鼠到达该节点之后，老鼠可以获胜，则老鼠到达该节点之后的状态为老鼠的必胜状态，猫的必败状态，因此在老鼠移动之前的当前状态为老鼠的必胜状态。<br>如果老鼠到达任何节点之后的状态都不是老鼠的必胜状态，但是存在一个节点，老鼠到达该节点之后，结果是平局，则老鼠到达该节点之后的状态为双方的必和状态，因此在老鼠移动之前的当前状态为双方的必和状态。</li><li>如果老鼠到达任何节点之后的状态都不是老鼠的必胜状态或必和状态，则老鼠到达任何节点之后的状态都为老鼠的必败状态，猫的必胜状态，因此在老鼠移动之前的当前状态为老鼠的必败状态。</li></ol><p>如果轮到猫移动，则对于猫从当前节点移动一次之后可能到达的每个节点，进行如下操作：</p><ol><li>如果存在一个节点，猫到达该节点之后，猫可以获胜，则猫到达该节点之后的状态为猫的必胜状态，老鼠的必败状态，因此在猫移动之前的当前状态为猫的必胜状态。</li><li>如果猫到达任何节点之后的状态都不是猫的必胜状态，但是存在一个节点，猫到达该节点之后，结果是平局，则猫到达该节点之后的状态为双方的必和状态，因此在猫移动之前的当前状态为双方的必和状态。</li><li>如果猫到达任何节点之后的状态都不是猫的必胜状态或必和状态，则猫到达任何节点之后的状态都为猫的必败状态，老鼠的必胜状态，因此在猫移动之前的当前状态为猫的必败状态。</li></ol><p>实现方面，由于双方移动的策略相似，因此可以使用一个函数实现移动策略，根据游戏已经进行的轮数的奇偶性决定当前轮到的玩家。对于特定玩家的移动，实现方法如下：</p><ol><li><p>如果当前玩家存在一种移动方法到达非必败状态，则用该状态更新游戏结果。</p><ul><li><p>如果该移动方法到达必胜状态，则将当前状态（移动前的状态）设为必胜状态，结束遍历其他可能的移动。</p></li><li><p>如果该移动方法到达必和状态，则将当前状态（移动前的状态）设为必和状态，继续遍历其他可能的移动，因为可能存在到达必胜状态的移动方法。</p></li></ul></li><li><p>如果当前玩家的任何移动方法都到达必败状态，则将当前状态（移动前的状态）设为必败状态。</p></li></ol><p>特别地，如果当前玩家是猫，则不能移动到节点 00。</p><blockquote><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/cat-and-mouse/solution/mao-he-lao-shu-by-leetcode-solution-444x/">https://leetcode-cn.com/problems/cat-and-mouse/solution/mao-he-lao-shu-by-leetcode-solution-444x/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
    <summary type="html">Go刷题笔记_Init_Come on!!!</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Go" scheme="https://www.mingsrc.work/categories/Go/"/>
    
    <category term="刷题笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="LeetCode" scheme="https://www.mingsrc.work/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Go_Easy_Algorithm</title>
    <link href="https://www.mingsrc.work/posts/a0a70754"/>
    <id>https://www.mingsrc.work/posts/a0a70754</id>
    <published>2022-01-08T15:14:20.824Z</published>
    <updated>2022-01-27T14:37:19.453Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="7-整数反转-for-整型"><a href="#7-整数反转-for-整型" class="headerlink" title="7. 整数反转 #for #整型"></a><a href="https://leetcode-cn.com/problems/reverse-integer/">7. 整数反转</a> #for #整型</h1><p>Difficulty: **给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。 如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。 假设环境不允许存储 64 位整数（有符号或无符号）。   示例 1： 输入：x &#x3D; 123 输出：321 示例 2： 输入：x &#x3D; -123 输出：-321 示例 3： 输入：x &#x3D; 120 输出：21 示例 4： 输入：x &#x3D; 0 输出：0   提示： -231 &lt;&#x3D; x &lt;&#x3D; 231 - 1 **</p><p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−2&lt;sup&gt;31&lt;/sup&gt;,  2&lt;sup&gt;31 &lt;/sup&gt;− 1]</code> ，就返回 0。</p><p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：x = 123<br>输出：321<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：x = -123<br>输出：-321<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：x = 120<br>输出：21<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：x = 0<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-2&lt;sup&gt;31&lt;/sup&gt; &lt;= x &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> (rev <span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">for</span> x != <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">if</span> rev &lt; math.MinInt32/<span class="hljs-number">10</span> || rev &gt; math.MaxInt32/<span class="hljs-number">10</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br><br>        digit := x % <span class="hljs-number">10</span><br>        x /= <span class="hljs-number">10</span><br>        rev = rev*<span class="hljs-number">10</span> + digit<br>    &#125;<br>    <span class="hljs-keyword">return</span> <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1614-括号的最大嵌套深度-字符串-for"><a href="#1614-括号的最大嵌套深度-字符串-for" class="headerlink" title="1614. 括号的最大嵌套深度 #字符串 #for"></a><a href="https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses/">1614. 括号的最大嵌套深度</a> #字符串 #for</h1><p>如果字符串满足以下条件之一，则可以称之为 <strong>有效括号字符串****（valid parentheses string</strong>，可以简写为 <strong>VPS</strong>）：</p><ul><li>字符串是一个空字符串 <code>&quot;&quot;</code>，或者是一个不为 <code>&quot;(&quot;</code> 或 <code>&quot;)&quot;</code> 的单字符。</li><li>字符串可以写为 <code>AB</code>（<code>A</code> 与 <code>B</code> 字符串连接），其中 <code>A</code> 和 <code>B</code> 都是 <strong>有效括号字符串</strong> 。</li><li>字符串可以写为 <code>(A)</code>，其中 <code>A</code> 是一个 <strong>有效括号字符串</strong> 。</li></ul><p>类似地，可以定义任何有效括号字符串 <code>S</code> 的 <strong>嵌套深度</strong> <code>depth(S)</code>：</p><ul><li><code>depth(&quot;&quot;) = 0</code></li><li><code>depth(C) = 0</code>，其中 <code>C</code> 是单个字符的字符串，且该字符不是 <code>&quot;(&quot;</code> 或者 <code>&quot;)&quot;</code></li><li><code>depth(A + B) = max(depth(A), depth(B))</code>，其中 <code>A</code> 和 <code>B</code> 都是 <strong>有效括号字符串</strong></li><li><code>depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A)</code>，其中 <code>A</code> 是一个 <strong>有效括号字符串</strong></li></ul><p>例如：<code>&quot;&quot;</code>、<code>&quot;()()&quot;</code>、<code>&quot;()(()())&quot;</code> 都是 <strong>有效括号字符串</strong>（嵌套深度分别为 0、1、2），而 <code>&quot;)(&quot;</code> 、<code>&quot;(()&quot;</code> 都不是 <strong>有效括号字符串</strong> 。</p><p>给你一个 <strong>有效括号字符串</strong> <code>s</code>，返回该字符串的<code>s</code> <strong>嵌套深度</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;(1+(2*3)+((8)/4))+1&quot;<br>输出：3<br>解释：数字 8 在嵌套的 3 层括号中。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;(1)+((2))+(((3)))&quot;<br>输出：3<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;1+(2*3)/(2-1)&quot;<br>输出：1<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;1&quot;<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 100</code></li><li><code>s</code> 由数字 <code>0-9</code> 和字符 <code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;*&#39;</code>、<code>&#39;/&#39;</code>、<code>&#39;(&#39;</code>、<code>&#39;)&#39;</code> 组成</li><li>题目数据保证括号表达式 <code>s</code> 是 <strong>有效的括号表达式</strong></li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> (ans <span class="hljs-type">int</span>) &#123;<br>    dept := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _,ch := <span class="hljs-keyword">range</span> s &#123;<br>        <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;(&#x27;</span> &#123;<br>            dept++;<br>            <span class="hljs-keyword">if</span> dept &gt;= ans &#123;<br>                ans = dept<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>            dept--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="71-简化路径-字符串切割-栈"><a href="#71-简化路径-字符串切割-栈" class="headerlink" title="71. 简化路径 #字符串切割 #栈"></a><a href="https://leetcode-cn.com/problems/simplify-path/">71. 简化路径</a> #字符串切割 #栈</h1><p>给你一个字符串 <code>path</code> ，表示指向某一文件或目录的 Unix 风格 <strong>绝对路径</strong> （以 <code>&#39;/&#39;</code> 开头），请你将其转化为更加简洁的规范路径。</p><p>在 Unix 风格的文件系统中，一个点（<code>.</code>）表示当前目录本身；此外，两个点 （<code>..</code>） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，<code>&#39;//&#39;</code>）都被视为单个斜杠 <code>&#39;/&#39;</code> 。 对于此问题，任何其他格式的点（例如，<code>&#39;...&#39;</code>）均被视为文件&#x2F;目录名称。</p><p>请注意，返回的 <strong>规范路径</strong> 必须遵循下述格式：</p><ul><li>始终以斜杠 <code>&#39;/&#39;</code> 开头。</li><li>两个目录名之间必须只有一个斜杠 <code>&#39;/&#39;</code> 。</li><li>最后一个目录名（如果存在）<strong>不能</strong> 以 <code>&#39;/&#39;</code> 结尾。</li><li>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 <code>&#39;.&#39;</code> 或 <code>&#39;..&#39;</code>）。</li></ul><p>返回简化后得到的 <strong>规范路径</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：path = &quot;/home/&quot;<br>输出：&quot;/home&quot;<br>解释：注意，最后一个目录名后面没有斜杠。 <br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：path = &quot;/../&quot;<br>输出：&quot;/&quot;<br>解释：从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：path = &quot;/home//foo/&quot;<br>输出：&quot;/home/foo&quot;<br>解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：path = &quot;/a/./b/../../c/&quot;<br>输出：&quot;/c&quot;<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= path.length &lt;= 3000</code></li><li><code>path</code> 由英文字母，数字，<code>&#39;.&#39;</code>，<code>&#39;/&#39;</code> 或 <code>&#39;_&#39;</code> 组成。</li><li><code>path</code> 是一个有效的 Unix 风格绝对路径。</li></ul><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">simplifyPath</span><span class="hljs-params">(path <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    stack := []<span class="hljs-type">string</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> _,name := <span class="hljs-keyword">range</span> strings.Split(path, <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>        <span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;..&quot;</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &#123;<br>                stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]   <br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> name != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; name != <span class="hljs-string">&quot;.&quot;</span> &#123;<br>            stack = <span class="hljs-built_in">append</span>(stack, name)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/&quot;</span> + strings.Join(stack,<span class="hljs-string">&quot;/&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1576-替换所有的问号-字符串"><a href="#1576-替换所有的问号-字符串" class="headerlink" title="1576. 替换所有的问号 #字符串"></a><a href="https://leetcode-cn.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/">1576. 替换所有的问号</a> #字符串</h1><p>给你一个仅包含小写英文字母和 <code>&#39;?&#39;</code> 字符的字符串 <code>s</code>，请你将所有的 <code>&#39;?&#39;</code> 转换为若干小写字母，使最终的字符串不包含任何 <strong>连续重复</strong> 的字符。</p><p>注意：你 <strong>不能</strong> 修改非 <code>&#39;?&#39;</code> 字符。</p><p>题目测试用例保证 <strong>除</strong> <code>&#39;?&#39;</code> 字符 <strong>之外</strong>，不存在连续重复的字符。</p><p>在完成所有转换（可能无需转换）后返回最终的字符串。如果有多个解决方案，请返回其中任何一个。可以证明，在给定的约束条件下，答案总是存在的。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;?zs&quot;<br>输出：&quot;azs&quot;<br>解释：该示例共有 25 种解决方案，从 &quot;azs&quot; 到 &quot;yzs&quot; 都是符合题目要求的。只有 &quot;z&quot; 是无效的修改，因为字符串 &quot;zzs&quot; 中有连续重复的两个 &#x27;z&#x27; 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;ubv?w&quot;<br>输出：&quot;ubvaw&quot;<br>解释：该示例共有 24 种解决方案，只有替换成 &quot;v&quot; 和 &quot;w&quot; 不符合题目要求。因为 &quot;ubvvw&quot; 和 &quot;ubvww&quot; 都包含连续重复的字符。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;j?qg??b&quot;<br>输出：&quot;jaqgacb&quot;<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：s = &quot;??yw?ipkj?&quot;<br>输出：&quot;acywaipkja&quot;<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><p><code>1 &lt;= s.length &lt;= 100</code></p></li><li><p><code>s</code> 仅包含小写英文字母和 <code>&#39;?&#39;</code> 字符</p></li></ul><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">modifyString</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>    res := []<span class="hljs-type">byte</span>(s)<br>    n := <span class="hljs-built_in">len</span>(res)<br>    <span class="hljs-keyword">for</span> i,ch := <span class="hljs-keyword">range</span> res &#123;<br>        <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;?&#x27;</span> &#123;<br>            <span class="hljs-keyword">for</span> b := <span class="hljs-type">byte</span>(<span class="hljs-string">&#x27;a&#x27;</span>); b &lt;= <span class="hljs-string">&#x27;c&#x27;</span>; b++ &#123;<br>                <span class="hljs-keyword">if</span> !(i &gt; <span class="hljs-number">0</span> &amp;&amp; res[i<span class="hljs-number">-1</span>] == b || i &lt; n - <span class="hljs-number">1</span> &amp;&amp; res[i+<span class="hljs-number">1</span>] == b) &#123;<br>                    res[i] = b<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(res)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1629-按键持续时间最长的键-数组"><a href="#1629-按键持续时间最长的键-数组" class="headerlink" title="1629. 按键持续时间最长的键 #数组"></a><a href="https://leetcode-cn.com/problems/slowest-key/">1629. 按键持续时间最长的键</a> #数组</h1><p>LeetCode 设计了一款新式键盘，正在测试其可用性。测试人员将会点击一系列键（总计 <code>n</code> 个），每次一个。</p><p>给你一个长度为 <code>n</code> 的字符串 <code>keysPressed</code> ，其中 <code>keysPressed[i]</code> 表示测试序列中第 <code>i</code> 个被按下的键。<code>releaseTimes</code> 是一个升序排列的列表，其中 <code>releaseTimes[i]</code> 表示松开第 <code>i</code> 个键的时间。字符串和数组的 <strong>下标都从 0 开始</strong> 。第 <code>0</code> 个键在时间为 <code>0</code> 时被按下，接下来每个键都 <strong>恰好</strong> 在前一个键松开时被按下。</p><p>测试人员想要找出按键 <strong>持续时间最长</strong> 的键。第 <code>i</code>次按键的持续时间为 <code>releaseTimes[i] - releaseTimes[i - 1]</code> ，第 <code>0</code> 次按键的持续时间为 <code>releaseTimes[0]</code> 。</p><p>注意，测试期间，同一个键可以在不同时刻被多次按下，而每次的持续时间都可能不同。</p><p>请返回按键 <strong>持续时间最长</strong> 的键，如果有多个这样的键，则返回 <strong>按字母顺序排列最大</strong> 的那个键。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：releaseTimes = [9,29,49,50], keysPressed = &quot;cbcd&quot;<br>输出：&quot;c&quot;<br>解释：按键顺序和持续时间如下：<br>按下 &#x27;c&#x27; ，持续时间 9（时间 0 按下，时间 9 松开）<br>按下 &#x27;b&#x27; ，持续时间 29 - 9 = 20（松开上一个键的时间 9 按下，时间 29 松开）<br>按下 &#x27;c&#x27; ，持续时间 49 - 29 = 20（松开上一个键的时间 29 按下，时间 49 松开）<br>按下 &#x27;d&#x27; ，持续时间 50 - 49 = 1（松开上一个键的时间 49 按下，时间 50 松开）<br>按键持续时间最长的键是 &#x27;b&#x27; 和 &#x27;c&#x27;（第二次按下时），持续时间都是 20<br>&#x27;c&#x27; 按字母顺序排列比 &#x27;b&#x27; 大，所以答案是 &#x27;c&#x27;<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：releaseTimes = [12,23,36,46,62], keysPressed = &quot;spuda&quot;<br>输出：&quot;a&quot;<br>解释：按键顺序和持续时间如下：<br>按下 &#x27;s&#x27; ，持续时间 12<br>按下 &#x27;p&#x27; ，持续时间 23 - 12 = 11<br>按下 &#x27;u&#x27; ，持续时间 36 - 23 = 13<br>按下 &#x27;d&#x27; ，持续时间 46 - 36 = 10<br>按下 &#x27;a&#x27; ，持续时间 62 - 46 = 16<br>按键持续时间最长的键是 &#x27;a&#x27; ，持续时间 16<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>releaseTimes.length == n</code></li><li><code>keysPressed.length == n</code></li><li><code>2 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= releaseTimes[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li><code>releaseTimes[i] &lt; releaseTimes[i+1]</code></li><li><code>keysPressed</code> 仅由小写英文字母组成</li></ul><h2 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">slowestKey</span><span class="hljs-params">(releaseTimes []<span class="hljs-type">int</span>, keysPressed <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">byte</span> &#123;<br>    n := <span class="hljs-built_in">len</span>(releaseTimes)<br>    <span class="hljs-keyword">var</span> ans <span class="hljs-type">byte</span> = keysPressed[<span class="hljs-number">0</span>]<br>    maxTime := releaseTimes[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-type">int</span>(<span class="hljs-number">1</span>); i &lt; n; i++ &#123;<br>        key := keysPressed[i]<br>        time := releaseTimes[i] - releaseTimes[i<span class="hljs-number">-1</span>]<br><br>        <span class="hljs-keyword">if</span>(time &gt; maxTime || (time == maxTime &amp;&amp; key &gt; ans)) &#123;<br>            ans = key<br>            maxTime = time<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="206-反转链表-链表"><a href="#206-反转链表-链表" class="headerlink" title="206. 反转链表 #链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a> #链表</h1><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = [1,2,3,4,5]<br>输出：[5,4,3,2,1]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = [1,2]<br>输出：[2,1]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：head = []<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p><h2 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(head *ListNode)</span></span> *ListNode &#123;<br>    <span class="hljs-keyword">var</span> prev * ListNode<br>    curr := head<br>    <span class="hljs-keyword">for</span> curr != <span class="hljs-literal">nil</span> &#123;<br>        next := curr.Next<br><br>        curr.Next = prev<br>        prev = curr<br><br>        curr = next<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="121-买卖股票的最佳时机-数组-dp"><a href="#121-买卖股票的最佳时机-数组-dp" class="headerlink" title="121. 买卖股票的最佳时机 #数组 #dp"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a> #数组 #dp</h1><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：[7,1,5,3,6,4]<br>输出：5<br>解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：prices = [7,6,4,3,1]<br>输出：0<br>解释：在这种情况下, 没有交易完成, 所以最大利润为 0。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>0 &lt;= prices[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><h2 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(prices []<span class="hljs-type">int</span>)</span></span> (max <span class="hljs-type">int</span>) &#123;<br>    min := prices[<span class="hljs-number">0</span>]<br>    max = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _,price := <span class="hljs-keyword">range</span> prices &#123;<br>        <span class="hljs-keyword">if</span> price &lt; min &#123;<br>            min = price<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> max &gt; price - min &#123;<br>                <span class="hljs-keyword">continue</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                max = price - min<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-03-数组中重复的数字-数组-坐标交换"><a href="#剑指-Offer-03-数组中重复的数字-数组-坐标交换" class="headerlink" title="剑指 Offer 03. 数组中重复的数字 #数组 #坐标交换"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a> #数组 #坐标交换</h1><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：<br>[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 <br></code></pre></td></tr></table></figure><p><strong>限制：</strong></p><p><code>2 &lt;= n &lt;= 100000</code></p><h2 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h2><p>坐标交换：通俗讲就是每个人都有一个自己位置，坐标交换就是先把每个人都放到自己的位置上，当发现自己的位置被人占了以后，就说明出现了重复元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func findRepeatNumber(nums []int) int &#123;<br>    i := 0<br>    for i &lt; len(nums) &#123;<br>        if nums[i] == i &#123;<br>            i++<br>            continue<br>        &#125;<br><br>        if nums[nums[i]] == nums[i] &#123;<br>            return nums[i]<br>        &#125;<br><br>        nums[nums[i]], nums[i] = nums[i], nums[nums[i]]<br>    &#125;<br>    return -1<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Go刷题笔记_Init_Come on!!!</summary>
    
    
    
    <category term="Go" scheme="https://www.mingsrc.work/categories/Go/"/>
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/Go/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="刷题笔记" scheme="https://www.mingsrc.work/categories/Go/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="LeetCode" scheme="https://www.mingsrc.work/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译可执行文件的各个过程</title>
    <link href="https://www.mingsrc.work/posts/d710f2d"/>
    <id>https://www.mingsrc.work/posts/d710f2d</id>
    <published>2021-12-26T07:27:09.590Z</published>
    <updated>2022-01-08T15:26:51.003Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h1><ol><li>【预处理阶段】：对源代码文件中文件包含关系（头文件）、预编译语句（宏定义）进行分析和替换，生成预编译文件🔻。</li><li>【编译阶段】：将经过预处理后的预编译文件转换成特定汇编代码，生成汇编文件🔻。&#x3D;&#x3D;根据当前源代码编译成二进制目标文件（即.obj文件）&#x3D;&#x3D;</li><li>【汇编阶段】：将编译阶段生成的汇编文件转化成机器码，生成可重定位目标文件🔻。</li><li>【链接阶段】：将多个目标文件及所需要的库连接成最终的可执行目标文件。&#x3D;&#x3D;将生成的.obj文件与库文件.lib等文件链接，生成可执行文件（.exe文件）。&#x3D;&#x3D;</li></ol><h1 id="gcc的编译过程"><a href="#gcc的编译过程" class="headerlink" title="gcc的编译过程"></a>gcc的编译过程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">.i 中间文件，基本不会用到</span><br>gcc -E main.c -o main.i<br><span class="hljs-meta prompt_"># </span><span class="language-bash">.s 汇编语言文件</span><br>gcc -S main.i -o main.s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">.o 汇编文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-c 只编译不链接，生成.obj文件也就是上述对应的汇编文件</span><br>gcc -c main.s -o main.o<br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成可执行文件</span><br>gcc main.o -o main<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">gcc命令行整理</summary>
    
    
    
    <category term="Linux" scheme="https://www.mingsrc.work/categories/Linux/"/>
    
    
    <category term="gcc" scheme="https://www.mingsrc.work/tags/gcc/"/>
    
    <category term="linux" scheme="https://www.mingsrc.work/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>explicit关键字</title>
    <link href="https://www.mingsrc.work/posts/58412853"/>
    <id>https://www.mingsrc.work/posts/58412853</id>
    <published>2021-12-12T09:08:36.576Z</published>
    <updated>2022-01-27T14:36:07.603Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>如下代码收拾</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weight</span> &#123;<br><span class="hljs-built_in">Weight</span>(<span class="hljs-type">int</span> wh, <span class="hljs-type">double</span> lbs);<br>    <span class="hljs-built_in">Weight</span>(<span class="hljs-type">double</span> lbs);<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> m_wh;<br>    <span class="hljs-type">double</span> m_lbs;<br>&#125;;<br><br>Weight::<span class="hljs-built_in">Weight</span>(<span class="hljs-type">int</span> wh, <span class="hljs-type">double</span> lbs)<br>&#123;<br>    m_wh = wh;<br>    m_lbs = lbs;<br>&#125;<br><br>Weight::<span class="hljs-built_in">Weight</span>(<span class="hljs-type">double</span> lbs)<br>&#123;<br>    m_wh = lbs / <span class="hljs-number">2</span>;<br>    m_lbs = lbs;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Weight</code>类并非真的需要声明构造函数，因为自动生成的默认构造函数就很好。但是<code>Weight</code>类提供了两个构造函数。一个是<code>int,double</code>类型的，一个是<code>double</code>类型的，每个构造函数都给私有成员全部赋了值。因为创建<code>Weight</code>对象时，将会自动设置这两种重量表示。</p><p>因为<code>Weight</code>对象表示一个重量，因为可以提供一种整数值或者浮点值转换为<code>Weight</code>对象的方法。即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Weight wh;<br>wh = <span class="hljs-number">19.6</span>;<br></code></pre></td></tr></table></figure><p>程序将使用构造函数<code>Weight(double)</code>来创建一个临时的<code>Weight</code>对象。随后采用逐成员赋值方式将该临时对象的内容复制到<code>wh</code>中。这一过程称为隐式转换，因为它是自动进行的，而不需要显式强制类型转换。</p><p>但情况是，只有接受一个参数的构造函数才能作为转换函数。如<code>Weight(int,double)</code>就不可以。</p><p>然而，如果第二个参数提供了&#x3D;&#x3D;默认值&#x3D;&#x3D;，它便可以用于转换<code>int</code>。</p><p><code>Weight(int, double lbs = 0);</code></p><p>在这个时候，便会导致意外的类型转换。因此，C++新增了关键字<code>explicit</code>，用于关闭这种特性。也就是在声明构造函数时加上<code>explicit</code>关键字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weight</span> &#123;<br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Weight</span><span class="hljs-params">(<span class="hljs-type">int</span> wh, <span class="hljs-type">double</span> lbs)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Weight</span><span class="hljs-params">(<span class="hljs-type">double</span> lbs)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> m_wh;<br>    <span class="hljs-type">double</span> m_lbs;<br>&#125;;<br></code></pre></td></tr></table></figure><p>添加<code>explicit</code>关键字之后，便可以关闭上述中的隐式转换，但仍然允许显式转换，即显式强制类型转换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Weight weight; <span class="hljs-comment">// create a Stonewt object</span><br>weight = <span class="hljs-number">19.6</span>;<span class="hljs-comment">// not valid if Stonevt(double) is declared as expliclt</span><br>weight = <span class="hljs-built_in">Weight</span>(<span class="hljs-number">19.61</span>);<span class="hljs-comment">// ok,an explicit corversion</span><br>weight = (Weight)<span class="hljs-number">19.6</span>;<span class="hljs-comment">//ok,old form for explicit typecat</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">explicit关键字说明</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="C++" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C/"/>
    
    
    <category term="C++" scheme="https://www.mingsrc.work/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>QPROPETRY属性</title>
    <link href="https://www.mingsrc.work/posts/8aa93b6e"/>
    <id>https://www.mingsrc.work/posts/8aa93b6e</id>
    <published>2021-12-12T08:10:57.058Z</published>
    <updated>2021-12-12T08:14:42.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>Q_PROPERTY 是 Qt 中的一个宏，是用类中声明属性。如果需要使用该宏，必须要继承 QObject 类或者其子类。QPushButton 则是 QObject 的间接子类，所以继承 QPushButton 类后同样可以使用 Q_PROPERTY 宏。</p><p>Q_PROPERTY 属性自带了一些属性，同样程序可以自定义。本实验中只讲解 Q_PROPERTY 自带的属性。</p><p>在自定义导航按钮的程序中同样使用了 Q_PROPERTY，且程序中只使用了 Q_PROPERTY 的 READ 属性和 WRITE 属性。</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>Q_PROPERTY 自带属性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-built_in">Q_PROPERTY</span>(type name<br>           READ getFunction<br>           [WRITE setFunction]<br>           [RESET resetFunction]<br>           [NOTIFY notifySignal]<br>           [DESIGNABLE <span class="hljs-type">bool</span>]<br>           [SCRIPTABLE <span class="hljs-type">bool</span>]<br>           [STORED <span class="hljs-type">bool</span>]<br>           [USER <span class="hljs-type">bool</span>]<br>           [CONSTANT]<br>           [FINAL])<br></code></pre></td></tr></table></figure><ul><li>在上面的代码中，方括号 [] 中的内容属性可选。</li><li>必选 <code>READ</code> 属性：用来读取属性值，因此使用 const 限制，返回值类型必须为属性类型或者属性类型的引用或者指针。</li><li>可选 <code>WRITE</code> 属性：用来设置属性值，返回值必须为 void 类型，需要一个参数。</li><li>可选 <code>RESET</code> 属性：能够将值设置为默认状态，返回值为 void 类型且不带参数。</li><li>可选 <code>NOTIFY</code> 属性：提供一个信号，当值发送改变是该信号会自动被触发。</li><li>可选 <code>DESIGNABLE</code> 属性：是否在界面设计器的属性编辑器中出现。大多数属性是可见的，除了可以为变量传入 true 或 false 还可以执行一个 bool 行的成员函数。</li><li>可选 <code>SCRIPTABLE</code> 属性：是够可以被脚本引擎操作（默认为 true）。可以赋予 true 或者 false 或 bool 类型的函数。</li><li>可选 <code>STORED</code> 属性：是否被认为是独立存在还是依赖于其他的值而存在，也可以表明是否在保存对象状态时保存此属性的值。大多数属性都是需要保存的，但也有例外，例如 <code>QWidget::minimumWidth()</code> 就是不被保存的，因为它的值是从另一个属性 <code>QWidget::minimumSize()</code> 得来的。</li><li>可选 <code>USER</code> 属性：是否被设计为面向用户的或用户可修改的类属性。通常，每个类只有一个 USER 属性。例如 <code>QAbstractButton::checked</code> 是按钮类的用户可修改属性。注意 QItemDelegate 获取和设置 widget 的 USER 属性。</li><li>可选 <code>CONSTANT</code> 属性：表示属性的值是不变的。</li><li>可选 <code>FINAL</code> 属性：表示属性不能被派生类所重写。</li></ul>]]></content>
    
    
    <summary type="html">Q_PROPERT属性的说明</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Qt" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Qt/"/>
    
    
    <category term="Qt" scheme="https://www.mingsrc.work/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Windows Cmd命令整理</title>
    <link href="https://www.mingsrc.work/posts/4d62d9f3"/>
    <id>https://www.mingsrc.work/posts/4d62d9f3</id>
    <published>2021-11-25T11:58:36.862Z</published>
    <updated>2021-11-29T02:54:23.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Cmd高级用法整理"><a href="#Cmd高级用法整理" class="headerlink" title="Cmd高级用法整理"></a>Cmd高级用法整理</h1><h2 id="查看路由"><a href="#查看路由" class="headerlink" title="查看路由"></a>查看路由</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">route print<br></code></pre></td></tr></table></figure><h2 id="无限ping"><a href="#无限ping" class="headerlink" title="无限ping"></a>无限ping</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping 192.168.1.1 /t<br></code></pre></td></tr></table></figure><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地5分钟关机</span><br>shutdown/s<br><br><span class="hljs-comment"># 本地定时关机</span><br>shutdown/s /t XXX（时间，按秒记）<br><br><span class="hljs-comment"># 网络关机</span><br>shutdown/s /m xxx.xxx.xxx.xxx（IP地址）<br><br><span class="hljs-comment"># 取消关机</span><br>shutdown/a<br></code></pre></td></tr></table></figure><h2 id="sfc命令"><a href="#sfc命令" class="headerlink" title="sfc命令"></a>sfc命令</h2><p>检查系统完整性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sfc /scannow<br></code></pre></td></tr></table></figure><h2 id="Talnet命令"><a href="#Talnet命令" class="headerlink" title="Talnet命令"></a>Talnet命令</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Talnet IP:端口号<br></code></pre></td></tr></table></figure><h2 id="vol"><a href="#vol" class="headerlink" title="vol"></a>vol</h2><p>检查硬盘分区</p>]]></content>
    
    
    <summary type="html">CMD高级用法整理</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SYSTEM" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SYSTEM/"/>
    
    
    <category term="Windows" scheme="https://www.mingsrc.work/tags/Windows/"/>
    
    <category term="cmd" scheme="https://www.mingsrc.work/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>C++常识与通识</title>
    <link href="https://www.mingsrc.work/posts/9d0d833e"/>
    <id>https://www.mingsrc.work/posts/9d0d833e</id>
    <published>2021-11-25T03:45:29.792Z</published>
    <updated>2021-11-25T07:20:35.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><h3 id="将引用作为返回值的通常原因是避免创建副本以提高效率，包括其他的函数传参亦是如此"><a href="#将引用作为返回值的通常原因是避免创建副本以提高效率，包括其他的函数传参亦是如此" class="headerlink" title="将引用作为返回值的通常原因是避免创建副本以提高效率，包括其他的函数传参亦是如此"></a>将引用作为返回值的通常原因是避免创建副本以提高效率，包括其他的函数传参亦是如此</h3></li><li><h3 id="std-nothrow可以消除抛出异常"><a href="#std-nothrow可以消除抛出异常" class="headerlink" title="std::nothrow可以消除抛出异常"></a><code>std::nothrow</code>可以消除抛出异常</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;new&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">100000000ul</span>];   <span class="hljs-comment">// throwing overload</span><br>        &#125;<br>    &#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::bad_alloc&amp; e) &#123;<br>        std::cout &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">int</span>* p = <span class="hljs-built_in">new</span>(std::nothrow) <span class="hljs-type">int</span>[<span class="hljs-number">100000000ul</span>]; <span class="hljs-comment">// non-throwing overload</span><br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span>) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Allocation returned nullptr\n&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>输出：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">std::bad_alloc<br>Allocation returned nullptr<br></code></pre></td></tr></table></figure></p><ol start="3"><li><h3 id="枚举用法——类静态成员"><a href="#枚举用法——类静态成员" class="headerlink" title="枚举用法——类静态成员"></a>枚举用法——类静态成员</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">year</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">enum</span> &#123;MONTH = <span class="hljs-number">12</span>&#125;; <span class="hljs-comment">// 可以当做一个 static const</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>具体使用场景自己探索哦~</p></li><li><h3 id="可以通过terminate-（默认行为）、abort-、exit-来终止程序"><a href="#可以通过terminate-（默认行为）、abort-、exit-来终止程序" class="headerlink" title="可以通过terminate()（默认行为）、abort()、exit()来终止程序"></a>可以通过<code>terminate()（默认行为）、abort()、exit()</code>来终止程序</h3></li><li><h3 id="虽然算法、数据结构是基础，但是设计模式也一定要看"><a href="#虽然算法、数据结构是基础，但是设计模式也一定要看" class="headerlink" title="虽然算法、数据结构是基础，但是设计模式也一定要看"></a>虽然算法、数据结构是基础，但是设计模式也一定要看</h3></li><li><h3 id><a href="#" class="headerlink" title></a></h3></li></ol>]]></content>
    
    
    <summary type="html">整理自个人学习过程中的所见所得</summary>
    
    
    
    <category term="C++笔记" scheme="https://www.mingsrc.work/categories/C-%E7%AC%94%E8%AE%B0/"/>
    
    <category term="C++_Primer_Plus" scheme="https://www.mingsrc.work/categories/C-%E7%AC%94%E8%AE%B0/C-Primer-Plus/"/>
    
    
    <category term="C++" scheme="https://www.mingsrc.work/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>windows Terminal 打开 Git Bash</title>
    <link href="https://www.mingsrc.work/posts/352e7838"/>
    <id>https://www.mingsrc.work/posts/352e7838</id>
    <published>2021-11-21T10:41:42.564Z</published>
    <updated>2021-11-21T13:36:49.259Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="添加Bash到环境变量中"><a href="#添加Bash到环境变量中" class="headerlink" title="添加Bash到环境变量中"></a>添加Bash到环境变量中</h1><h2 id="1-添加git到环境变量"><a href="#1-添加git到环境变量" class="headerlink" title="1. 添加git到环境变量"></a>1. 添加<code>git</code>到环境变量</h2><p>这一步的目的是方便使用系统命令调用<code>git bash</code>。</p><h2 id="①-操作"><a href="#①-操作" class="headerlink" title="① 操作"></a>① 操作</h2><p>右击<code>我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;Path-&gt;添加Git/bin路径即可</code></p><p><img src="/../../../images/Windows%20Terminal%20&%20GitBase/1.png" alt="Git目录"></p><p>如图所示：找到<code>bin</code>目录后，将其添加到path目录</p><h2 id="②-验证"><a href="#②-验证" class="headerlink" title="② 验证"></a>② 验证</h2><p><kbd>Win</kbd><code>+</code><kbd>R</kbd>输入<code>Bash</code>能打开Git则说明添加到环境变量成功。</p><p><img src="/../../../images/Windows%20Terminal%20&%20GitBase/3.png" alt="Win+R-&gt;bash"></p><h1 id="2-修改Windows-Terminal配置"><a href="#2-修改Windows-Terminal配置" class="headerlink" title="2. 修改Windows Terminal配置"></a>2. 修改Windows Terminal配置</h1><p>打开Windows Terminal进入到设置界面，然后点击左下角<code>打开Json文件</code>，在Json文件中找到<code>Profile</code>对象，然后在其子对象list中添加下述代码即可。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;acrylicOpacity&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0.75</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;closeOnExit&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;colorScheme&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Campbell&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;commandline&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bash.exe&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cursorColor&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cursorShape&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bar&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fontFace&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Consolas&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fontSize&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;historySize&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">9001</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git-bash&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;padding&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0, 0, 0, 0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;snapOnInput&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;startingDirectory&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;%USERPROFILE%&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;useAcrylic&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>关于<code>Icon</code>，可以邮件下载下边这张图，下载后修改后缀名为<code>ico</code>,在上述代码中添加<code>Icon</code>字段即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;图片路径\\git-for-windows.ico&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../../../images/Windows%20Terminal%20&%20GitBase/git-for-windows.png" alt="git-for-windows"></p><h1 id="补充-添加主题代码"><a href="#补充-添加主题代码" class="headerlink" title="补充 添加主题代码"></a>补充 添加主题代码</h1><p>直接复制替换Json配置文件中的<code>schemes</code>字段即可。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>Windows Terminal 主题相关配置</span></div>    <div class="hide-content"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;schemes&quot;</span><span class="hljs-punctuation">:</span> <br><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#0C0C0C&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;black&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#0C0C0C&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;blue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#0037DA&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#767676&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3B78FF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightCyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#61D6D6&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightGreen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#16C60C&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightPurple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#B4009E&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightRed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#E74856&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#F2F2F2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightYellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#F9F1A5&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cursorColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3A96DD&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#CCCCCC&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;green&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#13A10E&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Campbell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;purple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#881798&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;red&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C50F1F&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;white&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#CCCCCC&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;yellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C19C00&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#012456&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;black&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#0C0C0C&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;blue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#0037DA&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#767676&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3B78FF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightCyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#61D6D6&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightGreen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#16C60C&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightPurple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#B4009E&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightRed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#E74856&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#F2F2F2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightYellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#F9F1A5&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cursorColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3A96DD&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#CCCCCC&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;green&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#13A10E&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Campbell Powershell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;purple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#881798&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;red&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C50F1F&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;white&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#CCCCCC&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;yellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C19C00&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#282C34&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;black&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#282C34&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;blue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#61AFEF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#5A6374&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#61AFEF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightCyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#56B6C2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightGreen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#98C379&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightPurple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C678DD&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightRed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#E06C75&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#DCDFE4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightYellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#E5C07B&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cursorColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#56B6C2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#DCDFE4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;green&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#98C379&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;One Half Dark&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;purple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C678DD&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;red&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#E06C75&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;white&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#DCDFE4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;yellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#E5C07B&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FAFAFA&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;black&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#383A42&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;blue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#0184BC&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#4F525D&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#61AFEF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightCyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#56B5C1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightGreen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#98C379&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightPurple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C577DD&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightRed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#DF6C75&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightYellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#E4C07A&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cursorColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#4F525D&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#0997B3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#383A42&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;green&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#50A14F&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;One Half Light&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;purple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#A626A4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;red&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#E45649&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;white&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FAFAFA&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;yellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C18301&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#002B36&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;black&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#002B36&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;blue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#268BD2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#073642&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#839496&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightCyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#93A1A1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightGreen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#586E75&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightPurple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#6C71C4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightRed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#CB4B16&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FDF6E3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightYellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#657B83&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cursorColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#2AA198&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#839496&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;green&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#859900&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Solarized Dark&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;purple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#D33682&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;red&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#DC322F&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;white&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#EEE8D5&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;yellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#B58900&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FDF6E3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;black&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#002B36&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;blue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#268BD2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#073642&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#839496&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightCyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#93A1A1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightGreen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#586E75&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightPurple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#6C71C4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightRed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#CB4B16&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FDF6E3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightYellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#657B83&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cursorColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#002B36&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#2AA198&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#657B83&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;green&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#859900&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Solarized Light&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;purple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#D33682&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;red&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#DC322F&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;white&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#EEE8D5&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;yellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#B58900&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;black&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;blue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3465A4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#555753&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#729FCF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightCyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#34E2E2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightGreen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#8AE234&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightPurple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#AD7FA8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightRed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#EF2929&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#EEEEEC&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightYellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FCE94F&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cursorColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#06989A&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#D3D7CF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;green&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#4E9A06&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tango Dark&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;purple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#75507B&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;red&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#CC0000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;white&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#D3D7CF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;yellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C4A000&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;black&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;blue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3465A4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#555753&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#729FCF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightCyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#34E2E2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightGreen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#8AE234&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightPurple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#AD7FA8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightRed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#EF2929&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#EEEEEC&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightYellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FCE94F&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cursorColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#06989A&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#555753&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;green&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#4E9A06&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tango Light&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;purple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#75507B&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;red&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#CC0000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;white&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#D3D7CF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;yellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C4A000&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;black&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;blue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000080&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#808080&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#0000FF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightCyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#00FFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightGreen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#00FF00&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightPurple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF00FF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightRed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF0000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightYellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFF00&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cursorColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#008080&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C0C0C0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;green&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#008000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Vintage&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;purple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#800080&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;red&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#800000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;white&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#C0C0C0&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;yellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#808000&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;background&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;black&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#073642&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;blue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#268BD2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#002B36&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightBlue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#949800&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightCyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#93A1A1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightGreen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#00BC00&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightPurple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#6C71C4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightRed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#CB4B16&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightWhite&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FDF6E3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;brightYellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#657B83&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cursorColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFFFFF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cyan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#2AA198&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;green&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FFE79E&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lwz_solarized_light&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;purple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#D33682&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;red&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#DC322F&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#BFBFBF&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;white&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#EEE8D5&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;yellow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#B58900&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure></div></div>]]></content>
    
    
    <summary type="html">Windows Terminal 配置Git Bash | 颜色主题</summary>
    
    
    
    
    <category term="技巧" scheme="https://www.mingsrc.work/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="杂记" scheme="https://www.mingsrc.work/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="分享" scheme="https://www.mingsrc.work/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>前端样式整理</title>
    <link href="https://www.mingsrc.work/posts/3ec63883"/>
    <id>https://www.mingsrc.work/posts/3ec63883</id>
    <published>2021-11-10T04:02:30.854Z</published>
    <updated>2021-11-29T02:57:44.001Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="span-list"><a href="#span-list" class="headerlink" title="span list"></a>span list</h1>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html">1<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fas faa-ring animated-hover&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-bottom:3px solid green&quot;</span>&gt;</span>《半小时漫画中国哲学史》<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>2<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;font-size:20px;font:30px 书体坊兰亭体;color:blueviolent;word-spacing:30px;&quot;</span>&gt;</span>“ 既许一人以偏爱，愿尽余生之慷慨 ”<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>3<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;class: faa-bounce animated-hover;border-bottom: 5px solid #8F81EF;&quot;</span>&gt;</span>[data.json文件链接](https://pan.baidu.com/s/1omzU65YMpJr0jPPFItZ7SA )<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br> 4  <br><span class="hljs-tag">&lt;<span class="hljs-name">mark</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:royalBlue;border-bottom:lightblue 2px solid;color:white;font-family:consolas&quot;</span>&gt;</span>当使用重做日志文件来进行数据库恢复时，ORACLE将读取其中的重做记录(包括其中的修改向量)，并且将这些修改用于相关的块中。<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><br>5<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: PaleVioletRed;border-radius:10px;padding:1px 5px;color:white;font-weight:900&quot;</span>&gt;</span>存储结构管理主要就是通过对表空间的管理来实现的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>6<br><span class="hljs-tag">&lt;<span class="hljs-name">mark</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:green;border-radius:10px;color:white&quot;</span>&gt;</span>效果如下：<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><br>7<br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">10px</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight:700;font-family:&#x27;华文彩云&#x27;;color:rgb(100,190,100)&quot;</span>&gt;</span>基本语言(一)<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>8<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-bottom: 2px dashed #000000&quot;</span>&gt;</span>代码段、数据段、BSS段、堆区、文件映射区以及栈区<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>9<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:black;font:conloas;color:white;&quot;</span>&gt;</span><br><span class="hljs-symbol">&amp;nbsp;</span>数组长度为：3<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-symbol">&amp;nbsp;</span>请按任意键继续. . .<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>10<br><span class="hljs-tag">&lt;<span class="hljs-name">mark</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;background:red;font-weight:600;border_radius:100px&quot;</span>&gt;</span>但效率更高<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><ol><li><span class="fas faa-ring animated-hover" style="border-bottom:3px solid green">《半小时漫画中国哲学史》</span></li></ol><hr><ol start="2"><li><span style="text-align:center;font-size:20px;font:30px 书体坊兰亭体;color:blueviolent;word-spacing:30px;">“ 既许一人以偏爱，愿尽余生之慷慨 ”</span></li></ol><hr><ol start="3"><li><span style="class: faa-bounce animated-hover;border-bottom: 5px solid #8F81EF;"><a href="https://pan.baidu.com/s/1omzU65YMpJr0jPPFItZ7SA">data.json文件链接</a></span></li></ol><hr><ol start="4"><li><mark style="background:royalBlue;border-bottom:lightblue 2px solid;color:white;font-family:consolas">当使用重做日志文件来进行数据库恢复时，ORACLE将读取其中的重做记录(包括其中的修改向量)，并且将这些修改用于相关的块中。</mark></li></ol><hr><ol start="5"><li><span style="background: PaleVioletRed;border-radius:10px;padding:1px 5px;color:white;font-weight:900">存储结构管理主要就是通过对表空间的管理来实现的</span></li></ol><hr><ol start="6"><li><mark style="background:green;border-radius:10px;color:white;padding: 5px">效果如下：</mark></li></ol><hr><ol start="7"><li><font size="10px" style="font-weight:700;font-family:'华文彩云';color:rgb(100,190,100)">基本语言(一)</font></li></ol><hr><ol start="8"><li><span style="border-bottom: 2px dashed #000000">代码段、数据段、BSS段、堆区、文件映射区以及栈区</span></li></ol><hr><ol start="9"><li><div style="background:black;font:conloas;color:white;">&nbsp; 数组长度为：3 <br>&nbsp; 请按任意键继续. . .</div></li><li><p><mark style="color:white;background:red;font-weight:600;border_radius:100px">但效率更高</mark></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://www.mingsrc.work/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>初识VUE</title>
    <link href="https://www.mingsrc.work/posts/f1706fda"/>
    <id>https://www.mingsrc.work/posts/f1706fda</id>
    <published>2021-11-10T03:56:44.621Z</published>
    <updated>2021-12-12T12:52:46.301Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>总想学点什么，又不知道学点什么的好，刚好一直也在美化博客，就学点前端的知识，总比不学的好。希望能把自己的学习经验和学习经历记录整理，也便于以后用的时候复习该方面的知识。</p></blockquote><p>VUE是国人尤雨溪开发的一款前端框架，初步了解之后，确实很神奇，但由于仅仅只是学习，缺乏项目经验，因此本篇文章只记录Vue的相关语法。</p><p>我自己也是参考B站视频教程学习：<a href="https://www.bilibili.com/video/BV12J411m7MG?p=1">黑马程序员vue前端基础教程-4个小时带你快速入门vue</a></p><hr><p>[toc]</p><hr><p>在使用之前，有必要去vue官网查看相关的简介和快速开始，以便于对vue整体有一个初步的了解。</p><p>要是用vue，首先得引入相关js，即：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其次，学习Vue可能需要不断地去创建html文件，因此，最好整一个模板文件，每次都复制模板文件即可，这里po一个通用的vue-html文件模板：</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>Vue文件模板</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_01_Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123; message &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><h1 id="el挂载点"><a href="#el挂载点" class="headerlink" title="el挂载点"></a>el挂载点</h1><p>也是实现标签和js绑定的一个最基础的实现，大致语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span><br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>这里的<code>#app</code>就是所说的挂载点，如上代码便是实现<code>id</code>为<code>app</code>的标签的挂载。有了上述js代码，还得添加专门的标签才能生效和使用，语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123; message &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上标签就基本实现了一个初步的vue程序。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>完整代码</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_01_Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123; message &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>结果相关函数的一些高级用法</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Auraro<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://static.runoob.com/assets/vue/1.0.11/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>修改输入框的值，查看效果：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;* message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 字符串连接 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message + &#x27;官网地址：www.mingsrc.work&#x27; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 字符串反转 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> </span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;学习Vue&quot;</span>,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure></div></div><p>上述代码就是Vue的最基础的入门实例了，关于Vue的其他用法则需要一步一步了解。</p><div class="note green icon modern"><i class="note-icon fas fa-bullhorn"></i><p>其实不难发现，<code>new</code>出来的<code>Vue</code>的内容就是<code>json</code>格式的串。</p><ul><li><p>el作为一个挂载点出现在Json对象中</p></li><li><p>data则保存数据</p></li><li><p>相应的还有<code>methods</code>方法用来实现函数、交互等。</p></li></ul></div><h1 id="本地应用"><a href="#本地应用" class="headerlink" title="本地应用"></a>本地应用</h1><p>什么是本地应用？通俗理解就是js基于dom来获取并操作页面元素的方法，在Vue中使用以<code>v-</code>开头的特殊语法来实现，如<code>v-text</code>、<code>v-html</code>、<code>v-on</code>、<code>v-show</code>、<code>v-if</code>、<code>v-on</code>等一系列vue指令。</p><div class="tabs" id="选项卡二(默认为2)"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-1">v-text</button></li><li class="tab active"><button type="button" data-href="#选项卡二(默认为2)-2">v-html</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-3">v-on</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-4">v-show</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-5">v-if</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-6">v-bind</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-7">v-for</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-8">v-on补充</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-9">v-model</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="选项卡二(默认为2)-1"><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><p>就是把内容直接输出为内容，不进行渲染，以下为例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;&lt;a href=&quot;https://www.mingsrc.work&quot;&gt;Auraro&lt;/a&gt;&#x27;</span>,</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其输出就是 ：<code>&lt;a href=&quot;https://www.mingsrc.work&quot;&gt;Auraro&lt;/a&gt;</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="选项卡二(默认为2)-2"><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p>会把Json对象指向的内容渲染为HTML元素，同上代码，如果<code>v-text</code>替换为<code>v-html</code>，其输出就会变为：</p><p><a href="https://www.mingsrc.work">Auraro</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-3"><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>即交互事件，当发生点击事件时的处理，v-on有多种写法，可以使用<code>v-on</code>，也可以使用简写的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;v-on指令&quot;</span> v-<span class="hljs-attr">on</span>:click=<span class="hljs-string">&quot;doIt&quot;</span>&gt;<br>&lt;input type=&quot;button&quot; value=&quot;v-on简写&quot; @click=&quot;doIt&quot;&gt;<br>&lt;input type=&quot;button&quot; value=&quot;双击事件&quot; @dblclick=&quot;doIt&quot;&gt;<br></code></pre></td></tr></table></figure><p>直接pao一个代码：</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>v-on</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vue_04_交互<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://static.runoob.com/assets/vue/1.0.11/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;v-on指令&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;v-on简写&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;双击事件&quot;</span> @<span class="hljs-attr">dblclick</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> @<span class="hljs-attr">dblclick</span>=<span class="hljs-string">&quot;changeFood&quot;</span>&gt;</span>&#123;&#123; food &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">food</span>: <span class="hljs-string">&quot;西蓝花炒蛋&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">todos</span>: [</span><br><span class="language-javascript">      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;菜鸟教程&#x27;</span> &#125;,</span><br><span class="language-javascript">      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;www.runoob.com&#x27;</span> &#125;,</span><br><span class="language-javascript">      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;www.w3cschool.cc&#x27;</span> &#125;</span><br><span class="language-javascript">    ]</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">doIt</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;this is &#x27;Hello World&#x27; Button&quot;</span>);</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">changeFood</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">food</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">food</span>+=<span class="hljs-string">&quot;好好吃！&quot;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>使用v-on实现一个简单的计数器</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#app</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">button</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_05_+-<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://static.runoob.com/assets/vue/1.0.11/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-num&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sub&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">num</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;add&quot;</span>);</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> &lt; <span class="hljs-number">10</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>++;</span><br><span class="language-javascript">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;已经是最大值了&quot;</span>);</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">sub</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;sub&quot;</span>);</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>--;</span><br><span class="language-javascript">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;已经是最小值了&quot;</span>);</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-4"><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p><code>v-show</code>为标签的显示开关，可以通过设置<code>v-show</code>的值选择组件是否展示。</p><blockquote><p>#注意：v-show相当于通过设置标签的<code>visibility</code>为<code>hidden</code>，在源码中还是能看到该元素标签，对内存消耗较小。</p></blockquote><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>v-show用法示例</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeIsShow&quot;</span>&gt;</span>图片显示开关<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addArg&quot;</span>&gt;</span>累加Arg &#123;&#123; isShowArg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/1.jpg&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;v-show test&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/2.jpg&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShowArg&gt;=10&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;v-show test&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">isShow</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">isShowArg</span>: <span class="hljs-number">1</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">changeIsShow</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span>;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">addArg</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShowArg</span>++;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-5"><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>与<code>v-show</code>功能类似的还有<code>v-if</code>，但不同的是，<code>v-if</code>会直接隐藏掉源码，即通过修改HTML源码<del style="color:red">删除相应的标签</del>修改页面展示</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>v-if用法示例</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;切换文字显示状态&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggleIsShow&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span> &gt;</span> &#123;&#123; message &#125;&#125; 测试文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">toggleIsShow</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-6"><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>v-bind就是绑定的意思，可以绑定标签的一些属性，写法为<code>v-bind:src=“imgSrc”</code>，即绑定标签的src属性，设置其值为<code>Json</code>对象<code>imgSrc</code>的值。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>v-bind用法示例</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;切换&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggleActive&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgSrc&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;isActive?&#x27;active&#x27;:&#x27;&#x27;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgSrc&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;active:isActive&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">imgSrc</span>: <span class="hljs-string">&quot;../img/4.jpg&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">imgTitle</span>: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">toggleActive</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isActive</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isActive</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-7"><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>即Vue的遍历插件，会对Json数组对象的每个成员访问。下边使用v-for打印李商隐的《荷花》。</p><div class="note blue simple icon simple"><i class="note-icon fa fa-quote-left"></i><center><p><a href="https://so.gushiwen.cn/shiwenv_2c99bc7b0323.aspx">荷花      </a><br><a href="https://so.gushiwen.cn/authorv.aspx?name=%E6%9D%8E%E5%95%86%E9%9A%90">李商隐</a><a href="https://so.gushiwen.cn/shiwens/default.aspx?cstr=%E5%94%90%E4%BB%A3">〔唐代〕</a><br>都无色可并，不奈此香何。<br>瑶席乘凉设，金羁落晚过。<br>回衾灯照绮，渡袜水沾罗。<br>预想前秋别，离居梦棹歌。</p></center></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>v-for代码示例</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in msgArr&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">msgArr</span>: [</span><br><span class="language-javascript">                <span class="hljs-string">&quot;荷花&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;李商隐〔唐代〕&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;都无色可并，不奈此香何。&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;瑶席乘凉设，金羁落晚过。&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;回衾灯照绮，渡袜水沾罗。&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;预想前秋别，离居梦棹歌。&quot;</span></span><br><span class="language-javascript">                ]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器就会输出这首《荷花》。</p></div></div><p>需要注意的几个用法：</p><ul><li><p><code>v-for</code>的作用是：根据列表生成列表结构</p></li><li><p><code>v-for</code>主要和数组结合使用</p></li><li><p>语法<code>(item,index) in 数据</code> || <code>item in 数据</code></p></li><li><p><code>item</code>和<code>index</code>可以结合其他指令一起使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 指定标签title为it --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(it,index) in msg&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;it&quot;</span>&gt;</span>&#123;&#123; it &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>当然，也支持Json数组的解析。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">msg_2<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    title<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;荷花&quot;</span><span class="hljs-punctuation">,</span><br>    author<span class="hljs-punctuation">:</span><span class="hljs-string">&quot;李商隐〔唐代〕&quot;</span><span class="hljs-punctuation">,</span><br>    content<span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            sentence<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;都无色可并，不奈此香何。&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            sentence<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;瑶席乘凉设，金羁落晚过。&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br>            sentence<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;回衾灯照绮，渡袜水沾罗。&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br>            sentence<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;预想前秋别，离居梦棹歌。&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>使用上述Json数据时，则需要更改<code>v-for</code>的格式才能有效遍历：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;it_2 in msg_2.content&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;it_2&quot;</span>&gt;</span>&#123;&#123; it_2.secntence &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-8"><p>使用了<code>v-model</code>绑定了<code>input</code>，每点击一次按钮，界面就会增加输入框中的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_01_Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;打印输入内容&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;print(&#x27;hello&#x27;)&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;inputValue&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;msgBox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;it in showValue&quot;</span>&gt;</span>&#123;&#123; it.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">inputValue</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">showValue</span>:[]</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">print</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">showValue</span>.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputValue</span>&#125;)</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">msgBox</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;ok&quot;</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-9"><p>简而言之就是实现标签的绑定，应用于关联标签之间的数据绑定。在<code>v-on</code>补充中有相应的用法可以参考使用。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;% hideToggle 分割线 %&#125;<br><br>&#123;% endhideToggle %&#125;<br></code></pre></td></tr></table></figure><h2 id="综合上述所学，实现首页图片切换的功能"><a href="#综合上述所学，实现首页图片切换的功能" class="headerlink" title="综合上述所学，实现首页图片切换的功能"></a>综合上述所学，实现首页图片切换的功能</h2><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>代码</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>);</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">99</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">510px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-comment">/* padding: 20%; */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.imgShift</span>&#123;</span><br><span class="language-css">            zoom: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid white;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">1960px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">1060px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_09_ShiftImg<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mask&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;prev&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;right:45%&quot;</span>&gt;</span>←<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;next&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;left:45%&quot;</span>&gt;</span>→<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgArr[index]&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#x27;imgShift&#x27;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#mask&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">imgArr</span>: [</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;../img/2.jpg&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;../img/3.jpg&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;../img/4.jpg&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-string">&quot;../img/1.jpg&quot;</span></span><br><span class="language-javascript">                ],</span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">index</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">prev</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span>--;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span> &lt; <span class="hljs-number">0</span>)</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span> = <span class="hljs-number">3</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">next</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span>++;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span> &gt; <span class="hljs-number">3</span>)</span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">index</span> = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><h1 id="小黑记事本的实现"><a href="#小黑记事本的实现" class="headerlink" title="小黑记事本的实现"></a>小黑记事本的实现</h1><blockquote><p>结合以上所学，实现一个记事本功能，CSS样式修饰比较麻烦，仅就功能敲一下代码</p></blockquote><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>Temp_Code</span></div>    <div class="hide-content"><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_01_Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#todoapp</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>:grid;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">align-self</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">550px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">min-width</span>: <span class="hljs-number">230px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.4em</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;</span><br><span class="language-css">        <span class="hljs-attribute">filter</span><span class="hljs-selector-pseudo">:drop</span>-shadow(<span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">5px</span> rgb(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>));</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale3d</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);</span><br><span class="language-css">        <span class="hljs-attribute">transition</span>: <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.215</span>, <span class="hljs-number">0.610</span>, <span class="hljs-number">0.355</span>, <span class="hljs-number">1</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: white;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-id">#footer</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">138</span>, <span class="hljs-number">133</span>, <span class="hljs-number">133</span>);</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">182</span>, <span class="hljs-number">180</span>, <span class="hljs-number">180</span>) solid;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>:inline-block;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">15px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-bottom</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: inherit;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-id">#main</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;       </span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-id">#todo-list</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-id">#todo</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">list-style-type</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">font</span>: <span class="hljs-string">&#x27;微软雅黑&#x27;</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">194</span>, <span class="hljs-number">192</span>, <span class="hljs-number">192</span>) solid;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.new-todo</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">194</span>, <span class="hljs-number">192</span>, <span class="hljs-number">192</span>) solid;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>:flexbox;</span><br><span class="language-css">        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">opacity</span>(<span class="hljs-number">1</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: transparent<span class="hljs-meta">!important</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-id">#view</span> &#123;</span><br><span class="language-css">    </span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-id">#index</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: left;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-id">#destroy</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">10%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">9%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">opacity</span>(<span class="hljs-number">0</span>);</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-id">#destroy</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">opacity</span>(<span class="hljs-number">1</span>);</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">46</span>, <span class="hljs-number">115</span>, <span class="hljs-number">243</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-id">#info</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">850px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span>: center<span class="hljs-meta">!important</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: transparent;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">10%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">46</span>, <span class="hljs-number">115</span>, <span class="hljs-number">243</span>);</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">229</span>, <span class="hljs-number">221</span>, <span class="hljs-number">230</span>));</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.5</span>,<span class="hljs-number">1.5</span>);</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Franklin Gothic Medium&#x27;</span>, <span class="hljs-string">&#x27;Arial Narrow&#x27;</span>, Arial, sans-serif;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 主题区域 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;todoapp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> 记事本 <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;inputValue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入任务&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;new-todo&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 列表区域 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;todo-list&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;todo&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123; index+1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: left;&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;destroy&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;remove(index)&quot;</span>&gt;</span>×<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--统计和清空 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left;&quot;</span>&gt;</span>&#123;&#123; list.length &#125;&#125; items left<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: right;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span>clear<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 底部 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>CopyRight By mignming.shi<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#todoapp&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">list</span>:[<span class="hljs-string">&quot;牺牲你宝贵的时间去干了更宝贵的事情吗？&quot;</span>,<span class="hljs-string">&quot;保持思考&quot;</span>],</span><br><span class="language-javascript">                <span class="hljs-attr">inputValue</span>:<span class="hljs-string">&quot;&quot;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">add</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputValue</span>.<span class="hljs-property">length</span> != <span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">inputValue</span>);</span><br><span class="language-javascript">                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputValue</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">remove</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">splice</span>(x,<span class="hljs-number">1</span>);</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">clear</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = [];</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/../../../images/VUE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jsb.png" alt="image-20211123143018679"></p></div></div>]]></content>
    
    
    <summary type="html">VUE学习之路</summary>
    
    
    
    <category term="学习笔记，前端" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8C%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="VUE" scheme="https://www.mingsrc.work/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>《Effective C++》条款20~21</title>
    <link href="https://www.mingsrc.work/posts/93488446"/>
    <id>https://www.mingsrc.work/posts/93488446</id>
    <published>2021-11-10T03:32:54.470Z</published>
    <updated>2021-11-21T13:29:21.849Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>条款20：宁以<code>pass-by-reference-to-const</code>替换<code>pass-by-value</code></li><li>条款21：必须返回对象时，别往相反其reference</li></ul><blockquote><p><code>pass-by-value</code>和<code>pass-by-reference</code></p><p>20、21章 讲了<b>函数传参</b>过程<b>引用传值</b>和<b>值传递</b>应该以什么样的形式去处理。从函数的<u>入口</u>和<u>出口</u>两个方面讲了</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C++笔记" scheme="https://www.mingsrc.work/categories/C-%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Effective C++" scheme="https://www.mingsrc.work/categories/C-%E7%AC%94%E8%AE%B0/Effective-C/"/>
    
    
    <category term="Effective C++" scheme="https://www.mingsrc.work/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>软件分享</title>
    <link href="https://www.mingsrc.work/posts/a80b6d86"/>
    <id>https://www.mingsrc.work/posts/a80b6d86</id>
    <published>2021-06-25T13:21:44.333Z</published>
    <updated>2021-11-29T02:42:18.909Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Utools"><a href="#Utools" class="headerlink" title="Utools"></a>Utools</h1><p>可能是Windows里边最好的快捷方式呼出工具了，个人使用非常顺手。具体看<a href="https://u.tools/">官网</a>介绍吧！我只能说确实好用，也是把这个软件放在第一位的原因。</p><h1 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h1><p>全局搜索工具</p><h1 id="TrayS"><a href="#TrayS" class="headerlink" title="TrayS"></a>TrayS</h1><p>绿色版任务栏透明居中软件</p><h1 id="语雀"><a href="#语雀" class="headerlink" title="语雀"></a>语雀</h1><p>多端协同笔记短剑</p><h2 id="Mouse-Without-Borders"><a href="#Mouse-Without-Borders" class="headerlink" title="Mouse Without Borders"></a>Mouse Without Borders</h2><p>局域网内多台主机键鼠共享</p><h1 id="SpaceDesk"><a href="#SpaceDesk" class="headerlink" title="SpaceDesk"></a>SpaceDesk</h1><p>局域网内多台主机屏幕共享</p><h1 id="浏览器插件类"><a href="#浏览器插件类" class="headerlink" title="浏览器插件类"></a>浏览器插件类</h1><h2 id="油猴"><a href="#油猴" class="headerlink" title="油猴"></a>油猴</h2><p>可以下载和使用各种脚本，目前已经有大量的脚本可以直接去下载使用，非常方便</p><h2 id="微博图床"><a href="#微博图床" class="headerlink" title="微博图床"></a>微博图床</h2><p>可以建一个免费的专属于你个人的图床</p><h2 id="infinity-Pro"><a href="#infinity-Pro" class="headerlink" title="infinity Pro"></a>infinity Pro</h2><p>一个极简风格的标签页</p><h1 id="笔记类软件"><a href="#笔记类软件" class="headerlink" title="笔记类软件"></a>笔记类软件</h1><p>一款好用的markdown软件（可以配合百度云实现同步功能）</p><p><a href="https://typora.io/#">https://typora.io/#</a></p><p><img src="/../../../images/AllOFSW/image-20201012181725937.png" alt="image-20201012181725937"></p><p>博客框架Hexo</p><p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p><img src="/../../../images/AllOFSW/image-20201012181648993.png"></p><p><img src="/../../../images/AllOFSW/image-20201012181701043.png"></p><p>在线图片处理</p><p><a href="https://www.yasuotu.com/">https://www.yasuotu.com/</a></p><p><img src="/../../../images/AllOFSW/image-20201012181632367.png"></p><p>快用工具（文档、视频、图片、文件解压缩、数据分析）</p><p><a href="https://www.fastools.cn/doc">https://www.fastools.cn/doc</a></p><p><img src="/../../../images/AllOFSW/image-20201012182144932.png"></p><p>奶牛快传（文件快传）</p><p><a href="https://cowtransfer.com/?utm_source=nicelinks.site">https://cowtransfer.com/?utm_source=nicelinks.site</a></p><p><img src="/../../../images/AllOFSW/image-20201012182128085.png"></p><p>PPT网站资源整合</p><p><a href="https://www.hippter.com/?utm_source=nicelinks.site">https://www.hippter.com/?utm_source=nicelinks.site</a></p><p><img src="/../../../images/AllOFSW/image-20201012182235016.png"></p><p>标签生成器（shields.io）</p><p><img src="/../../../images/AllOFSW/image-20201012182319292.png"></p><p><img src="/../../../images/AllOFSW/image-20201012182346086.png"></p><p>语雀（在线笔记平台-阿里开发）</p><p><a href="https://www.yuque.com/dashboard">https://www.yuque.com/dashboard</a></p><p><img src="/../../../images/AllOFSW/yuque.png"></p>]]></content>
    
    
    <summary type="html">分享一些自己在学习工作中用到的软件</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>《我的团长我的团》</title>
    <link href="https://www.mingsrc.work/posts/f5df8c81"/>
    <id>https://www.mingsrc.work/posts/f5df8c81</id>
    <published>2021-06-13T04:47:49.550Z</published>
    <updated>2021-11-24T08:56:02.755Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div style="color:black;backdrop-filter: blur(10px) brightness(110%);font:25px 华文行楷;text-align:center;background-image:url(https://gitee.com/fole-del/img/raw/master/%E4%BF%A1.jpg);border-radius:25px;line-height:1.5;background-repeat: no-repeat;background-size: 65% 100%;background-position: center;">    <br>    我有眼泪给别人，但不愿<br>    为自己痛哭；我没有使自己<br>    适合于这世界，也没有美丽的<br>    自辟的国土，就只好永远<br>    <br>    渴望：为希望而生；在希望里<br>    死去，终于承认了不知道<br>    生命；接受了它又挥霍掉，<br>    只是历史的工具，长路上的<br>    <br>    一粒沙，所以拼命摆脱<br>    那黑影，而他们因此讥笑我；<br>    这就选择了寂寞，热闹的寂寞，<br>    <br>    用笑声骗自己，漂浮在庸俗<br>    生活的涡流里，而渐渐，我就说，<br>    我是个庸俗主义者，无心痛哭。<br>    <span style="text-align:right;">——杜运燮《赠友》</span>    <br>    <br>   </div><h2 id="剧情简介"><a href="#剧情简介" class="headerlink" title="剧情简介"></a>剧情简介</h2><div class="note success modern"><p>1942年，中缅边境有座叫禅达的小镇。时不时受到炮火袭击的地方，聚集着一群来自五湖四海的溃兵。他们是小太爷孟烦了（张译 饰）、军医郝兽医（罗京民 饰）、东北佬迷龙（张国强 饰）、阿译长官（王往 饰）、湖南人不辣（王大治 饰）等。他们只求有吃的死不了，如同活死尸。这时，师 长虞啸卿（邢佳栋 饰）出现了，他想利用这群散兵重组川军团，空降缅甸参加战争。但到达战场的小分队面对的却是已成定局的溃败。最后剩下的孟烦了一行人被逼退到四面楚歌的小屋里。外面是不断靠近的日本兵，危机的最高点，拯救他们的是自称团长的龙文章（段奕宏 饰）。<br>　　龙文章其人，由来不明，不按常理出牌，却奇迹地带领着孟烦了一行人渡过怒江，回到了禅达。等待他们的不是嘉奖，而是看守。而龙文章则被发现根本不是什么团长，而是摘了军衔自己挂帅的中尉。就在大家都猜测龙文章凶多吉少时，龙文章不仅没死还被虞啸卿任命为川军团团长，但等待他们的是更深的漩涡……</p></div><p><span style="border-bottom: 2px dashed #000000">主演： <a href="https://movie.douban.com/celebrity/1274291/">段奕宏</a> &#x2F; <a href="https://movie.douban.com/celebrity/1274761/">张译</a> &#x2F; <a href="https://movie.douban.com/celebrity/1274258/">张国强</a> &#x2F; <a href="https://movie.douban.com/celebrity/1274762/">邢佳栋</a> &#x2F; <a href="https://movie.douban.com/celebrity/1274252/">李晨</a> &#x2F; <a href="https://movie.douban.com/celebrity/1320815/">曹海涛</a> &#x2F; <a href="https://movie.douban.com/celebrity/1313992/">刘威葳</a> &#x2F; <a href="https://movie.douban.com/celebrity/1275669/">高峰</a> &#x2F; <a href="https://movie.douban.com/celebrity/1313471/">罗京民</a> &#x2F; <a href="https://movie.douban.com/celebrity/1316774/">王往</a> &#x2F; <a href="https://movie.douban.com/celebrity/1314858/">王大治</a> &#x2F; <a href="https://movie.douban.com/celebrity/1313486/">范雷</a> &#x2F; <a href="https://movie.douban.com/celebrity/1317139/">王迅</a> &#x2F; <a href="https://movie.douban.com/celebrity/1325197/">王东栋</a> &#x2F; <a href="https://movie.douban.com/celebrity/1318324/">刘天佐</a> &#x2F; <a href="https://movie.douban.com/celebrity/1314488/">谢孟伟</a> &#x2F; <a href="https://movie.douban.com/celebrity/1321566/">左腾云</a> &#x2F; <a href="https://movie.douban.com/celebrity/1355785/">赵志君</a> &#x2F; <a href="https://movie.douban.com/celebrity/1321805/">王大奇</a> &#x2F; <a href="https://movie.douban.com/celebrity/1320314/">袁菲</a> &#x2F; <a href="https://movie.douban.com/celebrity/1355786/">江奇翰</a> &#x2F; <a href="https://movie.douban.com/celebrity/1275728/">李泓良</a> &#x2F; <a href="https://movie.douban.com/celebrity/1331309/">杜建桥</a> &#x2F; <a href="https://movie.douban.com/celebrity/1318417/">张衡平</a> &#x2F; <a href="https://movie.douban.com/celebrity/1355787/">宿宇杰</a> &#x2F; <a href="https://movie.douban.com/subject_search?search_text=%E9%A9%AC%E4%BA%91">马云</a> &#x2F; <a href="https://movie.douban.com/celebrity/1355788/">何杰</a> &#x2F; <a href="https://movie.douban.com/celebrity/1327332/">白恩</a> &#x2F; <a href="https://movie.douban.com/celebrity/1316812/">柯志凌</a> &#x2F; <a href="https://movie.douban.com/celebrity/1274972/">曹操</a> &#x2F; <a href="https://movie.douban.com/celebrity/1355789/">吴有才</a> &#x2F; <a href="https://movie.douban.com/celebrity/1355790/">哈斯其其格</a> &#x2F; <a href="https://movie.douban.com/celebrity/1275948/">史航</a> &#x2F; <a href="https://movie.douban.com/celebrity/1355791/">邓宝</a> &#x2F; <a href="https://movie.douban.com/celebrity/1274763/">陈思诚</a> &#x2F; <a href="https://movie.douban.com/celebrity/1355792/">张衍</a> &#x2F; <a href="https://movie.douban.com/celebrity/1341886/">李京</a> &#x2F; <a href="https://movie.douban.com/celebrity/1355793/">杨在景</a> &#x2F; <a href="https://movie.douban.com/celebrity/1318613/">李博</a> &#x2F; <a href="https://movie.douban.com/celebrity/1330631/">刁海明</a> &#x2F; <a href="https://movie.douban.com/celebrity/1275188/">兰晓龙</a></span></p><h2 id="夸一夸"><a href="#夸一夸" class="headerlink" title="夸一夸"></a>夸一夸</h2><div class="note red no-icon simple"><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;🎉实在惊叹于<span style="border-bottom: 2px dashed #000000">演员演技的扎实和剧情的波澜起伏</span>。<br></p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 看的过程中实在是有太多的感慨。既是军人，也是逃兵，也是英雄，对角色的塑立实在犹如神来之笔。但这还仅仅只是个开始，文中人物谈吐皆具深意，随性一首便是对处境、遭遇、生死的感慨，借用网友一句来形容，那就是：</p><blockquote><p>“拍摄如电影，表演似话剧，以远征军历史为背景，探讨鲁迅式的国民性以及哈姆莱特式的生存命题。”</p><footer><strong>@抛书人</strong></footer></blockquote><p>就像剧中有句话说的那样，这世上，没有哪个人经得起挑剔</p></div><h2 id="豆瓣评价"><a href="#豆瓣评价" class="headerlink" title="豆瓣评价"></a>豆瓣评价</h2><iframe height="500px" width="100%" src="https://movie.douban.com/subject/2997325/comments?status=P"></iframe><h2 id="剧照"><a href="#剧照" class="headerlink" title="剧照"></a>剧照</h2><div class="justified-gallery"><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2052563604,1680387617&fm=26&gp=0.jpg" alt="img"></p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201901%2F01%2F20190101225255_LMiUN.thumb.700_0.jpeg&refer=http%3A%2F%2Fb-ssl.duitang.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186531&t=80e4bcb1c0b8027413f55b8302ab34e0" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fvsd-picture.cdn.bcebos.com%2Fe4ca2e2ec63a5127fe292e97e607587d61f4e429.jpg&refer=http%3A%2F%2Fvsd-picture.cdn.bcebos.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186531&t=74fe0aacea0448c5b84803adfc33e07f" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fq_70%2Cc_zoom%2Cw_640%2Fimages%2F20171125%2F1bcc16716d6f46a896f0f470e79d521b.jpeg&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186531&t=fb9080dfbeb4adc7e38c6f57b496e956" alt="img"><img src="https://ss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/728da9773912b31be8075e9f8d18367adab4e119.jpg" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.tv.cctv.com%2Fimage%2F20090310%2FIMAG1236649173204252.jpg&refer=http%3A%2F%2Fimg.tv.cctv.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186531&t=f448f2c7947ee6771cc8ac46ee1208d7" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg6.itiexue.net%2F2660%2F26603010.jpg&refer=http%3A%2F%2Fimg6.itiexue.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186613&t=808253a9ab2bd082aa3413c49a35a82b" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fgss0.baidu.com%2F-fo3dSag_xI4khGko9WTAnF6hhy%2Fzhidao%2Fpic%2Fitem%2Fd009b3de9c82d1589a4c2bf78b0a19d8bd3e42ad.jpg&refer=http%3A%2F%2Fgss0.baidu.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186613&t=7de8666ab70264e331d13905c6c9ca9c" alt="img"></p>          </div>]]></content>
    
    
    <summary type="html">&lt;span style=&quot;text-align:center;font:20px 华文行楷;color:blueviolent;word-spacing:30px;background-image:-webkit-linear-gradient(bottom,red,#990033,#AB2524);-webkit-background-clip:text;-webkit-text-fill-color:transparent;  &quot; &gt;一腔热血，满腔报国；无畏热血，一心为国&lt;/span&gt;&lt;br&gt;一部你值得看的剧，不一定是奥斯卡，不一定是金马。&lt;br&gt;十一人组成的炮灰团就够了吧</summary>
    
    
    
    
    <category term="分享" scheme="https://www.mingsrc.work/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="好剧" scheme="https://www.mingsrc.work/tags/%E5%A5%BD%E5%89%A7/"/>
    
  </entry>
  
</feed>
