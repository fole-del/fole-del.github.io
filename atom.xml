<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欧恩意</title>
  
  
  <link href="https://www.mingsrc.work/atom.xml" rel="self"/>
  
  <link href="https://www.mingsrc.work/"/>
  <updated>2022-07-09T04:06:05.071Z</updated>
  <id>https://www.mingsrc.work/</id>
  
  <author>
    <name>mingming.shi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OSI七层网络协议模型各层协议</title>
    <link href="https://www.mingsrc.work/posts/a5e076b8"/>
    <id>https://www.mingsrc.work/posts/a5e076b8</id>
    <published>2022-07-09T04:17:17.344Z</published>
    <updated>2022-07-09T04:06:05.071Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img-my.csdn.net/uploads/201201/5/0_1325744597WM32.gif" alt="img"></p><p><img src="/../../../images/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A8%A1%E5%9E%8B/osi.png" alt="osi"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="网络编程" scheme="https://www.mingsrc.work/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="协议" scheme="https://www.mingsrc.work/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>IPv6</title>
    <link href="https://www.mingsrc.work/posts/1d3badf2"/>
    <id>https://www.mingsrc.work/posts/1d3badf2</id>
    <published>2022-07-09T04:17:17.342Z</published>
    <updated>2022-07-09T04:06:05.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="IPv6地址格式"><a href="#IPv6地址格式" class="headerlink" title="IPv6地址格式"></a><strong>IPv6地址格式</strong></h1><p>IPv6的地址长度是128位（bit）。</p><p>将这128位的地址按每16位划分为一个段，将每个段转换成十六进制数字，并用冒号隔开。</p><p>例如：2000:0000:0000:0000:0001:2345:6789:abcd</p><p>这个地址很长，可以用两种方法对这个地址进行压缩，</p><p>前导零压缩法：</p><p>将每一段的前导零省略，但是每一段都至少应该有一个数字</p><p>例如：2000:0:0:0:1:2345:6789:abcd</p><p>双冒号法：</p><p>如果一个以冒号十六进制数表示法表示的IPv6地址中，如果几个连续的段值都是0，那么这些0可以简记为::。每个地址中只能有一个::。</p><p>例如：2000::1:2345:6789:abcd</p><h3 id="单播地址（Unicast-IPv6-Addresses）"><a href="#单播地址（Unicast-IPv6-Addresses）" class="headerlink" title="单播地址（Unicast IPv6 Addresses）"></a><strong>单播地址（<strong><strong>Unicast IPv6 Addresses</strong></strong>）</strong></h3><p>可聚合的全球单播地址（Aggregatable Global Unicast Addresses）</p><p>可在全球范围内路由和到达的，相当于IPv4里面的global addresses。前三个bit是001</p><p>例如：2000::1:2345:6789:abcd</p><p>链路本地地址（Link-Local Addresses）</p><p>用于同一个链路上的相邻节点之间通信，相当于IPv4里面的169.254.0.0&#x2F;16地址。Ipv6的路由器不会转发链路本地地址的数据包。前10个bit是1111 1110 10，由于最后是64bit的interface ID，所以它的前缀总是FE80::&#x2F;64</p><p>例如：FE80::1</p><p>站点本地地址（Site-Local Addresses）</p><p>对于无法访问internet的本地网络，可以使用站点本地地址，这个相当于IPv4里面的private address（10.0.0.0&#x2F;8, 172.16.0.0&#x2F;12, and 192.168.0.0&#x2F;16）。它的前10个bit是1111 1110 11，它最后是16bit的Subnet ID和64bit的interface ID，所以它的前缀是FEC0::&#x2F;48。</p><p>值得注意的是，在RFC3879中，最终决定放弃单播站点本地地址。放弃的理由是，由于其固有的二义性带来的单播站点本地地址的复杂性超过了它们可能带来的好处。它在RFC4193中被ULA取代。</p><p>唯一的本地IPv6单播地址（ULA，Unique Local IPv6 Unicast Address）</p><p>在RFC4193中标准化了一种用来在本地通信中取代单播站点本地地址的地址。ULA拥有固定前缀FD00::&#x2F;8，后面跟一个被称为全局ID的40bit随机标识符。</p><p>未指定地址（Unspecified address）</p><p>0:0:0:0:0:0:0:0 或者::</p><p>当一个有效地址还不能确定，一般用未指定地址作为源地址。未指定地址不能作为一个目标地址来使用。</p><p>回环地址（Loopback address）</p><p>回环地址::1用于标识一个回环接口，可以使一个节点可以给自己发送数据包。相当于IPv4的回环地址127.0.0.1</p><p>兼容IPv4的地址（IPv4-compatible address）</p><p>形如::w.x,y.z，这里的w.x.y.z是IPv4公共地址的十进制点号表示法，用于IPv6&#x2F;IPv4节点们（同时支持）在使用仅支持IPv4的网络上用IPv6的协议进行通信。</p><p>但是事实证明这种技术不是个好主意，RFC4291中废弃了对这类地址的使用。</p><p>IPv4映射地址（IPv4-mapped address）</p><p>形如::FFFF:w.x.y.z，这里的w.x.y.z是IPv4公共地址的十进制点号表示法,用于一个仅支持IPv4的节点表现为一个IPv6的节点</p><p>6over4地址</p><p>[64bit-prefix]:0:0:WWXX:YYZZ,其中的WWXX:YYZZ是w.x.y.z IPv4公共地址的十进制点号表示法，用于一个使用6to4协议的隧道机制的节点。</p><p>6to4地址</p><p>2002:WWXX:YYZZ:[SLA ID]:[Interface ID],用于表示一个使用6to4协议的隧道机制节点。</p><h3 id="多播IPv6地址（Multicast-IPv6-Addresses）"><a href="#多播IPv6地址（Multicast-IPv6-Addresses）" class="headerlink" title="多播IPv6地址（Multicast IPv6 Addresses）"></a><strong>多播IPv6地址（<strong><strong>Multicast IPv6 Addresses</strong></strong>）</strong></h3><p>前8个bit为1111 1111，</p><p>其中FF01::到FF0F::的多播地址是保留专用地址</p><p>FF01::1 节点本地范围所有节点多播地址</p><p>FF02::1 链路本地范围所有节点多播地址</p><p>FF01::2 节点本地范围所有路由器多播地址</p><p>FF02::2 链路本地范围所有路由器多播地址</p><p>FF05::2 站点本地范围所有路由器多播地址</p><h2 id="为-IPv6-划分子网"><a href="#为-IPv6-划分子网" class="headerlink" title="为 IPv6 划分子网"></a>为 IPv6 划分子网</h2><p>在对 IPv6 地址空间进行子网划分时，需要使用子网划分技术，以一种允许将剩余地址空间的摘要和委派路由到 IPv6 Intranet 的不同部分的方式，为 48 位全局地址前缀划分 16 位子网 ID 字段。</p><p>您不需要以任何特定的方式进行子网划分。此处介绍的子网划分技术假定您是通过使用子网 ID 字段的高序位划分其地址空间的可变部分来进行子网划分的。虽然此方法有助于分层寻址和路由，但此方法并不是非用不可。例如，在只有少数子网的小型组织中，您可以通过为子网编号（从 0 开始），轻松地为全局地址创建平面寻址空间。</p><h3 id="对全局地址前缀进行子网划分"><a href="#对全局地址前缀进行子网划分" class="headerlink" title="对全局地址前缀进行子网划分"></a>对全局地址前缀进行子网划分</h3><p>对于全局地址，Internet 编号分配机构 (IANA) 或 ISP 会分配一个前 48 位均为固定位的 IPv6 地址前缀。若要对 48 位全局地址前缀的子网 ID 字段进行子网划分，需要执行一个包含两步的过程：</p><table><thead><tr><th>1.</th><th>确定用于子网划分的位数。</th></tr></thead><tbody><tr><td>2.</td><td>枚举出新的子网网络前缀。</td></tr></tbody></table><p>确定用于子网划分的位数</p><p>用于子网划分的位数决定着您可以分配给您的网络各部分（基于地理区划或部门分类）的新子网网络前缀的可能的数量。在分层路由基础结构中，您必须确定您在层次结构的各层需要的网络前缀数，进而确定各层需要的位数。为层次结构的各层选择的位越多，您拥有的用于枚举层次结构最后一层中的单个子网的位越少。</p><p>例如，您可以实施一个包含两层的层次结构来反映地理&#x2F;部门结构，4 位用于地理层，6 位用于部门层。这一方案允许 16 个地理区域，各个区域中的各个部门只占剩余的子网划分空间的 6 (16 - 6 - 4) 位，或者说每个部门只有 64 (&#x3D;26) 个子网。</p><p>在层次结构中任何给定的层上，许多位已被层次结构中的上一层固定了 (<em>f</em>)，许多位被用来在层次结构中的当前层进行子网划分 (<em>s</em>)，还有许多位留给层次结构中的下一层使用 (<em>r</em>)。下面这个等式始终成立：<em>f</em>+<em>s</em>+<em>r</em> &#x3D; 16。</p><h3 id="枚举子网网络前缀"><a href="#枚举子网网络前缀" class="headerlink" title="枚举子网网络前缀"></a>枚举子网网络前缀</h3><p>根据用于子网划分的位数，您必须列出新的子网网络前缀，您可以使用下面两种主要方法之一：</p><table><thead><tr><th>•</th><th>使用子网 ID 和递增值的十六进制表示形式来枚举新的子网网络前缀。</th></tr></thead><tbody><tr><td>•</td><td>使用子网 ID 和递增值的十进制表示形式来枚举新的子网网络前缀。</td></tr></tbody></table><p>这两种方法产生的结果相同，都会生成子网网络前缀的一个枚举列表。</p><p>要使用十六进制方法创建子网网络前缀的枚举列表，请执行以下步骤：</p><table><thead><tr><th>1.</th><th>根据为子网划分选择的位数 <em>s</em> 和进行子网划分的网络前缀的前缀长度 <em>m</em>，计算以下各值：<em>f</em> &#x3D; <em>m</em> - 48<em>f</em> 是子网 ID 中已固定的位的数目。<em>n</em> &#x3D; 2s<em>n</em> 是您将获得的网络前缀的数目。<em>i</em> &#x3D; 216-(f+s) <em>i</em> 是以十六进制表示的各个连续子网 ID 之间的递增值。<em>P</em> &#x3D; <em>m+s**P</em> 是新的子网网络前缀的前缀长度。</th></tr></thead><tbody><tr><td>2.</td><td>创建一个包含 <em>n</em> 行、两列的表。第一列存放网络前缀编号（从 1 开始），第二列存放新的子网网络前缀。</td></tr><tr><td>3.</td><td>将使用新的前缀长度的原始网络前缀放在第一行的第二列中。例如，根据进行子网划分的子网 ID 的十六进制值 <em>F</em>，子网网络前缀为 [48 位前缀]:<em>F</em>::&#x2F;<em>P</em>。</td></tr><tr><td>4.</td><td>将站点本地地址或全局地址的子网 ID 部分中的值加上 <em>i</em>，将结果放在下一行的第二列中。例如，在第二行中，子网前缀为 [48 位前缀]:<em>F</em>+<em>i</em>::&#x2F;<em>P</em>。</td></tr><tr><td>5.</td><td>重复步骤 4，直到您完成该表。</td></tr></tbody></table><p>例如，要对全局地址前缀 3FFE:FFFF:0:C000::&#x2F;51 进行 3 位子网划分，首先计算前缀数量值、递增值和新前缀长度值。起始值是 <em>F</em>&#x3D;0xC000，<em>s</em>&#x3D;3，<em>m</em>&#x3D;51，因此 <em>f</em>&#x3D;51-48&#x3D;3。前缀的数量是 8 (<em>n</em>&#x3D;23)。递增值是 0x400 (<em>i</em>&#x3D;216-(3+3)&#x3D;1024&#x3D;0x400)。新的前缀长度是 54 (<em>P</em>&#x3D;51+3)。</p><p>接下来，构造一个包含 8 行的表，如表 4-12 所示。将 3FFE:FFFF:0:C000::&#x2F;54 放在网络前缀 1 所在的那一行的第二列，然后让网络前缀的子网 ID 部分依次递增 0x400，将结果分别填入后面的各行中。</p><p>下表为使用十六进制技术对 3FFE:FFFF:0:C000::&#x2F;51 进行 3 位子网划分：</p><table><thead><tr><th>网络前缀</th><th>子网网络前缀</th></tr></thead><tbody><tr><td>1</td><td>3FFE:FFFF:0:C000::&#x2F;54</td></tr><tr><td>2</td><td>3FFE:FFFF:0:C400::&#x2F;54</td></tr><tr><td>3</td><td>3FFE:FFFF:0:C800::&#x2F;54</td></tr><tr><td>4</td><td>3FFE:FFFF:0:CC00::&#x2F;54</td></tr><tr><td>5</td><td>3FFE:FFFF:0:D000::&#x2F;54</td></tr><tr><td>6</td><td>3FFE:FFFF:0:D400::&#x2F;54</td></tr><tr><td>7</td><td>3FFE:FFFF:0:D800::&#x2F;54</td></tr><tr><td>8</td><td>3FFE:FFFF:0:DC00::&#x2F;54</td></tr></tbody></table><p>要使用十进制方法创建子网网络前缀的枚举列表，请执行以下步骤：</p><table><thead><tr><th>1.</th><th>根据用于子网划分的位数 <em>s</em>、进行子网划分的网络前缀的前缀长度 <em>m</em> 和进行子网划分的子网 ID 的十六进制值 <em>F</em>，计算以下各值：<em>f</em> &#x3D; <em>m</em> - 48<em>f</em> 是子网 ID 中已固定的位的数目。<em>n</em> &#x3D; 2s<em>n</em> 是您将获得的网络前缀的数目。<em>i</em> &#x3D; 216-(f+s) <em>i</em> 是各个连续子网 ID 之间的递增值。<em>P</em> &#x3D; <em>m</em>+<em>s**P</em> 是新的子网网络前缀的前缀长度。<em>D</em> &#x3D; <em>F</em> 的十进制表示形式</th></tr></thead><tbody><tr><td>2.</td><td>创建一个包含 <em>n</em> 行、三列的表。第一列存放网络前缀编号（从 1 开始），第二列存放新的子网网络前缀的子网 ID 部分的十进制表示形式，第三列存放新的子网网络前缀。</td></tr><tr><td>3.</td><td>将子网 ID 的十进制表示形式 (<em>D</em>) 放在第一行的第一列，将子网前缀 [48 位前缀]:<em>F</em>::&#x2F;<em>P</em> 放在第一行的第二列。</td></tr><tr><td>4.</td><td>用子网 ID 十进制表示形式的值加上 <em>i</em>，将结果放在下一行的第二列。例如，第二行的子网 ID 的十进制表示形式是 <em>D</em>+<em>i</em>。</td></tr><tr><td>5.</td><td>在第三列中，将子网 ID 的十进制表示形式转换为十六进制，并构造前缀 [48 位前缀]:[<em>SubnetID</em>]::&#x2F;<em>P</em>。例如，在第二行中，子网网络前缀为 [48 位前缀]:[<em>D</em>+<em>i</em>（转换为十六进制）]::&#x2F;<em>P</em>。</td></tr><tr><td>6.</td><td>重复步骤 4 和 5，直到您完成该表。</td></tr></tbody></table><p>例如，要对站点本地网络前缀 3FFE:FFFF:0:C000::&#x2F;51 进行 3 位子网划分，首先计算前缀数量值、递增值、新前缀长度值和起始子网 ID 十进制表示形式。我们的起始值是 <em>F</em>&#x3D;0xC000，<em>s</em>&#x3D;3，<em>m</em>&#x3D;51，这样 <em>f</em>&#x3D;51-48&#x3D;3。前缀数量是 8 (<em>n</em>&#x3D;23)。递增值是 1024 (<em>i</em>&#x3D;216-(3+3))。新的前缀长度是 54 (<em>P</em>&#x3D;51+3)。起始子网 ID 的十进制表示形式是 49152 (D&#x3D;0xC000&#x3D;49152)。</p><p>接下来，构造一个包含 8 行的表，如表 4-13 所示。将 49192 放在网络前缀 1 所在的那一行的第一列，将 3FFE:FFFF:0:C000::&#x2F;54 放在该行的第二列。让网络前缀的子网 ID 部分（第四个十六进制块）依次递增 1024，然后将结果转换为十六进制并分别填入后面的各行中。</p><p>下表为使用十进制技术对 3FFE:FFFF:0:C000::&#x2F;51 进行 3 位子网划分：</p><table><thead><tr><th>网络前缀</th><th>子网 ID 的十进制表示形式</th><th>子网网络前缀</th></tr></thead><tbody><tr><td>1</td><td>49192</td><td>3FFE:FFFF:0:C000::&#x2F;54</td></tr><tr><td>2</td><td>50176</td><td>3FFE:FFFF:0:C400::&#x2F;54</td></tr><tr><td>3</td><td>51200</td><td>3FFE:FFFF:0:C800::&#x2F;54</td></tr><tr><td>4</td><td>52224</td><td>3FFE:FFFF:0:CC00::&#x2F;54</td></tr><tr><td>5</td><td>53248</td><td>3FFE:FFFF:0:D000::&#x2F;54</td></tr><tr><td>6</td><td>54272</td><td>3FFE:FFFF:0:D400::&#x2F;54</td></tr><tr><td>7</td><td>55296</td><td>3FFE:FFFF:0:D800::&#x2F;54</td></tr><tr><td>8</td><td>56320</td><td>3FFE:FFFF:0:DC00::&#x2F;54</td></tr></tbody></table><h3 id="变量长度子网划分"><a href="#变量长度子网划分" class="headerlink" title="变量长度子网划分"></a>变量长度子网划分</h3><p>与 IPv4 相同的是，您可以对 IPv6 地址前缀循环进行子网划分来在组织 Intranet 的各个层次提供路由摘要，定义单个子网的地址前缀可达到 64 位。与 IPv4 不同的是，您无法使用可变长度子网划分来创建不同大小的子网，因为所有 IPv6 子网都使用 64 位网络 ID 和 64 位接口 ID。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="网络编程" scheme="https://www.mingsrc.work/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="IPv6" scheme="https://www.mingsrc.work/tags/IPv6/"/>
    
  </entry>
  
  <entry>
    <title>Curl使用的一些demo，记录</title>
    <link href="https://www.mingsrc.work/posts/f3b237b1"/>
    <id>https://www.mingsrc.work/posts/f3b237b1</id>
    <published>2022-07-09T04:17:17.338Z</published>
    <updated>2022-07-09T04:06:05.064Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="1、编译及使用"><a href="#1、编译及使用" class="headerlink" title="1、编译及使用"></a>1、编译及使用</h1><h2 id="1-1-编译"><a href="#1-1-编译" class="headerlink" title="1.1 编译"></a>1.1 编译</h2><h3 id="1-1-1下载"><a href="#1-1-1下载" class="headerlink" title="1.1.1下载"></a>1.1.1下载</h3><p><a href="https://github.com/curl/curl">GitHub - curl&#x2F;curl: A command line tool and library for transferring data with URL syntax, supporting DICT, FILE, FTP, FTPS, GOPHER, GOPHERS, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP. libcurl offers a myriad of powerful features</a></p><p>点击链接下载，也可以使用<code>git clone</code>到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/curl/curl.git<br></code></pre></td></tr></table></figure><h3 id="1-1-2-编译"><a href="#1-1-2-编译" class="headerlink" title="1.1.2 编译"></a>1.1.2 编译</h3><ul><li>方法一 VS编译器</li></ul><p>如果需要使用vs编译，首先运行 <code>project</code> 目录下的 <code>generate.bat</code> 文件。然后在<code>projects/Windwows</code> 目录下打开对应的解决方案即可</p><ul><li>方法二 nmake</li></ul><p>在下载目录 <code>winbuild</code> 目录下，查看 <a href>README.md</a> ，里边告诉了我们如何编译自己需要的包，以我本人使用的为例。</p><ol><li><p>打开对应版本的vs命令行工具</p><p><img src="/../../../images/Curl%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20220624124518653.png" alt="image-20220624124518653"></p></li><li><p>进入对应的编译目录 <code>curl-src\winbuild</code>，接着执行以下命令就好。具体的命令参数可以查看winbuild目录下的介绍，选择自己需要的环境就好。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmake /f Makefile.vc mode=dll vc=15 MACHINE=x86<br></code></pre></td></tr></table></figure><ol start="3"><li>执行以后就能在根目录 <code>build</code> 下看到生成了对应的文件夹，这时候就可以在项目中使用了。注意生成目录下有 <code>bin、include、lib</code> 三个文件夹。</li></ol><h2 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h2><p>将生成的文件拖动到项目所在文件夹目录下，这时候需要做以下几个步骤，打开项目的属性页面：</p><h3 id="1-2-1-预处理器"><a href="#1-2-1-预处理器" class="headerlink" title="1.2.1 预处理器"></a>1.2.1 预处理器</h3><p>在预处理器中添加以下字段：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">;BUILDING_LIBCURL;HTTP_ONLY;<br></code></pre></td></tr></table></figure><h3 id="1-2-2-附加库"><a href="#1-2-2-附加库" class="headerlink" title="1.2.2 附加库"></a>1.2.2 附加库</h3><ol><li><p>在链接器中附加库目录，把lib文件夹添加到附加库目录当中</p></li><li><p>添加lib文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">libcurl_a.lib;Ws2_32.lib;Wldap32.lib;winmm.lib;Crypt32.lib;Normaliz.lib;%(AdditionalDependencies)<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-3-3-使用"><a href="#1-3-3-使用" class="headerlink" title="1.3.3 使用"></a>1.3.3 使用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;curl/curl.h&quot;</span></span><br><br><span class="hljs-function">string <span class="hljs-title">UriHelper::Encode</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; source)</span></span><br><span class="hljs-function"></span>&#123;<br>CURL* curl = <span class="hljs-built_in">curl_easy_init</span>();<br><span class="hljs-type">char</span>* cres = <span class="hljs-built_in">curl_easy_escape</span>(curl, source.<span class="hljs-built_in">c_str</span>(), source.<span class="hljs-built_in">length</span>());<br><span class="hljs-function">string <span class="hljs-title">res</span><span class="hljs-params">(cres)</span></span>;<br><span class="hljs-built_in">curl_free</span>(cres);<br><span class="hljs-built_in">curl_easy_cleanup</span>(curl);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello World!\n&quot;</span>;<br><br>    std::cout &lt;&lt; <span class="hljs-built_in">Encode</span>(<span class="hljs-string">R&quot;(https://10.92.4.117:8443/tac</span><br><span class="hljs-string">        /download/client/com.qianxin.trustagent.win.standard.exe.bm-3.1.1.4585/</span><br><span class="hljs-string">        TrustAgent_standard_3.1.1.4585.aef031d09[10.92.4.117@443].exe)&quot;</span>) &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><div style="background-color:black;color:white;font-family:conloas;">输出：<br>http0.0000000.0000000.000000www.baidu.com0.000000s0.000000ie%3Dutf-8 0.000000%3D8 %3Dbaidu%26wd%3D5.185438E-3164%B8%B48.694087E-3156%97%B65.190920E-3169%820.000000E5.12199E-31670.000000E%B1</div>]]></content>
    
    
    <summary type="html">Curl的demo</summary>
    
    
    
    
    <category term="C++" scheme="https://www.mingsrc.work/tags/C/"/>
    
    <category term="HTTP" scheme="https://www.mingsrc.work/tags/HTTP/"/>
    
    <category term="网络编程" scheme="https://www.mingsrc.work/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Curl" scheme="https://www.mingsrc.work/tags/Curl/"/>
    
  </entry>
  
  <entry>
    <title>热补丁支持</title>
    <link href="https://www.mingsrc.work/posts/c787e847"/>
    <id>https://www.mingsrc.work/posts/c787e847</id>
    <published>2022-07-09T04:16:31.938Z</published>
    <updated>2022-07-09T04:21:15.089Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>补丁是指衣服、被褥上为遮掩破洞而钉补上的小布块。明白了吗？</p><blockquote><p>现在也指对于大型<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>系统(如<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/233219">微软操作系统</a>)在使用过程中暴露的问题（一般由<a href="https://baike.baidu.com/item/%E9%BB%91%E5%AE%A2/118396">黑客</a>或<a href="https://baike.baidu.com/item/%E7%97%85%E6%AF%92/21267">病毒</a>设计者发现）而发布的解决问题的小程序。就像衣服烂了就要打补丁一样，人编写程序不可能十全十美的，所以<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>也免不了会出现BUG，而补丁是专门修复这些BUG做的因为原来发布的软件存在缺陷，发现之后另外编制一个小程序使其完善，这种小程序俗称补丁。补丁是由<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6/12053">软件</a>的原来作者制作的，可以访问网站下载补丁。</p><p>补丁一般都是 <code>.exe</code> 文件</p></blockquote><h2 id="微软补丁"><a href="#微软补丁" class="headerlink" title="微软补丁"></a>微软补丁</h2><p><a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF">微软</a>的<a href="https://baike.baidu.com/item/Windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">Windows操作系统</a>比较大，比较复杂。因此总有考虑不周的地方。有些病毒或者黑客就利用微软的漏洞进行攻击。微软发现漏洞后就发布一些补丁程序。 我们得到微软的补丁程序后安装到计算机上就叫打补丁。</p><blockquote><p>什么是微软补丁？</p><p>微软发布的系统补丁有两种类型：<code>Hotfix</code> 和 <code>Service Pack</code>，下面介绍它们之间的区别和联系。</p><ul><li><code>hotfix</code> 是微软针对某一个具体的系统漏洞或安全问题而发布的专门解决程序，<code>Hotfix</code>的程序文件名有严格的规定，一般格式为“产品名-KBXXXXXX-处理器平台-语言版本.exe”。现在一个例子来详细说明：微软针对震荡病毒而发布的<code>Hotfix</code>程序名为“Win2K-KB835732-X86-CHS.exe”，我们知道这个补丁是针对Win2000系统的，其知识库编号为 835732，应用于 X86 处理器平台，语言版本为简体中文。</li><li><code>Hotfix</code> 是针对某一个具体问题而发布的解决程序，因此它会经常发布，数量非常大。用户想要知道目前已经发布了哪些<code>Hotfix</code>程序是一件非常麻烦的事。因此微软将这些<code>Hotfix</code>补丁全部打包成一个程序提供给用户安装，这就是<code>Service Pack</code>，简称<code>SP</code>。<code>Service Pack</code>包含了发布日期以前所有的<code>Hotfix</code>程序，因此只要安装了它，就可以保证自己不会漏掉一个<code>Hotfix</code>程序。而且发布时间晚的<code>Service Pack</code>程序会包含以前的<code>Service Pack</code>，例如 <code>SP3</code>会包含<code>SP1</code>、<code>SP2</code>的所有补丁。</li></ul></blockquote><h1 id="热补丁支持"><a href="#热补丁支持" class="headerlink" title="热补丁支持"></a>热补丁支持</h1><blockquote><p>重新引导一台机器以便把最新的补丁都应用上，这对于服务器来说可能会意味着一段显著的宕机时间，这也正是为什么Windows要支持运行时刻的补丁方法，称为热补丁（hot patch，或简化为hotpatch）。与之相反的是冷补丁（coldpatch），它要求一次重新引导。热补丁并非只是简单地允许文件可在执行过程中被覆盖;相反地，它包括了一系列可能会被请求执行的复杂操作（这些操作也可能会组合起来）。</p></blockquote><h2 id="热补丁执行操作"><a href="#热补丁执行操作" class="headerlink" title="热补丁执行操作"></a>热补丁执行操作</h2><p>下表列出了这些操作：</p><table><thead><tr><th>操作</th><th>含义</th><th>用途</th></tr></thead><tbody><tr><td>映像文件改名称<br>（Rename Image)</td><td>替换磁盘上一个正在被其他应用程序使用的DLL，或者替换磁盘上一个已经被内核加载到系统中的驱动程序</td><td>当一个用户模式的库需要完整地被替换的时候，内核可以检测到哪些进程和服务正在引用该库，将它们卸载出内存，然后更新DLL，再重新启动这些程序和服务（通过<u>重启管理器</u>[restart manager]来完成）。当一个驱动程序需要被替换的时候，内核可以卸载该驱动程序（该驱动程序要求有一个卸载例程），更新驱动程序，然后重新加载替换后的驱动程序</td></tr><tr><td>对象交换<br>（Object Swap）</td><td>以原子操作的方式更改对象目录名字空间中的一个对象</td><td>当一个文件（往往是已知的DLL）需要被原子凡事修改名称，但不影响任何可能正在使用该文件的进程时（所以，这些进程可以立即使用新的文件，且仍然使用老的句柄，但不要求应用程序重新启动）</td></tr><tr><td>补丁函数代码<br>（Patch Function Code）</td><td>将一个映像文件中的一个或多个函数的代码替换为新的版本</td><td>如果在运行时刻一个DLL或驱动程序不能被替换或修改名称，则该映像中的函数可以直接被打上补丁。对于一个包含了新代码的热补丁DLL，当老的函数被调用时，它会跳转到新的代码中。</td></tr><tr><td>刷新系统DLL<br>（Refresh System DLL）</td><td>重新为Ntdll.dll加载内存映射区对象</td><td>Windows的系统原生库Ntdll.dll只在系统引导过程中被加载一次，以后只是被简单地复制到每个新进程的地址空间中。如果它呗热补丁了，那么，系统必须刷新这一内存区对象，以便加载新的版本</td></tr></tbody></table><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><mark style="background-color:red">运行时刻卸载</mark></p><p>热补丁文件的构成除了包括要替换的函数部分，还包括一个<u><code>Update.exe</code>的程序</u>以及<u>一个额外的<code>.hp</code>热补丁文件</u>。</p><ul><li><code>Update.exe</code>：完成该补丁的提取工作，也执行相应的更新过程。</li><li><code>.hp</code>热补丁文件：此文件包含一个特殊的<code>PE头</code>，称为<code>.HOT1</code>。该PE头包含了一个数据结构，描述了该文件中出现的各种补丁描述符（patch descriptor）。每一个补丁描述述符指明了在原始文件中需要被补丁的偏移位置、一个验证机制（它可以包含一份老数据的简单比较、一个校验和，或者一个散列值），以及待补丁的新数据。内核将解析这些描述符，并且执行恰当的修改动作。若是被保护的进程（protected process，有关进程的更多信息，参见《深入理解Windows操作系统》第5章），或者其他经过数字签名的二进制映像，在这些情况下，热补丁也必须被经过数字签名，以避免针对敏感文件或进程执行“伪造的”补丁。</li></ul><p>在编译时刻对热补丁的支持，是通过在每个函数的开始处加入7个额外的字节来做到的。其中5个字节被看做前一个函数的结束部分，2个字节被看作<strong>函数前缀</strong>（function prolog）部分，也就是函数的开始。</p><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>使用热补丁也存在一些限制：</p><ol><li>与安全软件的不兼容。像安全软件类的第三方应用程序可能会阻止这样的补丁；补丁也可能与第三方应用程序的操作系统不兼容</li><li>补丁要修改一个文件的导出表或导入表</li><li>补丁要改变数据结构，修正无限循环，或者包含内联的汇编代码</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="立志博览群书" scheme="https://www.mingsrc.work/categories/%E7%AB%8B%E5%BF%97%E5%8D%9A%E8%A7%88%E7%BE%A4%E4%B9%A6/"/>
    
    <category term="Windows" scheme="https://www.mingsrc.work/categories/%E7%AB%8B%E5%BF%97%E5%8D%9A%E8%A7%88%E7%BE%A4%E4%B9%A6/Windows/"/>
    
    <category term="《深入理解Widnows操作系统》" scheme="https://www.mingsrc.work/categories/%E7%AB%8B%E5%BF%97%E5%8D%9A%E8%A7%88%E7%BE%A4%E4%B9%A6/Windows/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Widnows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
    
    <category term="Windows" scheme="https://www.mingsrc.work/tags/Windows/"/>
    
    <category term="《深入理解Windows操作系统》" scheme="https://www.mingsrc.work/tags/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>加载lib</title>
    <link href="https://www.mingsrc.work/posts/b8eebba5"/>
    <id>https://www.mingsrc.work/posts/b8eebba5</id>
    <published>2022-07-09T04:14:57.044Z</published>
    <updated>2022-07-09T04:06:05.085Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>using的用法参考 <a href>使用using起别名</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp">﻿<span class="hljs-comment">// plugin_test.cpp : 此文件包含 &quot;main&quot; 函数。程序执行将在此处开始并结束。</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;PluginTrustAgent.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;PipeIPC/PipeIPC.h&quot;</span></span><br><span class="hljs-comment">//#pragma comment(lib, &quot;../PluginTrustAgent/Release/PluginTrustAgent.lib&quot;) //添加lib文件引用  </span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;--- Pipe Test ---\n&quot;</span>;<br><br>HINSTANCE hDLL; <span class="hljs-comment">// Handle to DLL</span><br><span class="hljs-keyword">using</span> pPlugin = PluginTrustAgent * (*)();<br>    <span class="hljs-comment">//    // 每个ext文件都提供该导出接口，由框架加载</span><br>    <span class="hljs-comment">// @ service 框架服务指针，由框架为每个插件创建，插件使用该指针享受框架服务，该 </span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    IPlugin* STDCALLTYPE CreateQAXPlugin(IService* service) &#123;</span><br><span class="hljs-comment">        assert(service);</span><br><span class="hljs-comment">        g_Service = service;</span><br><span class="hljs-comment">        return PluginTrustAgent::CreateInstance();</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br><span class="hljs-keyword">using</span> pPlugin_Par = PluginTrustAgent * (*)(IService* service);<br><br>hDLL = <span class="hljs-built_in">LoadLibrary</span>(<span class="hljs-string">L&quot;TrustAgentPlugin.ext&quot;</span>);<br> <span class="hljs-keyword">if</span> (hDLL != <span class="hljs-literal">NULL</span>)<br>&#123;<br>pPlugin aaa = (pPlugin)<span class="hljs-built_in">GetProcAddress</span>(hDLL,<br><span class="hljs-string">&quot;CreateQAXPlugin_1&quot;</span>);<br>pPlugin_Par bbb = (pPlugin_Par)<span class="hljs-built_in">GetProcAddress</span>(hDLL,<br><span class="hljs-string">&quot;CreateQAXPlugin&quot;</span>);<br><br>PluginTrustAgent* plugin = <span class="hljs-built_in">aaa</span>();<br><br>IService *service = <span class="hljs-literal">nullptr</span>;<br>PluginTrustAgent* plugin_par = <span class="hljs-built_in">bbb</span>(service);<br><span class="hljs-keyword">if</span> (!plugin)<br>&#123;<br><span class="hljs-comment">// handle the error</span><br><span class="hljs-built_in">FreeLibrary</span>(hDLL);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">// call the function</span><br>plugin_par-&gt;<span class="hljs-built_in">PluginInit</span>();<br>&#125;<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>windows 查看进程启动参数命令行</title>
    <link href="https://www.mingsrc.work/posts/2d2bb46a"/>
    <id>https://www.mingsrc.work/posts/2d2bb46a</id>
    <published>2022-07-09T04:14:56.925Z</published>
    <updated>2022-07-09T04:06:05.081Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Windows-查看进程启动参数命令行"><a href="#Windows-查看进程启动参数命令行" class="headerlink" title="Windows 查看进程启动参数命令行"></a>Windows 查看进程启动参数命令行</h1><h2 id="使用wmic查看"><a href="#使用wmic查看" class="headerlink" title="使用wmic查看"></a>使用<code>wmic</code>查看</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wmic process where caption=&quot;【进程名】&quot; get caption,commandline /value<br></code></pre></td></tr></table></figure><p>也可以通过打印所有的命令行参数之后进行筛选</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wmic process get caption,commandline /value | findstr &quot;【进程名，特征字符串等】&quot;<br></code></pre></td></tr></table></figure><h2 id="使用任务管理器查看"><a href="#使用任务管理器查看" class="headerlink" title="使用任务管理器查看"></a>使用任务管理器查看</h2><p>打开任务管理器，在<kbd>详细信息</kbd>栏，右击标题列<code>-&gt;</code>选择列，找到命令行，勾选即可。</p><p><img src="/../../../images/CommandstartProcess/image-20220425100222890.png" alt="选择命令行列"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="OS" scheme="https://www.mingsrc.work/categories/OS/"/>
    
    <category term="Windows" scheme="https://www.mingsrc.work/categories/OS/Windows/"/>
    
    <category term="cmd" scheme="https://www.mingsrc.work/categories/OS/Windows/cmd/"/>
    
    
    <category term="Windows" scheme="https://www.mingsrc.work/tags/Windows/"/>
    
    <category term="cmd" scheme="https://www.mingsrc.work/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>try-catch块</title>
    <link href="https://www.mingsrc.work/posts/458ec124"/>
    <id>https://www.mingsrc.work/posts/458ec124</id>
    <published>2022-07-09T04:13:48.409Z</published>
    <updated>2022-07-09T04:06:04.992Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote><p><b>Try 块：</b></p><p>将一或多个异常处理块（catch 子句）与复合语句关联。</p></blockquote><ol><li>声明一个具名形参的 catch 子句</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span> &#123; <span class="hljs-comment">/* */</span> &#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp; e) &#123; <span class="hljs-comment">/* */</span> &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>声明一个无名形参的 catch 子句</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span> &#123; <span class="hljs-comment">/* */</span> &#125; <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception&amp;) &#123; <span class="hljs-comment">/* */</span> &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>catch-all 处理块，可被任何异常激活</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">try</span> &#123; <span class="hljs-comment">/* */</span> &#125; <span class="hljs-built_in">catch</span> (...) &#123; <span class="hljs-comment">/* */</span> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="C++" scheme="https://www.mingsrc.work/tags/C/"/>
    
    <category term="异常" scheme="https://www.mingsrc.work/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Lambda表达式</title>
    <link href="https://www.mingsrc.work/posts/bbcf5ff7"/>
    <id>https://www.mingsrc.work/posts/bbcf5ff7</id>
    <published>2022-07-09T04:13:48.403Z</published>
    <updated>2022-07-09T04:06:04.990Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>字符串类型转换整理(char、TCHAR、string、wstring、CString、WCHAR)</title>
    <link href="https://www.mingsrc.work/posts/6a0979b1"/>
    <id>https://www.mingsrc.work/posts/6a0979b1</id>
    <published>2022-07-09T04:13:48.396Z</published>
    <updated>2022-07-09T04:06:04.987Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><h1 id="string-lt-–-gt-CString"><a href="#string-lt-–-gt-CString" class="headerlink" title="string &lt;–&gt; CString"></a>string &lt;–&gt; CString</h1><h2 id="string-gt-CString"><a href="#string-gt-CString" class="headerlink" title="string -&gt; CString"></a>string -&gt; CString</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::string str = <span class="hljs-string">&quot;string&quot;</span>;<br>CString csRet;<br><span class="hljs-comment">// csRet.Format(&quot;%s&quot;, str.c_str());</span><br><span class="hljs-comment">// 如果上句报错就使用</span><br>csRet.<span class="hljs-built_in">Format</span>(_T(<span class="hljs-string">&quot;%s&quot;</span>), str.<span class="hljs-built_in">c_str</span>());<br></code></pre></td></tr></table></figure><h2 id="CString-gt-string"><a href="#CString-gt-string" class="headerlink" title="CString -&gt; string"></a>CString -&gt; string</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">CString <span class="hljs-title">cstr</span><span class="hljs-params">(<span class="hljs-string">&quot;string&quot;</span>)</span></span>;<br><br>string <br></code></pre></td></tr></table></figure><h1 id="string-lt-–-gt-wstring"><a href="#string-lt-–-gt-wstring" class="headerlink" title="string &lt; – &gt; wstring"></a>string &lt; – &gt; wstring</h1><h2 id="string-gt-wstring"><a href="#string-gt-wstring" class="headerlink" title="string -&gt; wstring"></a>string -&gt; wstring</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;locale&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;codecvt&gt;</span></span><br> <br><span class="hljs-comment">//convert string to wstring</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> std::wstring <span class="hljs-title">to_wide_string</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; input)</span></span><br><span class="hljs-function"></span>&#123;<br>std::wstring_convert&lt;std::codecvt_utf8&lt;<span class="hljs-type">wchar_t</span>&gt;&gt; converter;<br><span class="hljs-keyword">return</span> converter.<span class="hljs-built_in">from_bytes</span>(input);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="wstring-gt-string"><a href="#wstring-gt-string" class="headerlink" title="wstring -&gt; string"></a>wstring -&gt; string</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//convert wstring to string </span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> std::string <span class="hljs-title">to_byte_string</span><span class="hljs-params">(<span class="hljs-type">const</span> std::wstring&amp; input)</span></span><br><span class="hljs-function"></span>&#123;<br>std::wstring_convert&lt;std::codecvt_utf8&lt;<span class="hljs-type">wchar_t</span>&gt;&gt; converter;<br><span class="hljs-keyword">return</span> converter.<span class="hljs-built_in">to_bytes</span>(input);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="C++" scheme="https://www.mingsrc.work/tags/C/"/>
    
    <category term="String" scheme="https://www.mingsrc.work/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>⏰ 时间处理</title>
    <link href="https://www.mingsrc.work/posts/44d77dab"/>
    <id>https://www.mingsrc.work/posts/44d77dab</id>
    <published>2022-07-09T04:13:48.279Z</published>
    <updated>2022-07-09T04:06:05.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Simple-Demo"><a href="#Simple-Demo" class="headerlink" title="Simple Demo"></a>Simple Demo</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">time_t</span> t;<br>    <span class="hljs-built_in">time</span>(&amp;t);<br>    cout &lt;&lt; t &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码会输出一个10位数，表示的是到当前时间的秒数，起点是 <code>1970年1月1日 00:00:00</code></p><h2 id="time-t-转换"><a href="#time-t-转换" class="headerlink" title="time_t 转换"></a><code>time_t</code> 转换</h2><ol><li><p><code>string</code> 转 <code>time_t</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">time_t</span> <span class="hljs-title">StringToDatetime</span><span class="hljs-params">(std::string str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> *cha = (<span class="hljs-type">char</span>*)str.<span class="hljs-built_in">data</span>();             <span class="hljs-comment">// 将string转换成char*。</span><br>    tm tm_;                                    <span class="hljs-comment">// 定义tm结构体。</span><br>    <span class="hljs-type">int</span> year, month, day, hour, minute, second;<span class="hljs-comment">// 定义时间的各个int临时变量。</span><br>    <span class="hljs-built_in">sscanf</span>(cha, <span class="hljs-string">&quot;%d-%d-%d %d:%d:%d&quot;</span>, &amp;year, &amp;month, &amp;day, &amp;hour, &amp;minute, &amp;second);<span class="hljs-comment">// 将string存储的日期时间，转换为int临时变量。</span><br>    tm_.tm_year = year - <span class="hljs-number">1900</span>;                 <span class="hljs-comment">// 年，由于tm结构体存储的是从1900年开始的时间，所以tm_year为int临时变量减去1900。</span><br>    tm_.tm_mon = month - <span class="hljs-number">1</span>;                    <span class="hljs-comment">// 月，由于tm结构体的月份存储范围为0-11，所以tm_mon为int临时变量减去1。</span><br>    tm_.tm_mday = day;                         <span class="hljs-comment">// 日。</span><br>    tm_.tm_hour = hour;                        <span class="hljs-comment">// 时。</span><br>    tm_.tm_min = minute;                       <span class="hljs-comment">// 分。</span><br>    tm_.tm_sec = second;                       <span class="hljs-comment">// 秒。</span><br>    tm_.tm_isdst = <span class="hljs-number">0</span>;                          <span class="hljs-comment">// 非夏令时。</span><br>    <span class="hljs-type">time_t</span> t_ = <span class="hljs-built_in">mktime</span>(&amp;tm_);                  <span class="hljs-comment">// 将tm结构体转换成time_t格式。</span><br>    <span class="hljs-keyword">return</span> t_;                                 <span class="hljs-comment">// 返回值。</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>time_t</code> 转 <code>string</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp">(<span class="hljs-number">1</span>)<br>    <span class="hljs-type">time_t</span> t=std::chrono::system_clock::<span class="hljs-built_in">to_time_t</span>(std::chrono::system_clock::<span class="hljs-built_in">now</span>());<br>    std::stringstream ss;<br>    ss&lt;&lt;std::<span class="hljs-built_in">put_time</span>(std::<span class="hljs-built_in">localtime</span>(&amp;t),<span class="hljs-string">&quot;%F %X&quot;</span>);<br>    ss.<span class="hljs-built_in">str</span>();<br>(<span class="hljs-number">2</span>)<br>    <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">strftime</span> <span class="hljs-params">(<span class="hljs-type">char</span>* ptr, <span class="hljs-type">size_t</span> maxsize, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* format,</span></span><br><span class="hljs-params"><span class="hljs-function">                 <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> tm* timeptr )</span></span>;<br>    ptr:存储转换结果<br>    maxsize:复制到ptr的最大字符数，包括结束符<span class="hljs-string">&#x27;\0&#x27;</span><br>    format:转换格式，类似printf，可加入其他需要复制过去的字符<br>    timeptr:时间<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">20</span>];<br>    tm* local_time = std::<span class="hljs-built_in">localtime</span>(&amp;t);<br>    <span class="hljs-built_in">strftime</span>(buf,<span class="hljs-built_in">sizeof</span>(buf),<span class="hljs-string">&quot;%F %X&quot;</span>,local_time);<br></code></pre></td></tr></table></figure></li></ol><h1 id="C-时间类"><a href="#C-时间类" class="headerlink" title="C++时间类"></a>C++时间类</h1><p>使用C++时间类处理获取系统当前时间 <a href="https://www.apiref.com/cpp-zh/cpp/chrono.html">日期和时间工具 - C++中文 - API参考文档 (apiref.com)</a></p><p>头文件 <code>#include &lt;chrono&gt;</code></p><ol><li>获取当前时间</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">system_clock::time_point now = std::chrono::system_clock::<span class="hljs-built_in">now</span>();<br></code></pre></td></tr></table></figure><ol start="2"><li>将当前时间转换为time_格式</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">time_t</span> tt = std::chrono::system_clock::<span class="hljs-built_in">to_time_t</span>(now);<br></code></pre></td></tr></table></figure><ol start="3"><li>将time_格式的时间转换为tm *格式</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tm</span>* tmNow = <span class="hljs-built_in">localtime</span>(&amp;tt);<br></code></pre></td></tr></table></figure><ol start="4"><li>将tm*格式的时间转换为可读的时间</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> date[<span class="hljs-number">20</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">sprintf</span>(date, <span class="hljs-string">&quot;%d-%02d-%02d %02d:%02d:%02d&quot;</span>,(<span class="hljs-type">int</span>)tmNow-&gt;tm_year + <span class="hljs-number">1900</span>, (<span class="hljs-type">int</span>)tmNow-&gt;tm_mon + <span class="hljs-number">1</span>, (<span class="hljs-type">int</span>)tmNow-&gt;tm_mday,  (<span class="hljs-type">int</span>)tmNow-&gt;tm_hour, (<span class="hljs-type">int</span>)tmNow-&gt;tm_min, (<span class="hljs-type">int</span>)tmNow-&gt;tm_sec);<br></code></pre></td></tr></table></figure><p>最后，在C++中的话可以将char*字符串转换为std::string字符串来处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::string <span class="hljs-title">timeNow</span><span class="hljs-params">(date)</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">C++获取处理时间</summary>
    
    
    
    
    <category term="C++" scheme="https://www.mingsrc.work/tags/C/"/>
    
    <category term="时间" scheme="https://www.mingsrc.work/tags/%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>各种宏定义用法整理</title>
    <link href="https://www.mingsrc.work/posts/f089cdba"/>
    <id>https://www.mingsrc.work/posts/f089cdba</id>
    <published>2022-07-09T04:13:48.156Z</published>
    <updated>2022-07-09T04:06:04.996Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C语言ASCII字符、16进制和BCD码值互转，各种好用的宏定义取值"><a href="#C语言ASCII字符、16进制和BCD码值互转，各种好用的宏定义取值" class="headerlink" title="C语言ASCII字符、16进制和BCD码值互转，各种好用的宏定义取值"></a>C语言ASCII字符、16进制和BCD码值互转，各种好用的宏定义取值</h1><p><strong>1、把Ascii字符转16进制</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/***************************</span><br><span class="hljs-comment">函数名:Ascii2Hex</span><br><span class="hljs-comment">功能描述:把Ascii字符转16进制</span><br><span class="hljs-comment">参数：Ascii字符</span><br><span class="hljs-comment">返回：16进制</span><br><span class="hljs-comment">***************************/</span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-title">Ascii2Hex</span><span class="hljs-params">( <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> bAscii )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> bHex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>( ( bAscii &gt;= <span class="hljs-number">0</span> ) &amp;&amp; ( bChar &lt;= <span class="hljs-number">9</span> ) )<br>    &#123;<br>        bHex = bAscii + <span class="hljs-number">0x30</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( ( bAscii &gt;= <span class="hljs-number">10</span> ) &amp;&amp; ( bAscii &lt;= <span class="hljs-number">15</span> ) )<br>    &#123;<br>        bHex = bAscii + <span class="hljs-number">0x37</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        bHex = <span class="hljs-number">0xff</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> bHex;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、把16进制转Ascii字符</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/***************************</span><br><span class="hljs-comment">函数名:Hex2Ascii</span><br><span class="hljs-comment">功能描述:把16进制转Ascii字符</span><br><span class="hljs-comment">参数：16进制</span><br><span class="hljs-comment">返回：Ascii字符</span><br><span class="hljs-comment">***************************/</span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> <span class="hljs-title">Hex2Ascii</span><span class="hljs-params">( <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> bHex )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> bAscii = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>( ( bHex &gt;= <span class="hljs-string">&#x27;0&#x27;</span> ) &amp;&amp; ( bHex &lt;= <span class="hljs-string">&#x27;9&#x27;</span> ) )<br>    &#123;<br>        bAscii =  bHex - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( ( bHex &gt;= <span class="hljs-string">&#x27;A&#x27;</span> ) &amp;&amp; ( bHex &lt;= <span class="hljs-string">&#x27;F&#x27;</span> ) )<br>    &#123;<br>        bAscii = bHex - <span class="hljs-string">&#x27;7&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( ( bHex &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ) &amp;&amp; ( bHex &lt;= <span class="hljs-string">&#x27;f&#x27;</span> ) )<br>    &#123;<br>        bAscii = bHex - <span class="hljs-number">0x57</span>;<br>    &#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>bAscii = <span class="hljs-number">0xff</span>;<br>&#125;<br>    <span class="hljs-keyword">return</span> bAscii;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、把16进制转BCD值</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/***************************</span><br><span class="hljs-comment">函数名:Hex2Bcd</span><br><span class="hljs-comment">功能描述:把16进制转BCD值</span><br><span class="hljs-comment">参数：16进制值</span><br><span class="hljs-comment">返回：BCD值</span><br><span class="hljs-comment">***************************/</span><br><span class="hljs-function">u_8 <span class="hljs-title">Hex2Bcd</span><span class="hljs-params">( u_8 HexCode )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span>( ( HexCode % <span class="hljs-number">10</span> ) + ( HexCode / <span class="hljs-number">10</span> * <span class="hljs-number">16</span> ) );<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4、把BCD值转2进制</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/***************************</span><br><span class="hljs-comment">函数名:Bcd2Bin</span><br><span class="hljs-comment">功能描述:把BCD值转2进制</span><br><span class="hljs-comment">参数：BCD值</span><br><span class="hljs-comment">返回：2进制值</span><br><span class="hljs-comment">***************************/</span><br><span class="hljs-function">u_8 <span class="hljs-title">Bcd2Bin</span><span class="hljs-params">( u_8 BcdCode )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span>( ( ( ( BcdCode &gt;&gt; <span class="hljs-number">4</span> ) &amp; <span class="hljs-number">0x0F</span> ) * <span class="hljs-number">10</span> ) + ( BcdCode &amp; <span class="hljs-number">0x0F</span> ));  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5、把2进制转BCD值</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/***************************</span><br><span class="hljs-comment">函数名:Bin2BCD</span><br><span class="hljs-comment">功能描述:把2进制转BCD值</span><br><span class="hljs-comment">参数：2进制值</span><br><span class="hljs-comment">返回：BCD值</span><br><span class="hljs-comment">***************************/</span><br><span class="hljs-function">u_8 <span class="hljs-title">Bin2BCD</span><span class="hljs-params">( u_8 BinCode )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span>( ( ( (BinCode)/<span class="hljs-number">10</span> ) &lt;&lt; <span class="hljs-number">4</span> ) + ( (BinCode) %<span class="hljs-number">10</span> ));  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6、把x值的第i位置为1</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/********把x值的第i位置为1*************/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> X_SETBIT( x , i )       ( (x) |= ( 0x1 &lt;&lt; (i) )) </span><br></code></pre></td></tr></table></figure><p><strong>7、把x值的第i位清为0</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**********把x值的第i位清为0**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> X_CLRBIT( x , i )       ( (x) &amp;= ( ~( 0x01 &lt;&lt; (i) )))</span><br></code></pre></td></tr></table></figure><p><strong>8、判断x值的第i位是否为1</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********判断x值的第i位是否为1**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> X_CHKBIT( x , i )       ( ((x) &gt;&gt; (i) ) &amp; 0x01 )</span><br></code></pre></td></tr></table></figure><p><strong>9、x,y值中的最小值</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********x,y值中的最小值**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> X_MIN( x ,y )           (((x)&gt;(y))?(y):(x))</span><br></code></pre></td></tr></table></figure><p><strong>10、x,y值中的最大值</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********x,y值中的最大值**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> X_MAX( x ,y )           (((x)&gt;(y))?(x):(y))</span><br></code></pre></td></tr></table></figure><p><strong>11、取i值的低8位</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********取i值的低8位**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_4_BYTE(i)    (u_8)( ( (i) &amp; 0xFF ) &gt;&gt; 0 )</span><br></code></pre></td></tr></table></figure><p><strong>12、取i值的8-16位</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********取i值的8-16位**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_3_BYTE(i)    (u_8)( ( (i) &amp; 0xFF00 ) &gt;&gt; 8 )</span><br></code></pre></td></tr></table></figure><p><strong>13、取i值的16-24位</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********取i值的16-24位**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_2_BYTE(i)    (u_8)( ( (i) &amp; 0xFF0000 ) &gt;&gt; 16 ) </span><br></code></pre></td></tr></table></figure><p><strong>14、取i值的24-32位</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********取i值的24-32位**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GET_1_BYTE(i)    (u_8)( ( (i) &amp; 0xFF000000 ) &gt;&gt; 24 )</span><br></code></pre></td></tr></table></figure><p><strong>15、4个字节为int型变量</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********4个字节为int型变量**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BYTE_TO_INT( byte,byte1,byte2,byte3 )    ( (byte&lt;&lt;24) | (byte1 &lt;&lt; 16) | (byte2 &lt;&lt; 8) | byte3 )</span><br></code></pre></td></tr></table></figure><p><strong>16、2个字节为short型变量</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********2个字节为short型变量**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BYTE_TO_SHORT( byte ,byte1)       ( (byte&lt;&lt;8)  | byte1 )</span><br></code></pre></td></tr></table></figure><p><strong>17、int型变量为4个字节</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********int型变量为4个字节**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INT_TO_BYTE( Val,byte )      do&#123; (byte)[0] = ((Val)&gt;&gt;24)&amp;0xff;\</span><br><span class="hljs-meta">                                            (byte)[1] = ((Val)&gt;&gt;16)&amp;0xff;\</span><br><span class="hljs-meta">                                            (byte)[2] = ((Val)&gt;&gt;8)&amp;0xff;\</span><br><span class="hljs-meta">                                            (byte)[3] = ((Val))&amp;0xff;\</span><br><span class="hljs-meta">                                        &#125;while(0)</span><br></code></pre></td></tr></table></figure><p><strong>18、short型变量为2个字节</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********short型变量为2个字节**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SHORT_TO_BYTE( Val ,byte)     do&#123; (byte)[0] = ((Val)&gt;&gt;8)&amp;0xff;\</span><br><span class="hljs-meta">                                             (byte)[1] = (Val)&amp;0xff;\</span><br><span class="hljs-meta">                                        &#125;while(0)</span><br></code></pre></td></tr></table></figure><p><strong>19、标准时间time转换字符串输出</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********标准时间time转换字符串输出**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TIME_2_STR(t, str) do&#123; tm_t tmtime;\</span><br><span class="hljs-meta">         gmtime_r( (time_t *)&amp;t,&amp;tmtime );\</span><br><span class="hljs-meta">         sprintf(str,<span class="hljs-string">&quot;%04d-%02d-%02d %02d:%02d:%02d&quot;</span>,1900 + tmtime.tm_year, tmtime.tm_mon + 1, \</span><br><span class="hljs-meta">                          tmtime.tm_mday,tmtime.tm_hour, tmtime.tm_min, tmtime.tm_sec);\</span><br><span class="hljs-meta">                             &#125;while(0)  </span><br></code></pre></td></tr></table></figure><p><strong>20、IP值转换IP字符串输出</strong>              </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*********IP值转换IP字符串输出**********/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IPADDR_2_STR(lIp, str) do&#123; u_8 ipaddr[4];\</span><br><span class="hljs-meta">     memcpy (&amp;(ipaddr[0]), &amp;(lIp), 4);\                                                 </span><br>     <span class="hljs-built_in">sprintf</span>(str,<span class="hljs-string">&quot;%03d.%03d.%03d.%03d&quot;</span>,ipaddr[<span class="hljs-number">0</span>],ipaddr[<span class="hljs-number">1</span>],ipaddr[<span class="hljs-number">2</span>],ipaddr[<span class="hljs-number">3</span>]);\<br>                                  &#125;<span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>)   <br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="宏定义" scheme="https://www.mingsrc.work/tags/%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    
    <category term="用法" scheme="https://www.mingsrc.work/tags/%E7%94%A8%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>using 用法整理</title>
    <link href="https://www.mingsrc.work/posts/bd8baef4"/>
    <id>https://www.mingsrc.work/posts/bd8baef4</id>
    <published>2022-07-09T04:13:48.149Z</published>
    <updated>2022-07-09T04:06:04.994Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><blockquote><p>简单整理一下using的用法</p></blockquote><h1 id="一、命名空间"><a href="#一、命名空间" class="headerlink" title="一、命名空间"></a>一、命名空间</h1><h1 id="二、使用using起别名"><a href="#二、使用using起别名" class="headerlink" title="二、使用using起别名"></a>二、使用using起别名</h1><p>相当于 <code>typedef</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> std::vector&lt;<span class="hljs-type">int</span>&gt; intvec;<br><span class="hljs-keyword">using</span> intvec= std::vector&lt;<span class="hljs-type">int</span>&gt;;<br></code></pre></td></tr></table></figure><p>以上两种写法等价。同样两种方式也都适用于函数别名的声明。如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 代码 2-2</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span> <span class="hljs-params">(*FP)</span> <span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> std::string&amp;)</span></span>;<br></code></pre></td></tr></table></figure><p>代码 2-2 使用 <code>typedef</code> 为 <code>void (int, const std::string&amp;)</code> 创建了一个别名 <code>FP</code>。同样我们</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Qt在Win系统上的消息通知</title>
    <link href="https://www.mingsrc.work/posts/b6305743"/>
    <id>https://www.mingsrc.work/posts/b6305743</id>
    <published>2022-07-09T04:13:14.218Z</published>
    <updated>2022-07-09T04:11:29.933Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><p>需求描述： Qt应用程序在windows系统上发送win消息通知</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码实现很简单，主要调用的接口为<code>QSystemTrayIcon.showMessage()</code></p><p>使用的Demo为 <a href="https://blog.csdn.net/Fuel_Ming/article/details/124348526">【Qt】 鼠标 hover 操作时弹出文字气泡_欧恩意的博客-CSDN博客</a> 这篇文章，结合图片隐藏显示，在系统显示通知。</p><h2 id="widget-h"><a href="#widget-h" class="headerlink" title="widget.h"></a>widget.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> WIDGET_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIDGET_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QWidget&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QImage&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPixmap&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QSystemTrayIcon&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QMenu&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QIcon&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QAction&gt;</span></span><br><br>QT_BEGIN_NAMESPACE<br><span class="hljs-keyword">namespace</span> Ui &#123; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span>; &#125;<br>QT_END_NAMESPACE<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span> : <span class="hljs-keyword">public</span> QWidget<br>&#123;<br>    Q_OBJECT<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Widget</span>(QWidget *parent = <span class="hljs-literal">nullptr</span>);<br>    ~<span class="hljs-built_in">Widget</span>();<br><span class="hljs-keyword">public</span>:<br>    QSystemTrayIcon *trayIcon;<br><span class="hljs-keyword">private</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stTrayIconActive</span><span class="hljs-params">(QSystemTrayIcon::ActivationReason acReason)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_pushButton_clicked</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    Ui::Widget *ui;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// WIDGET_H</span></span><br><br></code></pre></td></tr></table></figure><h2 id="widget-cpp"><a href="#widget-cpp" class="headerlink" title="widget.cpp"></a>widget.cpp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &quot;widget.h&quot;<br>#include &quot;ui_widget.h&quot;<br><br>Widget::Widget(QWidget *parent)<br>    : QWidget(parent)<br>    , ui(new Ui::Widget)<br>&#123;<br>    ui-&gt;setupUi(this);<br><br>    QPixmap img(&quot;:/Win11.jpg&quot;);<br><br>    ui-&gt;label-&gt;setPixmap(img);<br>    ui-&gt;label-&gt;setScaledContents(true);<br>    ui-&gt;label-&gt;setToolTip(QString(&quot;壁纸《Win11.png》&quot;));<br>    ui-&gt;pushButton-&gt;setToolTip(QString(&quot;隐藏或显示图片&quot;));<br><br>    QIcon icon = QApplication::style()-&gt;standardIcon((QStyle::StandardPixmap)0);<br>    QIcon icon1 = QApplication::style()-&gt;standardIcon((QStyle::StandardPixmap)9);<br><br>    //设置通知栏的图标<br>    trayIcon = new QSystemTrayIcon(this);<br>    trayIcon-&gt;setIcon(icon);<br><br>    //设置通知栏的单击事件<br>    connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)), this, SLOT(stTrayIconActive(QSystemTrayIcon::ActivationReason)));<br><br>    //设置通知栏的右键菜单<br>    QMenu * menu = new QMenu();<br><br>    //设置菜单项目<br>    QAction *actionHide = new QAction(icon, &quot;Hide&quot;, menu);<br><br>    menu-&gt;addAction(actionHide);<br>    trayIcon-&gt;setContextMenu(menu);<br>    // 设置Action的响应<br>    connect(actionHide, SIGNAL(triggered()), this, SLOT(stActionHide()));<br>    trayIcon-&gt;show();<br><br>    //托盘的消息提示<br>    trayIcon-&gt;showMessage(&quot;title&quot;, &quot;this is a message&quot;, icon1);<br>&#125;<br><br>Widget::~Widget()<br>&#123;<br>    delete ui;<br>&#125;<br><br>void Widget::stTrayIconActive(QSystemTrayIcon::ActivationReason acReason)<br>&#123;<br>    switch (acReason)<br>    &#123;<br>    case QSystemTrayIcon::Trigger:<br>    &#123;<br>        showNormal();<br>        break;<br>    &#125;<br>    default:<br>        ;<br>    &#125;<br>&#125;<br><br>void Widget::on_pushButton_clicked()<br>&#123;<br>    QIcon icon = QApplication::style()-&gt;standardIcon((QStyle::StandardPixmap)0);<br>    QIcon icon1 = QApplication::style()-&gt;standardIcon((QStyle::StandardPixmap)9);<br><br>    if(ui-&gt;label-&gt;isVisible())<br>    &#123;<br>        trayIcon-&gt;showMessage(&quot;提醒&quot;, &quot;隐藏图片&quot;, icon1);<br>        ui-&gt;label-&gt;hide();<br>    &#125;<br>    else<br>    &#123;<br>        trayIcon-&gt;showMessage(&quot;提醒&quot;, &quot;显示图片&quot;, icon1);<br>        ui-&gt;label-&gt;setVisible(true);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="widget-ui"><a href="#widget-ui" class="headerlink" title="widget.ui"></a>widget.ui</h2><p><img src="/../../../images/Qt_Win_%E9%80%9A%E7%9F%A5/image-20220422170405017.png" alt="UI"></p><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p><img src="/../../../images/Qt_Win_%E9%80%9A%E7%9F%A5/%E5%BD%95%E5%88%B6_2022_04_22_17_06_18_829.gif" alt="演示"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Qt" scheme="https://www.mingsrc.work/tags/Qt/"/>
    
    <category term="win" scheme="https://www.mingsrc.work/tags/win/"/>
    
    <category term="通知" scheme="https://www.mingsrc.work/tags/%E9%80%9A%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Qt 自定义气泡</title>
    <link href="https://www.mingsrc.work/posts/27d6f89f"/>
    <id>https://www.mingsrc.work/posts/27d6f89f</id>
    <published>2022-07-09T04:13:14.213Z</published>
    <updated>2022-07-09T04:11:24.532Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><p>Qt 自定义气泡</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Qt" scheme="https://www.mingsrc.work/tags/Qt/"/>
    
    <category term="气泡" scheme="https://www.mingsrc.work/tags/%E6%B0%94%E6%B3%A1/"/>
    
    <category term="自定义控件" scheme="https://www.mingsrc.work/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Qt事件过滤器（eventFilter）</title>
    <link href="https://www.mingsrc.work/posts/33aafa79"/>
    <id>https://www.mingsrc.work/posts/33aafa79</id>
    <published>2022-07-09T04:13:14.204Z</published>
    <updated>2022-07-09T04:11:22.543Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="事件过滤器"><a href="#事件过滤器" class="headerlink" title="事件过滤器"></a>事件过滤器</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QObject::installEventFilter</span><span class="hljs-params">(QObject *filterObj)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">eventFilter</span><span class="hljs-params">(QObject *obj, QEvent *event)</span></span>;<br></code></pre></td></tr></table></figure><p>Qt的事件过滤由以上两个方法实现，首先安装一个事件过滤器，然后重写 <code>bool eventFilter(QObject *obj, QEvent *event)</code>。</p><p><code>filterObj</code>表示事件筛选器对象，它接收发送到此<code>QObject</code>对象的所有事件。筛选器可以停止事件，也可以将事件转发给此<code>QObject</code>对象。事件过滤器<code>filterObj</code>通过它的<code>eventFilter()</code>函数接收事件。</p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>当鼠标进入 <code>lineEdit</code> 的时候并且操作时 <code>HoverEnter</code> 的时候，则修改 <code>QLabel</code> 的颜色。</p></blockquote><ol><li>安装事件过滤器</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ui-&gt;lineEdit-&gt;<span class="hljs-built_in">installEventFilter</span>(<span class="hljs-keyword">this</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>重写 <code>eventFilter()</code></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Widget::eventFilter</span><span class="hljs-params">(QObject *wcg, QEvent *event)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (wcg == ui-&gt;lineEdit)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">type</span>() == QEvent::HoverEnter)<br>        &#123;<br>            ui-&gt;label_2-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;进入&quot;</span>));<br>            ui-&gt;label_2-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QLabel&#123;color:red;&#125;&quot;</span>);<br>            <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;进入&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(event-&gt;<span class="hljs-built_in">type</span>() == QEvent::HoverLeave)<br>        &#123;<br>            ui-&gt;label_2-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;离开&quot;</span>));<br>            ui-&gt;label_2-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;QLabel&#123;color:green;&#125;&quot;</span>);<br>            <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;离开&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> QWidget::<span class="hljs-built_in">eventFilter</span>(wcg,event);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Qt" scheme="https://www.mingsrc.work/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>【一文搞懂】qss</title>
    <link href="https://www.mingsrc.work/posts/e81c74f"/>
    <id>https://www.mingsrc.work/posts/e81c74f</id>
    <published>2022-07-09T04:13:14.201Z</published>
    <updated>2022-07-09T04:11:11.357Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Qss"><a href="#Qss" class="headerlink" title="Qss"></a>Qss</h1><p>Qss的写法参考<code>css</code>即可。</p><blockquote><p>网站推荐：</p><p><a href="https://doc.qt.io/archives/qt-4.8/stylesheet-reference.html">Qt Style Sheets Reference | Qt 4.8</a></p><p>书籍推荐：</p><p><a href="https://pan.baidu.com/s/12F3fdZH5AO_epxmWIzV2cg">《Qt样式葵花宝典》提取码：nod5</a></p><p>工具推荐：</p><ul><li><p><a href="ttps://pan.baidu.com/s/1PrCgUx57c7iPUMjq3lsClw">Qss Editor 0.6.1 提取码：yzbi</a></p><p><img src="/../../../images/Qss/qsseditor.jpg" alt="qsseditor"></p></li><li><p><a href="https://pan.baidu.com/s/1xxom5Zl3DwXgUAHFkaK6UA">Qss Stylesheet Editor 1.7 提取码：4r3i</a></p><p><img src="/../../../images/Qss/qssstylesheeteditor.png" alt="qssstylesheeteditor"></p></li></ul></blockquote><h1 id="Qss加载的常规操作"><a href="#Qss加载的常规操作" class="headerlink" title="Qss加载的常规操作"></a>Qss加载的常规操作</h1><ol><li>在资源文件夹中添加<code>style.qss</code>的文件</li><li>以文件IO的方式读取并设置即可。</li><li>读取的代码： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Widget::InitStyle</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    m_LCD_Hour-&gt;<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot; font: 18px black;&quot;</span>);<br>    <span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-function">QFile <span class="hljs-title">file</span><span class="hljs-params">(QString(<span class="hljs-string">&quot;:/Assert/qss/style%1.qss&quot;</span>).arg(i))</span></span>;<br>        file.<span class="hljs-built_in">open</span>(QFile::ReadOnly);<br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setStyleSheet</span>(file.<span class="hljs-built_in">readAll</span>());<br>        file.<span class="hljs-built_in">close</span>();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// m_LCD_Min-&gt;setStyleSheet(&quot;color: black; &quot;);</span><br>    <span class="hljs-comment">// m_LCD_Sec-&gt;setStyleSheet(&quot;color: black; &quot;);</span><br><br>    <span class="hljs-function">QFile <span class="hljs-title">file</span><span class="hljs-params">(QString(<span class="hljs-string">&quot;:/Assert/qss/main.qss&quot;</span>))</span></span>;<br>    file.<span class="hljs-built_in">open</span>(QFile::ReadOnly);<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">setStyleSheet</span>(file.<span class="hljs-built_in">readAll</span>());<br>    file.<span class="hljs-built_in">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure> 感兴趣的朋友可以看看我整理的一些Qt小项目常用的一些代码：[【Qt】常用基础代码汇总（随时更新）_欧恩意的博客-CSDN博客_qt代码整理]<a href="https://blog.csdn.net/Fuel_Ming/article/details/122830341">https://blog.csdn.net/Fuel_Ming/article/details/122830341</a>)</li></ol><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>一般情况下，在ui文件中的控件有效，而在代码中声明的则无效，因为Qt是根据<code>objectName</code>来识别的，所以自己声明的控件需要设置对象名。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">m_btn-&gt;<span class="hljs-built_in">setObjectName</span>(<span class="hljs-string">&quot;BtnOK&quot;</span>);<br></code></pre></td></tr></table></figure><p>在<code>QSS</code>文件中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">QPushButton<span class="hljs-selector-id">#BtnOK</span>&#123;<br>    <span class="hljs-attribute">color</span>:white;<br>    <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>,<span class="hljs-number">112</span>,<span class="hljs-number">210</span>);<br>&#125;<br>QPushButton<span class="hljs-selector-id">#BtnOK</span>::hover&#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>,<span class="hljs-number">134</span>,<span class="hljs-number">252</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h2><p>即 <code>*</code> 表示的css对象。作用于所有的界面控件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类型选择器"><a href="#类型选择器" class="headerlink" title="类型选择器"></a>类型选择器</h2><ol><li>作用于自己及子类</li></ol><p><code>类名</code>（Qt类）作为选择器，作用于其自身和他所有的子类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">QFrame &#123;<br><span class="hljs-attribute">background</span>: gray;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用了类型选择器 <code>QFrame</code>，所以 QFrame 和它的子类 <code>QLable</code>，<code>QLCDNumber</code>，<code>QTableWidget</code> 等的背景会是灰色的，<code>QPushButton</code> 不是 <code>QFrame</code> 的子类，所以不受影响。在Qt的类图或者帮助手册中可以看到一个Qt类的子类和父类。</p><ol start="2"><li>只作用于自己</li></ol><p>即 <code>. + 类名</code> 的形式。作用对象只有它自己。子类不受影响。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QWidget *window = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QWidget</span>();<br>window-&gt;<span class="hljs-built_in">setStylesheet</span>(<span class="hljs-string">&quot;.QWidget &#123; &quot;</span><br>                      <span class="hljs-string">&quot;color:red;&quot;</span><br>                      <span class="hljs-string">&quot;&#125;&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><p><code># + objectname</code>作为选择器。只作用于此 <code>objectname</code> 的对象（多个对象可以设置同一个 <code>objectname</code>，但不推荐这么写）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QPushButton *btn = <span class="hljs-keyword">new</span> QPushButton;<br><br><span class="hljs-comment">// 设置属性名</span><br>btn-&gt;<span class="hljs-built_in">setObjectName</span>(<span class="hljs-string">&quot;openButton&quot;</span>);<br><br><span class="hljs-comment">// 设置样式</span><br><span class="hljs-comment">// 1</span><br>btn-&gt;<span class="hljs-built_in">setStylesheet</span>(<span class="hljs-string">&quot;#openButton &#123; &quot;</span><br>                      <span class="hljs-string">&quot;color:red;&quot;</span><br>                      <span class="hljs-string">&quot;&#125;&quot;</span>);<br><span class="hljs-comment">// 2</span><br>btn-&gt;<span class="hljs-built_in">setStylesheet</span>(<span class="hljs-string">&quot;QPushButton#openButton &#123; &quot;</span><br>                      <span class="hljs-string">&quot;color:red;&quot;</span><br>                      <span class="hljs-string">&quot;&#125;&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p><code>[属性 = 值]</code>的形式设置样式。需要通过<code>object-&gt;property()</code>接口设置Qt控件的属性值（Dynamic Properties）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">app.<span class="hljs-built_in">setStyleSheet</span>(<span class="hljs-string">&quot;.QWidget &#123; background: gray; &#125;&quot;</span><br>                  <span class="hljs-string">&quot;QPushButton[level=\&quot;dangerous\&quot;] &#123; background: magenta; &#125;&quot;</span>);<br> <br>openButton-&gt;<span class="hljs-built_in">setProperty</span>(<span class="hljs-string">&quot;level&quot;</span>, <span class="hljs-string">&quot;dangerous&quot;</span>);<br>closeButton-&gt;<span class="hljs-built_in">setProperty</span>(<span class="hljs-string">&quot;level&quot;</span>, <span class="hljs-string">&quot;dangerous&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="包含选择器"><a href="#包含选择器" class="headerlink" title="包含选择器"></a>包含选择器</h2><p>也就是对控件内的控件的类进行设置，一看就懂，选择器之间用<mark>空格</mark>隔开，包含选择器和子元素选择器需要区分：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">QFrame &#123;<br>    <span class="hljs-attribute">background</span>: gray;<br>&#125;<br>    <br>QFrame QPushButton &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid magenta;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">background</span>: white;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">15px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><p>选择器之间用 <code>&gt;</code> 隔开，作用于<code>Widget</code>的 直接 <code>子Widget</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">QFrame &#123;<br>    <span class="hljs-attribute">background</span>: gray;<br>&#125;<br>    <br>QFrame &gt; QPushButton &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid magenta;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">background</span>: white;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">15px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p><code>选择器:状态</code> 作为选择器。支持<code>!</code>操作。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">QPushButton<span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: white &#125;<br>QCheckBox<span class="hljs-selector-pseudo">:checked</span> &#123; <span class="hljs-attribute">color</span>: white &#125;<br>QCheckBox:!checked &#123; <span class="hljs-attribute">color</span>: red &#125;<br></code></pre></td></tr></table></figure><p>常见的伪类选择器如下所示：</p><table><thead><tr><th align="left">伪类</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">:disabled</td><td align="left">Widget 被禁用时</td></tr><tr><td align="left">:enabled</td><td align="left">Widget 可使用时</td></tr><tr><td align="left">:focus</td><td align="left">Widget 得到输入焦点</td></tr><tr><td align="left">:hover</td><td align="left">鼠标放到 Widget 上</td></tr><tr><td align="left">:pressed</td><td align="left">鼠标按下时</td></tr><tr><td align="left">:checked</td><td align="left">被选中时</td></tr><tr><td align="left">:unchecked</td><td align="left">未选中时</td></tr><tr><td align="left">:has-children</td><td align="left">Item 有子 item，例如 QTreeView 的 item 有子 item 时</td></tr><tr><td align="left">:has-siblings</td><td align="left">Item 有 兄弟，例如 QTreeView 的 item 有兄弟 item 时</td></tr><tr><td align="left">:open</td><td align="left">打开或展开状态，例如 QTreeView 的 item 展开，QPushButton 的菜单弹出时</td></tr><tr><td align="left">:closed</td><td align="left">关闭或者非展开状态</td></tr><tr><td align="left">:on</td><td align="left">Widget 状态是可切换的（toggle）, 在 on 状态</td></tr><tr><td align="left">:off</td><td align="left">Widget 状态是可切换的（toggle）, 在 off 状态</td></tr></tbody></table><h2 id="SubControl选择器"><a href="#SubControl选择器" class="headerlink" title="SubControl选择器"></a>SubControl选择器</h2><p><code>选择器::subcontrol</code> 作为选择 Subcontrol 的选择器。</p><p>有些 Widget 是由多个部分组合成的，例如 QCheckBox 由 icon(indicator) 和 text 组成，可以使用 <code>选择器::subcontrol</code> 来设置 subcontrol 的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">QCheckBox::indicator &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br>QCheckBox &#123;<br>    spacing: <span class="hljs-number">8px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用的 Subcontrol 有：</p><table><thead><tr><th align="left">Subcontrol</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">::indicator</td><td align="left">A QCheckBox, QRadioButton, checkable QMenu item,  or a checkable QGroupBox’s indicator</td></tr><tr><td align="left">::menu-indicator</td><td align="left">A QPushButton’s menu indicator</td></tr><tr><td align="left">::item</td><td align="left">A QMenu, QMenuBar, or QStatusBar’s item</td></tr><tr><td align="left">::up-button</td><td align="left">A QSpinBox or QScrollBar’s up button</td></tr><tr><td align="left">::down-button</td><td align="left">A QSpinBox or QScrollBar’s down button</td></tr><tr><td align="left">::up-arrow</td><td align="left">A QSpinBox, QScrollBar, or QHeaderView’s up arrow</td></tr><tr><td align="left">::down-arrow</td><td align="left">A QSpinBox, QScrollBar, or QHeaderView’s down arrow</td></tr><tr><td align="left">::drop-down</td><td align="left">A QComboBox’s drop-down arrow</td></tr><tr><td align="left">::title</td><td align="left">A QGroupBox or QDockWidget’s title</td></tr><tr><td align="left">::groove</td><td align="left">A QSlider’s groove</td></tr><tr><td align="left">::chunk</td><td align="left">A QProgressBar’s progress chunk</td></tr><tr><td align="left">::branch</td><td align="left">A QTreeView’s branch indicator</td></tr></tbody></table><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>一些其他写法的参考demo</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* ================================================ *</span><br><span class="hljs-comment">author:lei</span><br><span class="hljs-comment">lastedited:2020.2</span><br><span class="hljs-comment">* ================================================ */</span><br>$text = <span class="hljs-selector-id">#222</span>;<br>$<span class="hljs-attribute">background</span> = <span class="hljs-selector-id">#FDFDFD</span>;<br>$<span class="hljs-attribute">border</span> = <span class="hljs-selector-id">#999999</span>;<br>$selected = <span class="hljs-selector-id">#8BF</span>; <span class="hljs-comment">/*hover*/</span><br>$pressed = <span class="hljs-selector-id">#59F</span>;<br>$focused = <span class="hljs-selector-id">#EA2</span>; <span class="hljs-comment">/*actived*/</span><br>$grad1a = <span class="hljs-selector-id">#EEEEEF</span>; <span class="hljs-comment">/*gradient start*/</span><br>$grad1b = <span class="hljs-selector-id">#DADADF</span>; <span class="hljs-comment">/*gradient end*/</span><br><br>QWidget<br>&#123;<br>    <span class="hljs-attribute">color</span>: $text;<br>    <span class="hljs-attribute">background-color</span>: $background;<br>&#125;<br><br>QFrame&#123;<br>    <span class="hljs-attribute">color</span>: $text;<br>    <span class="hljs-attribute">background-color</span>: $background;<span class="hljs-comment">/*不能设置为transparent*/</span><br>&#125;<br>QMainWindow::separator&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">border-style</span>: outset;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">4px</span>;<br>&#125;<br>QMainWindow::separator:hover&#123;<br>    <span class="hljs-attribute">background</span>: $selected;<br>&#125;<br>QSplitter::handle&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">border-style</span>: outset;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">4px</span>;<br>&#125;<br>QSplitter::handle:hover&#123;<span class="hljs-comment">/*splitter-&gt;handle(1)-&gt;setAttribute(Qt::WA_Hover, true);才生效*/</span><br>    <span class="hljs-attribute">border-color</span>: $focused;<br>&#125;<br>QSplitter::handle:pressed&#123;<br>    <span class="hljs-attribute">border-color</span>: $pressed;<br>&#125;<br>QSizeGrip&#123;<br>    <span class="hljs-attribute">background-color</span>: none;<br>&#125;<br><br><span class="hljs-comment">/* =============================================== */</span><br><span class="hljs-comment">/* Label                                           */</span><br><span class="hljs-comment">/* =============================================== */</span><br>QLabel &#123;<br>    <span class="hljs-attribute">background</span>: transparent;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid transparent;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* A QLabel is a QFrame ... */</span><br><span class="hljs-comment">/* A QToolTip is a QLabel ... */</span><br>QToolTip &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">opacity</span>:<span class="hljs-number">210</span>;<br>&#125;<br><br><span class="hljs-comment">/* =============================================== */</span><br><span class="hljs-comment">/* TextBox                                         */</span><br><span class="hljs-comment">/* =============================================== */</span><br>QLineEdit &#123;<br>    <span class="hljs-attribute">background</span>: $background;<span class="hljs-comment">/*不建议设为透明，否则table编辑时会字显示*/</span><br>    selection-<span class="hljs-attribute">background-color</span>: $selected;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">border-style</span>: inset;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span>;<br>&#125;<br><br>QLineEdit<span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: $selected;<br>&#125;<br>QLineEdit<span class="hljs-selector-pseudo">:focus</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: $focused;<br>&#125;<br><span class="hljs-comment">/*QLineEdit[readOnly=&quot;true&quot;] &#123; color: gray &#125;*/</span><br>QLineEdit<span class="hljs-selector-attr">[echoMode=<span class="hljs-string">&quot;2&quot;</span>]</span>&#123;<br>    lineedit-password-character: <span class="hljs-number">9679</span>;<span class="hljs-comment">/*字符的ascii码35 88等 */</span><br>&#125;<br><br>QLineEdit<span class="hljs-selector-pseudo">:read-only</span> &#123;<br>    <span class="hljs-attribute">color</span>: lightgray;<br>&#125;<br><br>QLineEdit<span class="hljs-selector-pseudo">:disabled</span>&#123;<br>    <span class="hljs-attribute">color</span>: lightgray;<br>    <span class="hljs-attribute">background</span>: lightgray;<br>&#125;<br><br>QTextEdit&#123;<br>    selection-<span class="hljs-attribute">background-color</span>:$selected;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">border-style</span>: inset;<br>&#125;<br>QTextEdit<span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: $selected;<br>&#125;<br>QTextEdit<span class="hljs-selector-pseudo">:focus</span>&#123;<br>    <span class="hljs-attribute">border-color</span>: $focused;<br>&#125;<br><span class="hljs-comment">/* =============================================== */</span><br><span class="hljs-comment">/* Button                                          */</span><br><span class="hljs-comment">/* =============================================== */</span><br>QPushButton &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-comment">/*background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, </span><br><span class="hljs-comment">        stop: 0 $grad1a, stop: 0.05 $grad1b,stop: 0.5 $grad1b, </span><br><span class="hljs-comment">        stop: 0.9 $grad1a, stop: 1 $grad1a);*/</span><br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">min-width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">16px</span>;<br>&#125;<br><br>QPushButton<span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: $selected;<br>    <span class="hljs-attribute">border-color</span>: $pressed;<br>&#125;<br><br>QPushButton:pressed<br>&#123;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">1px</span>;      <br>    <span class="hljs-attribute">background-color</span>: $pressed;<br>    <span class="hljs-attribute">border-color</span>: $border;<br>&#125;<br><br>QPushButton<span class="hljs-selector-pseudo">:focus</span>, QPushButton<span class="hljs-selector-pseudo">:default</span> &#123;<br>    <span class="hljs-attribute">border-color</span>: $focused; <span class="hljs-comment">/* make the default button prominent */</span><br>&#125;<br><br><br>QToolButton,QToolButton:unchecked &#123; <span class="hljs-comment">/* ToolBar里的按钮和带下拉菜单的按钮 */</span><br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid transparent;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">background-color</span>: transparent;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">1px</span>;<br>&#125;<br>QToolButton<span class="hljs-selector-pseudo">:checked</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: $selected;<br>    <span class="hljs-attribute">border-color</span>: $pressed;<br>&#125;<br>QToolButton<span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: $selected;<br>    <span class="hljs-attribute">border-color</span>: $pressed;<br>&#125;<br><br>QToolButton:pressed,QToolButton:checked:hover&#123;<br>    <span class="hljs-attribute">background-color</span>: $pressed;<br>    <span class="hljs-attribute">border-color</span>: $focused;<br>&#125;<br>QToolButton<span class="hljs-selector-pseudo">:checked</span>:pressed&#123;<br>    <span class="hljs-attribute">background-color</span>: $selected;<br>&#125;<br><br><span class="hljs-comment">/* only for MenuButtonPopup */</span><br>QToolButton<span class="hljs-selector-attr">[popupMode=<span class="hljs-string">&quot;1&quot;</span>]</span>&#123;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">1px</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">15px</span>; <span class="hljs-comment">/* make way for the popup button */</span><br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-comment">/*background: qlineargradient(x1:0, y1:0 ,x2:0, y2:1</span><br><span class="hljs-comment">        stop: 0 $grad1a, stop: 0.05 $grad1b, stop: 0.5 $grad1b</span><br><span class="hljs-comment">        stop: 0.95 $grad1a stop: 1$grad1a)*/</span><br>&#125;<br>QToolButton<span class="hljs-selector-attr">[popupMode=<span class="hljs-string">&quot;1&quot;</span>]</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: $selected;<br>    <span class="hljs-attribute">border-color</span>: $pressed;<br>&#125;<br>QToolButton<span class="hljs-selector-attr">[popupMode=<span class="hljs-string">&quot;1&quot;</span>]</span>:pressed&#123;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">1px</span>;<br>    <span class="hljs-attribute">background-color</span>: $pressed;<br>    <span class="hljs-attribute">border-color</span>: $border;<br>&#125;<br>QToolButton::menu-button &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">16px</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* =============================================== */</span><br><span class="hljs-comment">/* Slider ProgressBar                              */</span><br><span class="hljs-comment">/* =============================================== */</span><br>QProgressBar &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br><br>QProgressBar::chunk &#123;<br>    <span class="hljs-attribute">background-color</span>: $focused;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">1px</span>;<br>&#125;<br><br>QSlider&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid transparent;<br>&#125;<br>QSlider::groove&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">background</span>: $background;<br>&#125;<br>QSlider::handle &#123;<span class="hljs-comment">/*设置中间的那个滑动的键*/</span>                           <br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">background</span>: $selected;<br>&#125;<br>QSlider::groove:horizontal &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">3px</span>; <span class="hljs-comment">/* the groove expands to the size of the slider by default. by giving it a height, it has a fixed size */</span><br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">5px</span>; <span class="hljs-attribute">right</span>: <span class="hljs-number">5px</span>;<br>&#125;<br>QSlider::groove:vertical&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">5px</span>; <span class="hljs-attribute">bottom</span>: <span class="hljs-number">5px</span>;<br>&#125;<br>QSlider::handle:horizontal&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">margin</span>: -<span class="hljs-number">7px</span>; <span class="hljs-comment">/* height */</span><br>&#125;<br>QSlider::handle:vertical&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">margin</span>: -<span class="hljs-number">7px</span>; <span class="hljs-comment">/* height */</span><br>&#125;<br>QSlider::add-page&#123;<span class="hljs-comment">/*还没有滑上去的地方*/</span><br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">background</span>:$grad1a;<br>&#125;<br>QSlider::sub-page&#123;<span class="hljs-comment">/*已经划过的从地方*/</span>                            <br>    <span class="hljs-attribute">background</span>: $focused;<br>&#125;<br><br><span class="hljs-comment">/* =============================================== */</span><br><span class="hljs-comment">/* ScrollBar                                       */</span><br><span class="hljs-comment">/* =============================================== */</span><br>QScrollBar&#123;<br>    <span class="hljs-attribute">background-color</span>: $background;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>&#125;<br>QScrollBar<span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">border-color</span>:$selected;<br>&#125;<br>QScrollBar::handle&#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">background</span>: $pressed;<br>    <span class="hljs-attribute">min-width</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">16px</span>;<br>&#125;<br>QScrollBar::handle:hover &#123;<br>    <span class="hljs-attribute">background</span>: $focused;<br>&#125;<br>QScrollBar::add-line, QScrollBar::sub-line,<br>QScrollBar::add-page, QScrollBar::sub-page &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">background</span>: transparent;<br>&#125;<br>QScrollArea&#123;<br>    <span class="hljs-attribute">border</span>: none;<br>&#125;<br><span class="hljs-comment">/*QScrollArea  QAbstractSlider&#123;</span><br><span class="hljs-comment">    border-radius: 0px;</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-comment">/* =============================================== */</span><br><span class="hljs-comment">/* DockWidget                                       */</span><br><span class="hljs-comment">/* =============================================== */</span><br>QDockWidget, QDockWidget &gt; QWidget<span class="hljs-comment">/*not work*/</span><br>&#123;<br>    <span class="hljs-attribute">border-color</span>: $border;<span class="hljs-comment">/*qt bug*/</span><br>    <span class="hljs-attribute">background</span>: transparent;<br>&#125;<br>QDockWidget::title &#123;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">border-style</span>: inset;<br>    <span class="hljs-attribute">text-align</span>: left; <span class="hljs-comment">/* align the text to the left */</span><br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span>;<br>&#125;<br><br><span class="hljs-comment">/* =============================================== */</span><br><span class="hljs-comment">/* GroupBox                                        */</span><br><span class="hljs-comment">/* =============================================== */</span><br>QGroupBox &#123;<br>    <span class="hljs-attribute">background-color</span>: $background;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0.5em</span>;<br>&#125;<br>QGroupBox::title &#123;<br>    subcontrol-origin: margin;<br>    subcontrol-<span class="hljs-attribute">position</span>: top left;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">1em</span>;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">0.1em</span>;<br>    <span class="hljs-attribute">background-color</span>: $background;<br>&#125;<br><span class="hljs-comment">/* =============================================== */</span><br><span class="hljs-comment">/* ToolBox                                         */</span><br><span class="hljs-comment">/* =============================================== */</span><br>QToolBox&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>&#125;<br>QToolBox::tab &#123;<br>    <span class="hljs-attribute">background</span>: $grad1a;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">1px</span>;<br>&#125;<br>QToolBox::tab:hover &#123;<br>    <span class="hljs-attribute">background-color</span>: $selected;<br>    <span class="hljs-attribute">border-color</span>: transparent;<br>&#125;<br>QToolBox::tab:pressed &#123;<br>    <span class="hljs-attribute">background-color</span>: $pressed;<br>    <span class="hljs-attribute">border-color</span>: transparent;<br>&#125;<br>QToolBox::tab:selected &#123;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">border-color</span>: $selected;<br>&#125;<br><br><span class="hljs-comment">/* =============================================== */</span><br><span class="hljs-comment">/* TabWidget                                       */</span><br><span class="hljs-comment">/* =============================================== */</span><br>QTabWidget&#123;<br>    <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">10px</span>;<br>&#125;<br>QTabWidget::pane&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>&#125;<br>QTabWidget::tab-bar &#123;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;<br>&#125;<br>QTabBar::tab &#123;<br>    <span class="hljs-attribute">background</span>: $background;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $border;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span> <span class="hljs-number">5px</span>;    <br>&#125;<br>QTabBar::tab:hover &#123;<br>    <span class="hljs-attribute">background</span>: $selected;<br>    <span class="hljs-attribute">border-color</span>: transparent;<br>&#125;<br>QTabBar::tab:selected &#123;<br>    <span class="hljs-attribute">background</span>: $selected;<br>    <span class="hljs-attribute">border-color</span>: $pressed;<br>&#125;<br>QTabBar::tab:pressed &#123;<br>    <span class="hljs-attribute">background</span>: $pressed;<br>    <span class="hljs-attribute">border-color</span>: transparent;<br>&#125;<br>QTabBar::tab:focus &#123;<br>    <span class="hljs-attribute">border-color</span>: $focused;<br>&#125;<br>QTabBar::tab:top&#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">border-bottom</span>: transparent;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1px</span>;<br>&#125;<br>QTabBar::tab:bottom&#123;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">border-top</span>: transparent;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1px</span>;<br>&#125;<br>QTabBar::tab:left&#123;<br>    <span class="hljs-attribute">border-right</span>: transparent;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1px</span>;<br>&#125;<br>QTabBar::tab:right&#123;<br>    <span class="hljs-attribute">border-left</span>: transparent;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1px</span>;<br>&#125;<br><br><span class="hljs-comment">/* =============================================== */</span><br><span class="hljs-comment">/* QHeaderView for list table                      */</span><br><span class="hljs-comment">/* =============================================== */</span><br>QHeaderView &#123;<br><span class="hljs-attribute">border</span>: none;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;<br>&#125;<br>QHeaderView::section, QTableCornerButton::section &#123;<span class="hljs-comment">/*设置表头属性*/</span><span class="hljs-comment">/*左上角*/</span><br><span class="hljs-attribute">background-color</span>: $grad1a;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">3px</span>;<br><span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid $border;<br><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid $border;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0px</span>;<br>&#125;<br>QHeaderView::section:hover, QTableCornerButton::section:hover&#123;<br>    <span class="hljs-attribute">background-color</span>: $selected;<br>&#125;<br>QHeaderView::section:pressed&#123;<br>    <span class="hljs-attribute">background-color</span>: $pressed;<br>&#125;<br>QHeaderView::section:checked &#123;<br>    <span class="hljs-attribute">background-color</span>: $focused;<br>&#125;<br><br><span class="hljs-comment">/* =============================================== */</span><br><span class="hljs-comment">/* QTableWidget                                    */</span><br><span class="hljs-comment">/* =============================================== */</span><br>QTableWidget, QTableView<br>&#123;<br>    gridline-<span class="hljs-attribute">color</span>: $border;    <span class="hljs-comment">/*表格中的网格线条颜色*/</span><br>    <span class="hljs-attribute">background</span>: $background;<br>    <span class="hljs-comment">/*设置交替颜色，需要在函数属性中设置:tableWidget-&gt;setAlternatingRowColors(true)*/</span><br>    alternate-<span class="hljs-attribute">background-color</span>: $grad1a;<br>    <span class="hljs-comment">/*selection-color:$background;    鼠标选中时前景色：文字颜色*/</span><br>    selection-<span class="hljs-attribute">background-color</span>:$selected;   <span class="hljs-comment">/*鼠标选中时背景色*/</span><br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid $border;  <span class="hljs-comment">/*边框线的宽度、颜色*/</span><br>    <span class="hljs-comment">/*border:none;    去除边界线*/</span><br>    <span class="hljs-comment">/*border-radius:5px;*/</span><br>    <span class="hljs-comment">/*padding:10px 10px;*/</span>  <span class="hljs-comment">/*表格与边框的间距*/</span><br>&#125;<br>QTableView::item, QTabWidget::item&#123;<br>    <span class="hljs-attribute">background</span>: transparent;<br><span class="hljs-attribute">outline-style</span>: none;<br><span class="hljs-attribute">border</span>: none;<br>&#125;<br><br>QTableView::item:hover &#123;<br><span class="hljs-attribute">background</span>: $selected;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid $focused;<br>&#125;<br><br>QTableView::item:selected &#123;<br><span class="hljs-attribute">background</span>: $selected;<br><span class="hljs-attribute">color</span>: $grad1a;<br>&#125;<br><br>QTableView::item:selected:active &#123;<br><span class="hljs-attribute">background</span>: $pressed;<br><span class="hljs-attribute">color</span>: $grad1a;<br>&#125;<br><br>QTableWidget QComboBox&#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">border</span>: none;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Qt" scheme="https://www.mingsrc.work/tags/Qt/"/>
    
    <category term="css" scheme="https://www.mingsrc.work/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>QListWidget 用法整理</title>
    <link href="https://www.mingsrc.work/posts/6fe2de9f"/>
    <id>https://www.mingsrc.work/posts/6fe2de9f</id>
    <published>2022-07-09T04:13:14.197Z</published>
    <updated>2022-07-09T04:06:04.998Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设置显示模式"><a href="#设置显示模式" class="headerlink" title="设置显示模式"></a>设置显示模式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs code">QListView::ListMode<br>QListView::IconMode<br></code></pre></td></tr></table></figure><p>调用接口：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">setViewMode</span>(QListWidget::IconMode); <span class="hljs-comment">//显示模式</span><br></code></pre></td></tr></table></figure><h1 id="添加控件"><a href="#添加控件" class="headerlink" title="添加控件"></a>添加控件</h1><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="../../../images/QListWidget%20%E7%94%A8%E6%B3%95%E6%95%B4%E7%90%86/QListWidget_all.png" style="zoom:50%"><p>新建项目的时候创建一个带ui的项目，新建完成后，在界面拖拽一个QListWidget。</p><h2 id="Widget-h"><a href="#Widget-h" class="headerlink" title="Widget.h"></a>Widget.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> WIDGET_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIDGET_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QWidget&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QListWidget&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QStringList&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QString&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QDebug&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QListWidgetItem&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QGridLayout&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QToolButton&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QLineEdit&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QRadioButton&gt;</span></span><br><br>QT_BEGIN_NAMESPACE<br><span class="hljs-keyword">namespace</span> Ui &#123; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span>; &#125;<br>QT_END_NAMESPACE<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span> : <span class="hljs-keyword">public</span> QWidget<br>&#123;<br>    Q_OBJECT<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Widget</span>(QWidget *parent = <span class="hljs-literal">nullptr</span>);<br>    ~<span class="hljs-built_in">Widget</span>();<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initListWidget</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    Ui::Widget *ui;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// WIDGET_H</span></span><br><br><br></code></pre></td></tr></table></figure><h2 id="Widget-cpp"><a href="#Widget-cpp" class="headerlink" title="Widget.cpp"></a>Widget.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;widget.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_widget.h&quot;</span></span><br><br>Widget::<span class="hljs-built_in">Widget</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QWidget</span>(parent)<br>    , <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::Widget)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-built_in">initListWidget</span>();<br>&#125;<br><br>Widget::~<span class="hljs-built_in">Widget</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Widget::initListWidget</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ui-&gt;listWidget-&gt;<span class="hljs-built_in">setCurrentRow</span>(<span class="hljs-number">2</span>);<br><br>    QStringList StrListHeader;<br>    StrListHeader &lt;&lt; <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;选中&quot;</span>) &lt;&lt; <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;序号&quot;</span>) &lt;&lt; <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;文件名&quot;</span>);<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">QListWidgetItem</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Oak&quot;</span>), ui-&gt;listWidget);<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">QListWidgetItem</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Fir&quot;</span>), ui-&gt;listWidget);<br>    <span class="hljs-keyword">new</span> <span class="hljs-built_in">QListWidgetItem</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;Pine&quot;</span>), ui-&gt;listWidget);<br><br><br>    QListWidgetItem *ListItem = <span class="hljs-keyword">new</span> QListWidgetItem;<br>    <span class="hljs-comment">//    ListItem-&gt;setText();</span><br><br>    QListWidgetItem *WContainerItem = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QListWidgetItem</span>(ui-&gt;listWidget);<br>    QWidget *WContainer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QWidget</span>(ui-&gt;listWidget);<span class="hljs-comment">//新建一个QWidget窗口</span><br>    QGridLayout*Glayout = <span class="hljs-keyword">new</span> QGridLayout;<br><br><span class="hljs-comment">/*************start*****************/</span><br><span class="hljs-comment">/* 在这里添加需要的控件 */</span><br>    QLineEdit *lineEdit = <span class="hljs-keyword">new</span> QLineEdit;<br>    QLineEdit *lineEdit_1 = <span class="hljs-keyword">new</span> QLineEdit;<br>    QToolButton *toolButton = <span class="hljs-keyword">new</span> QToolButton;<br>    QRadioButton *radioButton = <span class="hljs-keyword">new</span> QRadioButton;<br>    QRadioButton *radioButton_1 = <span class="hljs-keyword">new</span> QRadioButton;<br><br><br>    Glayout-&gt;<span class="hljs-built_in">addWidget</span>(lineEdit,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    Glayout-&gt;<span class="hljs-built_in">addWidget</span>(radioButton,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>    Glayout-&gt;<span class="hljs-built_in">addWidget</span>(lineEdit_1,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>    Glayout-&gt;<span class="hljs-built_in">addWidget</span>(radioButton_1,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br><br>  WContainer-&gt;<span class="hljs-built_in">setLayout</span>(Glayout);<br><span class="hljs-comment">/******************end****************/</span><br><br>    WContainerItem-&gt;<span class="hljs-built_in">setSizeHint</span>(<span class="hljs-built_in">QSize</span>(<span class="hljs-number">40</span>,<span class="hljs-number">40</span>));<br><br>    ui-&gt;listWidget-&gt;<span class="hljs-built_in">setItemWidget</span>(WContainerItem, WContainer);<span class="hljs-comment">//将WContainer赋予WContainerItem</span><br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Qt" scheme="https://www.mingsrc.work/tags/Qt/"/>
    
    <category term="QListWidget" scheme="https://www.mingsrc.work/tags/QListWidget/"/>
    
  </entry>
  
  <entry>
    <title>png和jpg格式的图片(一)</title>
    <link href="https://www.mingsrc.work/posts/2b196d43"/>
    <id>https://www.mingsrc.work/posts/2b196d43</id>
    <published>2022-07-09T04:13:14.194Z</published>
    <updated>2022-07-09T04:06:05.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="jpg-和-png-图片格式"><a href="#jpg-和-png-图片格式" class="headerlink" title="jpg 和 png 图片格式"></a><code>jpg</code> 和 <code>png</code> 图片格式</h1><p>在写这篇文章之前，笔者在编写一个简单的 Qt 程序时遇到了这样一个问题：</p><blockquote><p>问题：一个<code>png</code>格式的图片改成后缀为<code>jpg</code>格式的图片时，QLabel无法读取的问题。笔者是通过<code>setStyleSheet()</code>、<code>QImage</code>、<code>QPixmap</code>的接口均尝试过将改后缀后图片设置到<code>QLabel</code>中，均以<mark style="background-color:red">失败</mark>告终。</p></blockquote><p>特此研究了一下这<code>jpg</code>和<code>png</code>两者之间的区别，后续再研究一下Qt关于相关格式图片读取的问题。</p><p>图片会有<code>jpg</code>和<code>png</code>两种格式，那么这俩种格式的图片又有着什么样的区别呢？下面就给大家分享一下。 <code>png</code>和<code>jpg</code>都是常用的图片格式，其中<code>png</code>属于无损压缩，<code>jpg</code>是有损压缩，使用中两者最明显的一个区别是:</p><ul><li>png支持透明通道</li><li>jpg的图片更适合在网络中传播和使用。</li></ul><h2 id="jpg格式"><a href="#jpg格式" class="headerlink" title="jpg格式"></a><code>jpg</code>格式</h2><blockquote><p><strong>jpg：</strong>是JPEG标准的产物，也是目前网络最为流行的图片格式，jpg格式的图片可以将图像文件压缩到最小格式，在高度压缩率的同时，可以展现是分丰富生动的图像，但是随着压缩比的增大，图片的品质会逐渐降低的。我们现在常用的jpg的标准全程为<code>JPEG 2000标准</code>，有以下几点特性：</p><ol><li>高压缩率</li><li>无损压缩和有损压缩</li><li>渐进传输</li><li>感兴趣区域压缩</li><li>码流的随机访问和处理</li><li>容错性</li><li>基于内容的描述</li></ol></blockquote><h2 id="png格式"><a href="#png格式" class="headerlink" title="png格式"></a><code>png</code>格式</h2><blockquote><p><strong>png：</strong>是一种采用无损压缩算法的位图模式，其设计目的是视图替代GIF和TIFF文件格式，同时增加一下GIF文件格式所不具备的特性。PNG使用从LZ77派生的无损数据压缩算法，一般应用于JAVA程序、网页或S60程序中，原因就是因为png的压缩比更高，生成文件体积小。png图片也有一些特性：</p><ol><li>体积小</li><li>无损压缩</li><li>索引彩色模式</li><li>更优化的网络传输显示</li><li><strong>支持透明模式</strong></li></ol></blockquote><p>关于 <code>png</code> 格式还需要说明的是：</p><p>png格式有8位、24位、32位三种形式，其中8位PNG支持两种不同的透明形式（索引透明和alpha透明），24位PNG不支持透明，32位PNG在24位基础上增加了8位透明通道，因此可展现256级透明程度。</p><p>PNG8和PNG24后面的数字则是代表这种PNG格式最多可以索引和存储的颜色值。8代表2的8次方也就是256色，而24则代表2的24次方大概有1600多万色。</p><h1 id="区别：png-和-jpg"><a href="#区别：png-和-jpg" class="headerlink" title="区别：png 和 jpg"></a>区别：<code>png</code> 和 <code>jpg</code></h1><blockquote><p>转自百度百科：</p><p>1、<a href="https://baike.baidu.com/item/JPEG">JPEG</a>可以对照片（或类似）图像生成更小的文件，这是由于JPEG采用了一种针对照片图像的特定有损编码方法，这种编码适用于低对比，图像颜色过渡平滑，噪声多，且结构不规则的情况下。如果在这种情况下用PNG代替JPEG，文件尺寸增大很多，而图像质量的提高有限。相应的，如果保存文本，线条或类似的边缘清晰，有大块相同颜色区域的图像，PNG格式的压缩效果就要比JPEG好很多，并且不会出现JPEG那样的高对比度区域的图像有损。如果图像既有清晰边缘，又有照片图像的特点，就在在这两种格式之间权衡一下了。JPEG不支持透明度。</p><p>2、由于JPEG是有损压缩，会产生迭代有损，在重复压缩和解码的过程中会不断丢失信息使图像质量下降。由于PNG是无损的，保存将要被编辑的图像来说更加合适。虽然PNG压缩照片图像也有效，但有专门针对照片图像设计的无损压缩格式，比如无损JPEG2000，Adobe DNG等。总的来说这些格式都不能做到适用所有图像。对于将要发布的图像可以保存成JPEG，用JPEG编码一次不会造成明显的图像有损。</p></blockquote><p>总结就是：</p><ol><li><code>jpg</code>格式的图片能在高度压缩率的同时，展现十分丰富生动的图像，但是随着压缩比的增大，图片的品质会逐渐降低的。而<code>png</code>图片的特性就是体积小，节约空间，与<code>jpg</code>图片相比，<code>png</code>图片时无损压缩，在不损失图片数据的情况下，可以快速的获取自己想要的图片，而且图片的质量并不会下降。</li><li><code>png</code>格式的图片可以编辑，比如图片中的字体、线条等，可以通过ps等软件更改。但是<code>jpg</code>格式的图片则不可以更改，<code>png</code>与<code>jpg</code>图片相比<code>png</code>格式的图片更大。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="杂记" scheme="https://www.mingsrc.work/categories/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="MayBeQt" scheme="https://www.mingsrc.work/categories/%E6%9D%82%E8%AE%B0/MayBeQt/"/>
    
    
    <category term="图片" scheme="https://www.mingsrc.work/tags/%E5%9B%BE%E7%89%87/"/>
    
    <category term="格式" scheme="https://www.mingsrc.work/tags/%E6%A0%BC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SQLite3 数据库加密</title>
    <link href="https://www.mingsrc.work/posts/50ee611d"/>
    <id>https://www.mingsrc.work/posts/50ee611d</id>
    <published>2022-07-09T04:13:14.188Z</published>
    <updated>2022-07-09T04:11:46.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Set-Connect-options"><a href="#Set-Connect-options" class="headerlink" title="Set Connect options"></a>Set Connect options</h2><ul><li>Provided by Qt SqlitePlugin<ul><li>QSQLITE_BUSY_TIMEOUT</li><li>QSQLITE_OPEN_READONLY</li><li>QSQLITE_OPEN_URI</li><li>QSQLITE_ENABLE_SHARED_CACHE</li></ul></li><li>Added by QtCipherSqlitePlugin<ul><li>QSQLITE_CREATE_KEY</li><li>QSQLITE_UPDATE_KEY</li><li>QSQLITE_REMOVE_KEY</li></ul></li></ul><h1 id="创建数据库密码-QSQLITE-CREATE-KEY"><a href="#创建数据库密码-QSQLITE-CREATE-KEY" class="headerlink" title="创建数据库密码 QSQLITE_CREATE_KEY"></a>创建数据库密码 <code>QSQLITE_CREATE_KEY</code></h1><p>如果输出中有 <code>SQLITECIPHER</code> 的名字，那么恭喜你，插件没有问题！<br>为没有加密的数据库增加密码<br>Qt 默认提供的 SQLite 插件是没有加密功能的。新版本的 <code>QtCipherSqlitePlugin</code> 支持为原本没有加密的数据库增加密码，使用方法如下：<br>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QSqlDatabase dbconn = QSqlDatabase::<span class="hljs-built_in">addDatabase</span>(<span class="hljs-string">&quot;SQLITECIPHER&quot;</span>);<br>dbconn.<span class="hljs-built_in">setDatabaseName</span>(<span class="hljs-string">&quot;test.db&quot;</span>);<br>dbconn.<span class="hljs-built_in">setPassword</span>(<span class="hljs-string">&quot;test&quot;</span>);<br>dbconn.<span class="hljs-built_in">setConnectOptions</span>(<span class="hljs-string">&quot;QSQLITE_CREATE_KEY&quot;</span>); <br><span class="hljs-keyword">if</span> (!dbconn.<span class="hljs-built_in">open</span>()) &#123;    <br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Can not open connection: &quot;</span> &lt;&lt; dbconn.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">driverText</span>();    <br>    <span class="hljs-built_in">exit</span>(CONNECTION_FAILED);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码，我们使用 <code>test.db</code> 数据库，将密码设置为 test，同时指定连接选项为 <code>QSQLITE_CREATE_KEY</code> 。此时，调用 open() 函数之后，<code>QtCipherSqlitePlugin</code> 将使用改密码为这个数据库进行加密。</p><h1 id="删除数据库密码-QSQLITE-REMOVE-KEY"><a href="#删除数据库密码-QSQLITE-REMOVE-KEY" class="headerlink" title="删除数据库密码 QSQLITE_REMOVE_KEY"></a>删除数据库密码 <code>QSQLITE_REMOVE_KEY</code></h1><p><code>QtCipherSqlitePlugin</code> 可以删除数据库密码，此时需要提供原密码，并使用连接选项 <code>QSQLITE_REMOVE_KEY</code> ，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QSqlDatabase dbconn = QSqlDatabase::<span class="hljs-built_in">addDatabase</span>(<span class="hljs-string">&quot;SQLITECIPHER&quot;</span>);<br>dbconn.<span class="hljs-built_in">setDatabaseName</span>(<span class="hljs-string">&quot;test.db&quot;</span>);<br>dbconn.<span class="hljs-built_in">setPassword</span>(<span class="hljs-string">&quot;test&quot;</span>);<br>dbconn.<span class="hljs-built_in">setConnectOptions</span>(<span class="hljs-string">&quot;QSQLITE_REMOVE_KEY&quot;</span>);<br><span class="hljs-keyword">if</span> (!dbconn.<span class="hljs-built_in">open</span>()) &#123;   <br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Can not open connection: &quot;</span> &lt;&lt; dbconn.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">driverText</span>();   <br>    <span class="hljs-built_in">exit</span>(CONNECTION_FAILED);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="更新数据库密码-QSQLITE-UPDATE-KEY"><a href="#更新数据库密码-QSQLITE-UPDATE-KEY" class="headerlink" title="更新数据库密码 QSQLITE_UPDATE_KEY"></a>更新数据库密码 <code>QSQLITE_UPDATE_KEY</code></h1><p><code>QtCipherSqlitePlugin</code> 可以更新数据库原有密码，需要设置原密码，并且使用连接选项 <code>QSQLITE_UPDATE_KEY</code> 设置新密码，具体代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QSqlDatabase dbconn = QSqlDatabase::<span class="hljs-built_in">addDatabase</span>(<span class="hljs-string">&quot;SQLITECIPHER&quot;</span>);<br>dbconn.<span class="hljs-built_in">setDatabaseName</span>(<span class="hljs-string">&quot;test.db&quot;</span>);<br>dbconn.<span class="hljs-built_in">setPassword</span>(<span class="hljs-string">&quot;test&quot;</span>);<br>dbconn.<span class="hljs-built_in">setConnectOptions</span>(<span class="hljs-string">&quot;QSQLITE_UPDATE_KEY=newtest&quot;</span>); <br><span class="hljs-keyword">if</span> (!dbconn.<span class="hljs-built_in">open</span>()) &#123;    <br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Can not open connection: &quot;</span> &lt;&lt; dbconn.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">driverText</span>();   <br>    <span class="hljs-built_in">exit</span>(CONNECTION_FAILED);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果原密码不正确，<code>QtCipherSqlitePlugin</code> 会直接返回错误。</p><p>如果新密码设置为空，例如 <code>QSQLITE_UPDATE_KEY=</code> ，则作用等同于删除密码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QUpdateDB::setDBConfig</span><span class="hljs-params">(QSqlDatabase* dbconn, QMap&lt;ENUM_SQLKEY, QString&gt; qMapCfg)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : qMapCfg.<span class="hljs-built_in">toStdMap</span>())<br>&#123;<br><span class="hljs-keyword">if</span> (it.first &lt;= QSQLITE_REMOVE_KEY)<br>&#123;<br>dbconn-&gt;<span class="hljs-built_in">setPassword</span>(it.second);<br>dbconn-&gt;<span class="hljs-built_in">setConnectOptions</span>(<span class="hljs-built_in">GETOBJNAME</span>(it.first));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (it.first == QSQLITE_UPDATE_KEY)<br>&#123;<br>dbconn-&gt;<span class="hljs-built_in">setPassword</span>(it.second);<br>dbconn-&gt;<span class="hljs-built_in">setConnectOptions</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;%1=%2&quot;</span>).<span class="hljs-built_in">arg</span>().<span class="hljs-built_in">arg</span>());<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="数据库" scheme="https://www.mingsrc.work/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Qt" scheme="https://www.mingsrc.work/tags/Qt/"/>
    
    <category term="SQLite3" scheme="https://www.mingsrc.work/tags/SQLite3/"/>
    
    <category term="开源" scheme="https://www.mingsrc.work/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Qt 鼠标 hover 操作时弹出文字气泡</title>
    <link href="https://www.mingsrc.work/posts/24df9ec0"/>
    <id>https://www.mingsrc.work/posts/24df9ec0</id>
    <published>2022-07-09T04:13:14.185Z</published>
    <updated>2022-07-09T04:11:43.994Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p><p>需求描述：鼠标 hover 在一个控件上时，展示设置好的气泡信息</p><p>Qt5之前的版本要设置气泡需要通过C++中其他的类库去实现，在Qt5中则已经实现了相关的Qt类。并且除了设置文字气泡之外，还可以通过重写 <code>QToolTip</code> 类实现自己需要的气泡样式。</p><p>从 <a href="http://qt5.digitser.net/5.9/zh-CN/index.html">Qt 5.9.9 </a> 已经支持 <code>QToolTip</code>。基本所有继承于 <code>QWidget</code> 的组件都可以通过 <code>setToolTip()</code>设置气泡信息。以下所展示的Qt基类都可以设置气泡信息。</p><blockquote><ul><li>setToolTip: <a href="http://qt5.digitser.net/5.9/zh-CN/qaction.html#toolTip-prop">QAction </a><a href="http://qt5.digitser.net/5.9/zh-CN/qgraphicsitem.html#setToolTip">QGraphicsItem </a><a href="http://qt5.digitser.net/5.9/zh-CN/qlistwidgetitem.html#setToolTip">QListWidgetItem </a><a href="http://qt5.digitser.net/5.9/zh-CN/qstandarditem.html#setToolTip">QStandardItem </a><a href="http://qt5.digitser.net/5.9/zh-CN/qsystemtrayicon.html#toolTip-prop">QSystemTrayIcon </a><a href="http://qt5.digitser.net/5.9/zh-CN/qtablewidgetitem.html#setToolTip">QTableWidgetItem </a><a href="http://qt5.digitser.net/5.9/zh-CN/qtextcharformat.html#setToolTip">QTextCharFormat </a><a href="http://qt5.digitser.net/5.9/zh-CN/qtreewidgetitem.html#setToolTip">QTreeWidgetItem </a><a href="http://qt5.digitser.net/5.9/zh-CN/qwidget.html#toolTip-prop">QWidget </a><a href="http://qt5.digitser.net/5.9/zh-CN/qwinthumbnailtoolbutton.html#toolTip-prop">QWinThumbnailToolButton</a></li><li>setToolTipDuration: <a href="http://qt5.digitser.net/5.9/zh-CN/qwidget.html#toolTipDuration-prop">QWidget</a></li><li>setToolTipsVisible: <a href="http://qt5.digitser.net/5.9/zh-CN/qmenu.html#toolTipsVisible-prop">QMenu</a></li></ul></blockquote><p>基本上所有继承于 <code>QWidget</code> 的Qt控件类都支持设置气泡，本文以 <code>QLabel</code> 和 <code>QPushButton</code> 为例演示文字气泡功能。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码很简单，在ui界面拖一个 <code>QLabel</code> 和一个 <code>QPushbutton</code> 即可，信号槽直接在ui界面右击转到槽即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;widget.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ui_widget.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QImage&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPixmap&gt;</span></span><br><br>Widget::<span class="hljs-built_in">Widget</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QWidget</span>(parent)<br>    , <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::Widget)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br><br><br>    <span class="hljs-function">QPixmap <span class="hljs-title">img</span><span class="hljs-params">(<span class="hljs-string">&quot;:/Win11.jpg&quot;</span>)</span></span>;<br><br>    ui-&gt;label-&gt;<span class="hljs-built_in">setPixmap</span>(img);<br>    ui-&gt;label-&gt;<span class="hljs-built_in">setScaledContents</span>(<span class="hljs-literal">true</span>);<br>    ui-&gt;label-&gt;<span class="hljs-built_in">setToolTip</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;壁纸《Win11.png》&quot;</span>));<br>    ui-&gt;pushButton-&gt;<span class="hljs-built_in">setToolTip</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;隐藏或显示图片&quot;</span>));<br>&#125;<br><br>Widget::~<span class="hljs-built_in">Widget</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Widget::on_pushButton_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(ui-&gt;label-&gt;<span class="hljs-built_in">isVisible</span>())<br>        ui-&gt;label-&gt;<span class="hljs-built_in">hide</span>();<br>    <span class="hljs-keyword">else</span><br>        ui-&gt;label-&gt;<span class="hljs-built_in">setVisible</span>(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h1><p><img src="/../../../images/Qt%E6%B0%94%E6%B3%A1/2022_04_22_15_56_50_238.gif" alt="2022_04_22_15_56_50_238"></p><h1 id="支持-SetToolTip的控件"><a href="#支持-SetToolTip的控件" class="headerlink" title="支持 SetToolTip的控件"></a>支持 <code>SetToolTip</code>的控件</h1><p><img src="/../../../images/Qt%E6%B0%94%E6%B3%A1/image-20220422160147373.png" alt="image-20220422160147373"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Qt" scheme="https://www.mingsrc.work/tags/Qt/"/>
    
    <category term="气泡" scheme="https://www.mingsrc.work/tags/%E6%B0%94%E6%B3%A1/"/>
    
  </entry>
  
</feed>
