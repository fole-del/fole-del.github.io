<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欧恩意</title>
  
  
  <link href="https://www.mingsrc.work/atom.xml" rel="self"/>
  
  <link href="https://www.mingsrc.work/"/>
  <updated>2022-01-23T07:41:17.108Z</updated>
  <id>https://www.mingsrc.work/</id>
  
  <author>
    <name>mingming.shi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>力扣高效算法入门</title>
    <link href="https://www.mingsrc.work/posts/8cb5320c"/>
    <id>https://www.mingsrc.work/posts/8cb5320c</id>
    <published>2022-01-23T07:00:29.215Z</published>
    <updated>2022-01-23T07:41:17.108Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h1><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em>  的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [3,2,4], target &#x3D; 6<br>输出：[1,2]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [3,3], target &#x3D; 6<br>输出：[0,1]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= target &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n&lt;sup&gt;2&lt;/sup&gt;)</code> 的算法吗？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>, target <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i,x := <span class="hljs-keyword">range</span> nums &#123;<br>        <span class="hljs-keyword">for</span> j := i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">len</span>(nums); j++ &#123;<br>            <span class="hljs-keyword">if</span> x+nums[j] == target &#123;<br>                <span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;i,j&#125; <br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a></h1><p>给定一个已按照<strong>非递减顺序排列 </strong> 的整数数组 <code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数 <code>target</code> 。</p><p>函数应该以长度为 <code>2</code> 的整数数组的形式返回这两个数的下标值<em>。</em><code>numbers</code> 的下标 <strong>从 1 开始计数</strong> ，所以答案数组应当满足 <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length</code> 。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你 <strong>不可以</strong> 重复使用相同的元素。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：numbers &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[1,2]<br>解释：2 与 7 之和等于目标数 9 。因此 index1 &#x3D; 1, index2 &#x3D; 2 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：numbers &#x3D; [2,3,4], target &#x3D; 6<br>输出：[1,3]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：numbers &#x3D; [-1,0], target &#x3D; -1<br>输出：[1,2]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> 按 <strong>非递减顺序</strong> 排列</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li><strong>仅存在一个有效答案</strong></li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>#双指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(numbers []<span class="hljs-keyword">int</span>, target <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    left,right := <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(numbers) - <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">for</span> left &lt; right &#123;<br>        sum := numbers[left] + numbers [right]<br>        <span class="hljs-keyword">if</span> sum == target &#123;<br>            <span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;left + <span class="hljs-number">1</span>, right + <span class="hljs-number">1</span>&#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> sum &lt; target &#123;<br>            left++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right--<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> []<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h1><p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c ，</em>使得 <em>a + b + c =</em> 0 ？请你找出所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; []<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [0]<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 3000</code></li><li><code>-10&lt;sup&gt;5&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li></ul><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>#三指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go">class Solution &#123;<br>public:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; threeSum(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; ans;<br>        <span class="hljs-comment">// 先排序</span><br>        <span class="hljs-keyword">int</span> n = nums.size();<br>        sort(nums.begin(), nums.end());<br><br>        <span class="hljs-comment">// 定义首指针==target</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> ( i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>]) <br>                <span class="hljs-keyword">continue</span>;<br>            <br>            <span class="hljs-keyword">int</span> k = n - <span class="hljs-number">1</span>; <span class="hljs-comment">// 内层首指针</span><br>            <span class="hljs-keyword">int</span> target = -nums[i];<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) <span class="hljs-comment">// 内层尾指针</span><br>            &#123; <br>                <span class="hljs-keyword">if</span>( j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j<span class="hljs-number">-1</span>]) <br>                    <span class="hljs-keyword">continue</span>;<br><br>                while (j &lt; k &amp;&amp; nums[j] + nums[k] &gt; target) &#123; <span class="hljs-comment">// 遍历尾指针，找合适序列</span><br>                    --k;<br>                &#125;<br><br>                <span class="hljs-comment">// 当前i不满足</span><br>                <span class="hljs-keyword">if</span>(j == k) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 得到符合条件序列</span><br>                <span class="hljs-keyword">if</span>(nums[j] + nums[k] == target) &#123;<br>                    ans.push_back(&#123;nums[i],nums[j],nums[k]&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode-cn.com/problems/4sum/">18. 四数之和</a></h1><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [1,0,-1,0,-2,2], target &#x3D; 0<br>输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [2,2,2,2,2], target &#x3D; 8<br>输出：[[2,2,2,2]]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= target &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li></ul><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go">class Solution &#123;<br>public:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; fourSum(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target) &#123;<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; ans;<br>        <span class="hljs-keyword">int</span> n = nums.size();<br>        <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">return</span> ans;<br>        sort(nums.begin(), nums.end());<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>])<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> ((long) nums[i] + nums[i + <span class="hljs-number">1</span>] + nums[i + <span class="hljs-number">2</span>] + nums[i + <span class="hljs-number">3</span>] &gt; target) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((long) nums[i] + nums[n - <span class="hljs-number">3</span>] + nums[n - <span class="hljs-number">2</span>] + nums[n - <span class="hljs-number">1</span>] &lt; target) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n - <span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j<span class="hljs-number">-1</span>])<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> ((long) nums[i] + nums[j] + nums[j + <span class="hljs-number">1</span>] + nums[j + <span class="hljs-number">2</span>] &gt; target) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> ((long) nums[i] + nums[j] + nums[n - <span class="hljs-number">2</span>] + nums[n - <span class="hljs-number">1</span>] &lt; target) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 最内层首尾指针</span><br>                <span class="hljs-keyword">int</span> m = n - <span class="hljs-number">1</span>, k = j + <span class="hljs-number">1</span>;<br>                while(k &lt; m) &#123;<br>                    <span class="hljs-keyword">int</span> sum = nums[i] + nums[j] + nums[k] + nums[m];<br>                    <span class="hljs-keyword">if</span> (sum == target) &#123;<br>                        ans.push_back(&#123;nums[i], nums[j], nums[k], nums[m]&#125;);<br>                        while (k &lt; m &amp;&amp; nums[k] == nums[k + <span class="hljs-number">1</span>]) &#123;<br>                            k++;<br>                        &#125;<br>                        k++;<br>                        while (k &lt; m &amp;&amp; nums[m] == nums[m - <span class="hljs-number">1</span>]) &#123;<br>                            m--;<br>                        &#125;<br>                        m--;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; target) &#123;<br>                        k++;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        m--;<br>                    &#125;<br>                &#125; <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h1 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a><a href="https://leetcode-cn.com/problems/fibonacci-number/">509. 斐波那契数</a></h1><p><strong>斐波那契数</strong>，通常用 <code>F(n)</code> 表示，形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">F(0) &#x3D; 0，F(1) &#x3D; 1<br>F(n) &#x3D; F(n - 1) + F(n - 2)，其中 n &gt; 1<br></code></pre></td></tr></table></figure><p>给你 <code>n</code> ，请计算 <code>F(n)</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：2<br>输出：1<br>解释：F(2) &#x3D; F(1) + F(0) &#x3D; 1 + 0 &#x3D; 1<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：3<br>输出：2<br>解释：F(3) &#x3D; F(2) + F(1) &#x3D; 1 + 1 &#x3D; 2<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：4<br>输出：3<br>解释：F(4) &#x3D; F(3) + F(2) &#x3D; 2 + 1 &#x3D; 3<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 30</code></li></ul><h2 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fib</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> fib(n<span class="hljs-number">-2</span>) + fib(n<span class="hljs-number">-1</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a></h1><p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>注意：</strong>给定 <em>n</em> 是一个正整数。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。<br>1\.  1 阶 + 1 阶<br>2\.  2 阶<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。<br>1\.  1 阶 + 1 阶 + 1 阶<br>2\.  1 阶 + 2 阶<br>3\.  2 阶 + 1 阶<br></code></pre></td></tr></table></figure><h2 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span> &#123;<br>        <span class="hljs-keyword">return</span> n<br>    &#125;<br>    pre1,pre2 := <span class="hljs-number">2</span>,<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">2</span>; i &lt; n; i++ &#123;<br>        cur := pre1 + pre2<br>        pre2 = pre1<br>        pre1 = cur<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre1<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子数组和</a></h1><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [1]<br>输出：1<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [5,4,-1,7,8]<br>输出：23<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;4&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><p><strong>进阶：</strong>如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p><h2 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    sum := nums[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(nums); i++ &#123;<br>        <span class="hljs-keyword">if</span> nums[i] + nums[i<span class="hljs-number">-1</span>] &gt; nums[i] &#123;<br>            nums[i] += nums[i<span class="hljs-number">-1</span>]<br>        &#125;<br>        <span class="hljs-keyword">if</span>  nums[i] &gt; sum &#123;<br>            sum = nums[i]<br>        &#125;<br>    &#125;  <br>    <span class="hljs-keyword">return</span> sum<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h1><p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [1,5,11,5]<br>输出：true<br>解释：数组可以分割成 [1, 5, 5] 和 [11] 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [1,2,3,5]<br>输出：false<br>解释：数组不能分割成两个元素和相等的子集。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h2 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划 #背包问题 #difficult</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(nums)<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    sum, maxNum := <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _,num := <span class="hljs-keyword">range</span> nums &#123;<br>        sum += num<br>        <span class="hljs-keyword">if</span> num &gt; maxNum &#123;<br>            maxNum = num<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断总和是不是奇数</span><br>    <span class="hljs-keyword">if</span> sum%<span class="hljs-number">2</span> != <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    target := sum / <span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> target &lt; maxNum &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <br>    dp := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">bool</span>, target+<span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        v := nums[i]<br>        <span class="hljs-keyword">for</span> j := target; j &gt;= v; j-- &#123;<br>            dp[j] = dp[j] || dp[j-v]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[target]<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a><a href="https://leetcode-cn.com/problems/coin-change/">322. 零钱兑换</a></h1><p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> 。</p><p>你可以认为每种硬币的数量是无限的。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：coins &#x3D; [1, 2, 5], amount &#x3D; 11<br>输出：3 <br>解释：11 &#x3D; 5 + 5 + 1<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：coins &#x3D; [2], amount &#x3D; 3<br>输出：-1<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：coins &#x3D; [1], amount &#x3D; 0<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：coins &#x3D; [1], amount &#x3D; 1<br>输出：1<br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：coins &#x3D; [1], amount &#x3D; 2<br>输出：2<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 12</code></li><li><code>1 &lt;= coins[i] &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code></li><li><code>0 &lt;= amount &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><h2 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(coins []<span class="hljs-keyword">int</span>, amount <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    dp := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, amount + <span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>    <span class="hljs-comment">// 初始化为math.MaxInt32</span><br><span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= amount; j++ &#123;<br>dp[j] = math.MaxInt32<br>&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(coins); i++ &#123;<br>        <span class="hljs-keyword">for</span> j := coins[i]; j &lt;= amount ; j++ &#123;<br>            <span class="hljs-keyword">if</span> dp[j-coins[i]] != math.MaxInt32 &#123;<br>                dp[j] = min(dp[j], dp[j-coins[i]]+<span class="hljs-number">1</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 没找到能装满背包的, 就返回-1</span><br><span class="hljs-keyword">if</span> dp[amount] == math.MaxInt32 &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><span class="hljs-keyword">return</span> dp[amount]<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">min</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">if</span> a &lt; b&#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h1><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;()&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;()[]&#123;&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;(]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;([)]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;&#123;[]&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li></ul><h2 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h2><p>#栈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(s)<br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    pairs := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">byte</span>]<span class="hljs-keyword">byte</span> &#123;<br>        <span class="hljs-string">&#x27;)&#x27;</span>:<span class="hljs-string">&#x27;(&#x27;</span>,<br>        <span class="hljs-string">&#x27;]&#x27;</span>:<span class="hljs-string">&#x27;[&#x27;</span>,<br>        <span class="hljs-string">&#x27;&#125;&#x27;</span>:<span class="hljs-string">&#x27;&#123;&#x27;</span>,<br>    &#125;<br><br>    stack := []<span class="hljs-keyword">byte</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">if</span> pairs[s[i]] &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span> || stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] != pairs[s[i]] &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>            stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            stack = <span class="hljs-built_in">append</span>(stack,s[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="20-有效的括号-1"><a href="#20-有效的括号-1" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h1><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;()&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;()[]&#123;&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;(]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;([)]&quot;<br>输出：false<br></code></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;&#123;[]&#125;&quot;<br>输出：true<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li></ul><h2 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h2><p>#栈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(s)<br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    pairs := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">byte</span>]<span class="hljs-keyword">byte</span> &#123;<br>        <span class="hljs-string">&#x27;)&#x27;</span>:<span class="hljs-string">&#x27;(&#x27;</span>,<br>        <span class="hljs-string">&#x27;]&#x27;</span>:<span class="hljs-string">&#x27;[&#x27;</span>,<br>        <span class="hljs-string">&#x27;&#125;&#x27;</span>:<span class="hljs-string">&#x27;&#123;&#x27;</span>,<br>    &#125;<br><br>    stack := []<span class="hljs-keyword">byte</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">if</span> pairs[s[i]] &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span> || stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>] != pairs[s[i]] &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>            stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            stack = <span class="hljs-built_in">append</span>(stack,s[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(stack) == <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496. 下一个更大元素 I"></a><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496. 下一个更大元素 I</a></h1><p><code>nums1</code> 中数字 <code>x</code> 的 <strong>下一个更大元素</strong> 是指 <code>x</code> 在 <code>nums2</code> 中对应位置 <strong>右侧</strong> 的 <strong>第一个</strong> 比 <code>x</code>大的元素。</p><p>给你两个 <strong>没有重复元素</strong> 的数组 <code>nums1</code> 和 <code>nums2</code> ，下标从 <strong>0</strong> 开始计数，其中<code>nums1</code> 是 <code>nums2</code> 的子集。</p><p>对于每个 <code>0 &lt;= i &lt; nums1.length</code> ，找出满足 <code>nums1[i] == nums2[j]</code> 的下标 <code>j</code> ，并且在 <code>nums2</code> 确定 <code>nums2[j]</code> 的 <strong>下一个更大元素</strong> 。如果不存在下一个更大元素，那么本次查询的答案是 <code>-1</code> 。</p><p>返回一个长度为 <code>nums1.length</code> 的数组<code>ans</code>作为答案，满足<code>ans[i]</code>是如上所述的 <strong>下一个更大元素</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums1 &#x3D; [4,1,2], nums2 &#x3D; [1,3,4,2].<br>输出：[-1,3,-1]<br>解释：nums1 中每个值的下一个更大元素如下所述：<br>- 4 ，用加粗斜体标识，nums2 &#x3D; [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。<br>- 1 ，用加粗斜体标识，nums2 &#x3D; [1,3,4,2]。下一个更大元素是 3 。<br>- 2 ，用加粗斜体标识，nums2 &#x3D; [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums1 &#x3D; [2,4], nums2 &#x3D; [1,2,3,4].<br>输出：[3,-1]<br>解释：nums1 中每个值的下一个更大元素如下所述：<br>- 2 ，用加粗斜体标识，nums2 &#x3D; [1,2,3,4]。下一个更大元素是 3 。<br>- 4 ，用加粗斜体标识，nums2 &#x3D; [1,2,3,4]。不存在下一个更大元素，所以答案是 -1 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>nums1</code>和<code>nums2</code>中所有整数 <strong>互不相同</strong></li><li><code>nums1</code> 中的所有整数同样出现在 <code>nums2</code> 中</li></ul><p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(nums1.length + nums2.length)</code> 的解决方案吗？</p><h2 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h2><p>/#暴力解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">nextGreaterElement</span><span class="hljs-params">(nums1 []<span class="hljs-keyword">int</span>, nums2 []<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    m,n := <span class="hljs-built_in">len</span>(nums1),<span class="hljs-built_in">len</span>(nums2)<br>    res := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, m)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; m; i++ &#123;<br>        j := <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j &lt; n &amp;&amp; nums2[j] != nums1[i] &#123;<br>            j++<br>        &#125;<br>        k := j + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> k &lt; n &amp;&amp; nums2[k] &lt; nums2[j] &#123;<br>            k++<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> k &lt; n &#123;<br>            res[i] = nums2[k]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res[i] = <span class="hljs-number">-1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="456-132-模式"><a href="#456-132-模式" class="headerlink" title="456. 132 模式"></a><a href="https://leetcode-cn.com/problems/132-pattern/">456. 132 模式</a></h1><p>给你一个整数数组 <code>nums</code> ，数组中共有 <code>n</code> 个整数。<strong>132 模式的子序列</strong> 由三个整数 <code>nums[i]</code>、<code>nums[j]</code> 和 <code>nums[k]</code> 组成，并同时满足：<code>i &lt; j &lt; k</code> 和 <code>nums[i] &lt; nums[k] &lt; nums[j]</code> 。</p><p>如果 <code>nums</code> 中存在 <strong>132 模式的子序列</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [1,2,3,4]<br>输出：false<br>解释：序列中不存在 132 模式的子序列。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [3,1,4,2]<br>输出：true<br>解释：序列中有 1 个 132 模式的子序列： [1, 4, 2] 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：nums &#x3D; [-1,3,2,0]<br>输出：true<br>解释：序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 2 * 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>-10&lt;sup&gt;9&lt;/sup&gt; &lt;= nums[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li></ul><h4 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h4><p>#栈 #单调栈</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">find132pattern</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(nums)<br>    candidateK := []<span class="hljs-keyword">int</span>&#123;nums[n<span class="hljs-number">-1</span>]&#125;<br><br>    maxK := math.MinInt64<br><br>    <span class="hljs-keyword">for</span> i := n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i-- &#123;<br>        <span class="hljs-keyword">if</span> nums[i] &lt; maxK &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(candidateK) &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] &gt; candidateK[<span class="hljs-built_in">len</span>(candidateK)<span class="hljs-number">-1</span>] &#123;<br>            maxK = candidateK[<span class="hljs-built_in">len</span>(candidateK)<span class="hljs-number">-1</span>]<br>            candidateK = candidateK[:<span class="hljs-built_in">len</span>(candidateK)<span class="hljs-number">-1</span>]<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> nums[i] &gt; maxK &#123;<br>            candidateK = <span class="hljs-built_in">append</span>(candidateK, nums[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="119-杨辉三角-II"><a href="#119-杨辉三角-II" class="headerlink" title="119. 杨辉三角 II"></a><a href="https://leetcode-cn.com/problems/pascals-triangle-ii/">119. 杨辉三角 II</a></h1><p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code>行。</p><p><small style="display: inline;">在「杨辉三角」中，每个数是它左上方和右上方的数的和。</small></p><p><img src="https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif" alt></p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入: rowIndex &#x3D; 3<br>输出: [1,3,3,1]<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入: rowIndex &#x3D; 0<br>输出: [1]<br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入: rowIndex &#x3D; 1<br>输出: [1,1]<br></code></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>0 &lt;= rowIndex &lt;= 33</code></li></ul><p><strong>进阶：</strong></p><p>你可以优化你的算法到 <code>_O_(_rowIndex_)</code> 空间复杂度吗？</p><h2 id="Solution-13"><a href="#Solution-13" class="headerlink" title="Solution"></a>Solution</h2><p>#数学</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getRow</span><span class="hljs-params">(rowIndex <span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">int</span></span> &#123;<br>    C := <span class="hljs-built_in">make</span>([][]<span class="hljs-keyword">int</span>, rowIndex+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> C &#123;<br>        C[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>,i+<span class="hljs-number">1</span>)<br>        C[i][<span class="hljs-number">0</span>],C[i][i] = <span class="hljs-number">1</span>,<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt; i; j++ &#123;<br>            C[i][j] = C[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + C[i<span class="hljs-number">-1</span>][j]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> C[rowIndex]<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a><a href="https://leetcode-cn.com/problems/perfect-squares/">279. 完全平方数</a></h1><p>给定正整数 <em>n</em>，找到若干个完全平方数（比如 <code>1, 4, 9, 16, ...</code>）使得它们的和等于 <em>n</em>。你需要让组成和的完全平方数的个数最少。</p><p>给你一个整数 <code>n</code> ，返回和为 <code>n</code> 的完全平方数的 <strong>最少数量</strong> 。</p><p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：n &#x3D; 12<br>输出：3 <br>解释：12 &#x3D; 4 + 4 + 4<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：n &#x3D; 13<br>输出：2<br>解释：13 &#x3D; 4 + 9<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><h2 id="Solution-14"><a href="#Solution-14" class="headerlink" title="Solution"></a>Solution</h2><p>#动态规划</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">numSquares</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    f := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, n+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= n; i++ &#123;<br>        minn := math.MaxInt32<br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j*j &lt;= i; j++ &#123;<br>            minn = min(minn, f[i-j*j])<br>        &#125;<br>        f[i] = minn + <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> f[n]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">min</span><span class="hljs-params">(a,b <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">if</span> a &lt; b &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> b<br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><h1 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a><a href="https://leetcode-cn.com/problems/path-sum/">112. 路径总和</a></h1><p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：root &#x3D; [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum &#x3D; 22<br>输出：true<br>解释：等于目标和的根节点到叶节点路径如上图所示。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：root &#x3D; [1,2,3], targetSum &#x3D; 5<br>输出：false<br>解释：树中存在两条根节点到叶子节点的路径：<br>(1 --&gt; 2): 和为 3<br>(1 --&gt; 3): 和为 4<br>不存在 sum &#x3D; 5 的根节点到叶子节点的路径。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：root &#x3D; [], targetSum &#x3D; 0<br>输出：false<br>解释：由于树是空的，所以不存在根节点到叶子节点的路径。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点的数目在范围 <code>[0, 5000]</code> 内</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li><li><code>-1000 &lt;= targetSum &lt;= 1000</code></li></ul><h2 id="Solution-15"><a href="#Solution-15" class="headerlink" title="Solution"></a>Solution</h2><p>#广度搜索</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * type TreeNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Left *TreeNode</span><br><span class="hljs-comment"> *     Right *TreeNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasPathSum</span><span class="hljs-params">(root *TreeNode, targetSum <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123;<br>    <span class="hljs-keyword">if</span> root == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    queNode := []*TreeNode&#123;&#125;<br>    queVal := []<span class="hljs-keyword">int</span>&#123;&#125;<br>    queNode = <span class="hljs-built_in">append</span>(queNode,root)<br>    queVal = <span class="hljs-built_in">append</span>(queVal,root.Val)<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(queNode) != <span class="hljs-number">0</span> &#123;<br>        now := queNode[<span class="hljs-number">0</span>]<br>        queNode = queNode[<span class="hljs-number">1</span>:]<br>        temp := queVal[<span class="hljs-number">0</span>]<br>        queVal = queVal[<span class="hljs-number">1</span>:]<br><br>        <span class="hljs-keyword">if</span> now.Left == <span class="hljs-literal">nil</span> &amp;&amp; now.Right == <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">if</span> temp == targetSum &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>            <span class="hljs-keyword">continue</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> now.Left != <span class="hljs-literal">nil</span> &#123;<br>            queNode = <span class="hljs-built_in">append</span>(queNode,now.Left)<br>            queVal = <span class="hljs-built_in">append</span>(queVal,now.Left.Val + temp)<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> now.Right != <span class="hljs-literal">nil</span> &#123;<br>            queNode = <span class="hljs-built_in">append</span>(queNode, now.Right)<br>            queVal = <span class="hljs-built_in">append</span>(queVal, now.Right.Val + temp)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><hr><h1 id="720-词典中最长的单词"><a href="#720-词典中最长的单词" class="headerlink" title="720. 词典中最长的单词"></a><a href="https://leetcode-cn.com/problems/longest-word-in-dictionary/">720. 词典中最长的单词</a></h1><p>给出一个字符串数组<code>words</code>组成的一本英语词典。从中找出最长的一个单词，该单词是由<code>words</code>词典中其他单词逐步添加一个字母组成。若其中有多个可行的答案，则返回答案中字典序最小的单词。</p><p>若无答案，则返回空字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：<br>words &#x3D; [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;, &quot;world&quot;]<br>输出：&quot;world&quot;<br>解释： <br>单词&quot;world&quot;可由&quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, 和 &quot;worl&quot;添加一个字母组成。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：<br>words &#x3D; [&quot;a&quot;, &quot;banana&quot;, &quot;app&quot;, &quot;appl&quot;, &quot;ap&quot;, &quot;apply&quot;, &quot;apple&quot;]<br>输出：&quot;apple&quot;<br>解释：<br>&quot;apply&quot;和&quot;apple&quot;都能由词典中的单词组成。但是&quot;apple&quot;的字典序小于&quot;apply&quot;。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>所有输入的字符串都只包含小写字母。</li><li><code>words</code>数组长度范围为<code>[1,1000]</code>。</li><li><code>words[i]</code>的长度范围为<code>[1,30]</code>。</li></ul><h4 id="Solution-16"><a href="#Solution-16" class="headerlink" title="Solution"></a>Solution</h4><p>Language: <em>**</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longestWord</span><span class="hljs-params">(words []<span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;<br>    <span class="hljs-comment">// 排序哈希</span><br>    sort.Strings(words)<br><br>    <span class="hljs-comment">// 字符串/是否出现</span><br>    wordsMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">bool</span>)<br>    res := <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> _,word := <span class="hljs-keyword">range</span> words &#123;<br>        wlen, reslen := <span class="hljs-built_in">len</span>(word), <span class="hljs-built_in">len</span>(res)<br><br>        <span class="hljs-comment">// 字符串前缀</span><br>        <span class="hljs-keyword">if</span> wlen == <span class="hljs-number">1</span> || wordsMap[word[:wlen<span class="hljs-number">-1</span>]] &#123;<br>            wordsMap[word] = <span class="hljs-literal">true</span><br>            <span class="hljs-comment">// 更新res为最长的单词</span><br>            <span class="hljs-keyword">if</span> reslen == <span class="hljs-number">0</span> || reslen &lt; wlen &#123;<br>                res = word<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><h1 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h1><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串 </strong>的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入: s &#x3D; &quot;abcabcbb&quot;<br>输出: 3 <br>解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入: s &#x3D; &quot;bbbbb&quot;<br>输出: 1<br>解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。<br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入: s &#x3D; &quot;pwwkew&quot;<br>输出: 3<br>解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。<br></code></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入: s &#x3D; &quot;&quot;<br>输出: 0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><h2 id="Solution-17"><a href="#Solution-17" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    m := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">byte</span>]<span class="hljs-keyword">int</span>&#123;&#125;<br>    n := <span class="hljs-built_in">len</span>(s)<br><br>    rk, ans := <span class="hljs-number">-1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        <span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-built_in">delete</span>(m,s[i<span class="hljs-number">-1</span>])<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> rk + <span class="hljs-number">1</span> &lt; n &amp;&amp; m[s[rk+<span class="hljs-number">1</span>]] == <span class="hljs-number">0</span> &#123;<br>            m[s[rk+<span class="hljs-number">1</span>]]++<br>            rk++<br>        &#125; <br><br>        ans = max(ans, rk - i + <span class="hljs-number">1</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">max</span><span class="hljs-params">(x, y <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">if</span> x &lt; y &#123;<br>        <span class="hljs-keyword">return</span> y<br>    &#125;<br>    <span class="hljs-keyword">return</span> x<br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><hr><h1 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/">28. 实现 strStr()</a></h1><p>实现  函数。</p><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  <code>-1</code>。</p><p><strong>说明：</strong></p><p>当 <code>needle</code> 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p>对于本题而言，当 <code>needle</code> 是空字符串时我们应当返回 0 。这与 C 语言的  以及 Java 的  定义相符。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：haystack &#x3D; &quot;hello&quot;, needle &#x3D; &quot;ll&quot;<br>输出：2<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：haystack &#x3D; &quot;aaaaa&quot;, needle &#x3D; &quot;bba&quot;<br>输出：-1<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：haystack &#x3D; &quot;&quot;, needle &#x3D; &quot;&quot;<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= haystack.length, needle.length &lt;= 5 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li></ul><h2 id="Solution-18"><a href="#Solution-18" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strStr</span><span class="hljs-params">(haystack <span class="hljs-keyword">string</span>, needle <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    n,m := <span class="hljs-built_in">len</span>(haystack), <span class="hljs-built_in">len</span>(needle)<br>outer:<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i + m &lt;= n; i++ &#123;<br>        <span class="hljs-keyword">for</span> j:= <span class="hljs-keyword">range</span> needle &#123;<br>            <span class="hljs-keyword">if</span> haystack[i+j] != needle[j] &#123;<br>                <span class="hljs-keyword">continue</span> outer<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></h1><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：[7,1,5,3,6,4]<br>输出：5<br>解释：在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。<br>     注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：prices &#x3D; [7,6,4,3,1]<br>输出：0<br>解释：在这种情况下, 没有交易完成, 所以最大利润为 0。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>0 &lt;= prices[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><h2 id="Solution-19"><a href="#Solution-19" class="headerlink" title="Solution"></a>Solution</h2><p>#贪心 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(prices []<span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(max <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    min := prices[<span class="hljs-number">0</span>]<br>    max = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _,price := <span class="hljs-keyword">range</span> prices &#123;<br>        <span class="hljs-keyword">if</span> price &lt; min &#123;<br>            min = price<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> max &gt; price - min &#123;<br>                <span class="hljs-keyword">continue</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                max = price - min<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">力扣算法高效入门（21道题-GoLang）</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Go" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Go/"/>
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="LeetCode" scheme="https://www.mingsrc.work/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Python端口占用测试（检测Socket）</title>
    <link href="https://www.mingsrc.work/posts/2498e501"/>
    <id>https://www.mingsrc.work/posts/2498e501</id>
    <published>2022-01-20T16:34:32.931Z</published>
    <updated>2022-01-23T06:59:28.864Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="windows-端口相关"><a href="#windows-端口相关" class="headerlink" title="windows 端口相关"></a>windows 端口相关</h1><h2 id="动态端口查询"><a href="#动态端口查询" class="headerlink" title="动态端口查询"></a>动态端口查询</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">netsh int ipv4 show dynamicport tcp<br><br>协议 tcp 动态端口范围<br>---------------------------------<br>启动端口        : <span class="hljs-number">49152</span><br>端口数          : <span class="hljs-number">16384</span><br></code></pre></td></tr></table></figure><h2 id="动态端口设置"><a href="#动态端口设置" class="headerlink" title="动态端口设置"></a>动态端口设置</h2><p>需要再管理员命令行下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">netsh int ipv4 <span class="hljs-built_in">set</span> dynamicport tcp <span class="hljs-built_in">start</span>=<span class="hljs-number">49152</span> num=<span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><h1 id="Python实现的端口测试接口"><a href="#Python实现的端口测试接口" class="headerlink" title="Python实现的端口测试接口"></a>Python实现的端口测试接口</h1><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-comment"># 文件名：client.py</span><br> <br><span class="hljs-keyword">from</span> ast <span class="hljs-keyword">import</span> Try<br><span class="hljs-keyword">import</span> socket               <span class="hljs-comment"># 导入 socket 模块</span><br><span class="hljs-keyword">import</span> sys<br><br>socketList = []<br><br>host = socket.gethostname() <span class="hljs-comment"># 获取本地主机名</span><br>remoteHost = <span class="hljs-string">&#x27;192.168.3.171&#x27;</span><br>remotePort = <span class="hljs-number">6000</span>                <span class="hljs-comment"># 设置端口号</span><br><br>errNum = <span class="hljs-number">0</span><br>ToTalNum = <span class="hljs-number">0</span><br>errPorts = &#123;&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请通过\&#x27;netsh int ipv4 show dynamicport tcp\&#x27;查看启动端口和端口数,一般情况下该值为49152&quot;</span>)<br>start = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;启动端口:&quot;</span>))<br>end = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;终止端口:&quot;</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start , end): <br>    ToTalNum += <span class="hljs-number">1</span><br>    s = socket.socket()         <span class="hljs-comment"># 创建 socket 对象</span><br>    localHostAndPort = (host,i)<br>    <span class="hljs-keyword">try</span>:<br>        s.bind(localHostAndPort)<br>        <span class="hljs-keyword">if</span> s.connect((remoteHost, remotePort)) == socket.error:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;FAILED&#x27;</span>, i)<br>        <span class="hljs-built_in">print</span>(s.recv(<span class="hljs-number">1024</span>).decode(), i)<br>        socketList.append(s)<br>    <span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> e:<br>        errNum += <span class="hljs-number">1</span><br>        errPorts[i] = (localHostAndPort, <span class="hljs-string">&quot;OSError:&quot;</span>, e)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Total Port Number(%r)&quot;</span>%ToTalNum, <span class="hljs-string">&quot;Error Port Number(%r)&quot;</span>%errNum)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error Ports:&quot;</span>)<br><span class="hljs-keyword">for</span> err <span class="hljs-keyword">in</span> errPorts.keys():<br>    <span class="hljs-built_in">print</span>(err, errPorts[err])<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(errPorts) == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All Ports success (%d) ~&quot;</span>%start, <span class="hljs-string">&quot;(%d)&quot;</span>% end)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入\&#x27;exit\&#x27;关闭CLIENT:&quot;</span>)<br>char = <span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">while</span> char != <span class="hljs-string">&quot;exit&quot;</span>:<br><span class="hljs-comment"># print(char)</span><br>char = <span class="hljs-built_in">input</span>()<br><br><span class="hljs-keyword">for</span> skt <span class="hljs-keyword">in</span> socketList:<br>    skt.close()<br><span class="hljs-comment"># print(socketList)</span><br></code></pre></td></tr></table></figure><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-comment"># 文件名：server.py</span><br> <br><span class="hljs-keyword">import</span> socket               <span class="hljs-comment"># 导入 socket 模块</span><br> <br>s = socket.socket()         <span class="hljs-comment"># 创建 socket 对象</span><br>host = socket.gethostname() <span class="hljs-comment"># 获取本地主机名</span><br>port = <span class="hljs-number">12345</span>                <span class="hljs-comment"># 设置端口</span><br>s.bind((host, port))        <span class="hljs-comment"># 绑定端口</span><br><br>msg = <span class="hljs-string">&#x27;Success！&#x27;</span>  <span class="hljs-comment">#strip默认取出字符串的头尾空格</span><br> <br>s.listen(<span class="hljs-number">5</span>)                 <span class="hljs-comment"># 等待客户端连接</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    c,addr = s.accept()     <span class="hljs-comment"># 建立客户端连接</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;连接地址：&#x27;</span>, addr)<br>    c.send(msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    c.close()                <span class="hljs-comment"># 关闭连接</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一个简单的端口占用测试</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    
    <category term="python" scheme="https://www.mingsrc.work/tags/python/"/>
    
    <category term="Socket" scheme="https://www.mingsrc.work/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>(Golang)链表学习记录</title>
    <link href="https://www.mingsrc.work/posts/85980731"/>
    <id>https://www.mingsrc.work/posts/85980731</id>
    <published>2022-01-16T04:11:08.436Z</published>
    <updated>2022-01-23T06:59:28.862Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><hr><h1 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></h1><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; [1,2], pos &#x3D; 0<br>输出：true<br>解释：链表中有一个环，其尾部连接到第一个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; [1], pos &#x3D; -1<br>输出：false<br>解释：链表中没有环。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 10&lt;sup&gt;4&lt;/sup&gt;]</code></li><li><code>-10&lt;sup&gt;5&lt;/sup&gt; &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li></ul><p><strong>进阶：</strong>你能用 <code>O(1)</code>（即，常量）内存解决此问题吗？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>#快慢指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(head *ListNode)</span> <span class="hljs-title">bool</span></span> &#123;<br>    <span class="hljs-comment">// 快慢指针</span><br>    <span class="hljs-keyword">if</span> head == <span class="hljs-literal">nil</span> || head.Next == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    slow, fast := head, head.Next<br><br>    <span class="hljs-keyword">for</span> fast != slow &#123;<br>        <span class="hljs-keyword">if</span> fast == <span class="hljs-literal">nil</span> || fast.Next == <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br><br>        slow = slow.Next<br>        fast = fast.Next.Next<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h1><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改</strong> 链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1<br>输出：返回索引为 1 的链表节点<br>解释：链表中有一个环，其尾部连接到第二个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; [1,2], pos &#x3D; 0<br>输出：返回索引为 0 的链表节点<br>解释：链表中有一个环，其尾部连接到第一个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; [1], pos &#x3D; -1<br>输出：返回 null<br>解释：链表中没有环。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 10&lt;sup&gt;4&lt;/sup&gt;]</code> 内</li><li><code>-10&lt;sup&gt;5&lt;/sup&gt; &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul><p><strong>进阶：</strong>你是否可以使用 <code>O(1)</code> 空间解决此题？</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">detectCycle</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>    seen := <span class="hljs-keyword">map</span>[*ListNode]<span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>    <span class="hljs-keyword">for</span> head != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">if</span> _,ok := seen[head]; ok &#123;<br>            <span class="hljs-keyword">return</span> head<br>        &#125;<br>        seen[head] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>        head = head.Next<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>#快慢指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">detectCycle</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>    slow, fast := head, head<br>    <span class="hljs-keyword">for</span> fast != <span class="hljs-literal">nil</span> &#123;<br>        slow = slow.Next<br>        <span class="hljs-keyword">if</span> fast.Next == <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>        &#125;<br>        fast = fast.Next.Next<br><br>        <span class="hljs-keyword">if</span> fast == slow &#123;<br>            p := head<br>            <span class="hljs-keyword">for</span> p != slow &#123;<br>                p = p.Next<br>                slow = slow.Next<br>            &#125;<br>            <span class="hljs-keyword">return</span> p<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">160. 相交链表</a></h1><p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p><strong>自定义评测：</strong></p><p><strong>评测系统</strong> 的输入如下（你设计的程序 <strong>不适用</strong> 此输入）：</p><ul><li><code>intersectVal</code> - 相交的起始节点的值。如果不存在相交节点，这一值为 <code>0</code></li><li><code>listA</code> - 第一个链表</li><li><code>listB</code> - 第二个链表</li><li><code>skipA</code> - 在 <code>listA</code> 中（从头节点开始）跳到交叉节点的节点数</li><li><code>skipB</code> - 在 <code>listB</code> 中（从头节点开始）跳到交叉节点的节点数</li></ul><p>评测系统将根据这些输入创建链式数据结构，并将两个头节点 <code>headA</code> 和 <code>headB</code> 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 <strong>视作正确答案</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,6,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3<br>输出：Intersected at &#39;8&#39;<br>解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。<br>在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：intersectVal &#x3D; 2, listA &#x3D; [1,9,1,2,4], listB &#x3D; [3,2,4], skipA &#x3D; 3, skipB &#x3D; 1<br>输出：Intersected at &#39;2&#39;<br>解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。<br>在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：intersectVal &#x3D; 0, listA &#x3D; [2,6,4], listB &#x3D; [1,5], skipA &#x3D; 3, skipB &#x3D; 2<br>输出：null<br>解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。<br>由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>这两个链表不相交，因此返回 null 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>listA</code> 中节点数目为 <code>m</code></li><li><code>listB</code> 中节点数目为 <code>n</code></li><li><code>1 &lt;= m, n &lt;= 3 * 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li><code>1 &lt;= Node.val &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>0 &lt;= skipA &lt;= m</code></li><li><code>0 &lt;= skipB &lt;= n</code></li><li>如果 <code>listA</code> 和 <code>listB</code> 没有交点，<code>intersectVal</code> 为 <code>0</code></li><li>如果 <code>listA</code> 和 <code>listB</code> 有交点，<code>intersectVal == listA[skipA] == listB[skipB]</code></li></ul><p><strong>进阶：</strong>你能否设计一个时间复杂度 <code>O(m + n)</code> 、仅用 <code>O(1)</code> 内存的解决方案？</p><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(headA, headB *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>    <span class="hljs-keyword">if</span> headA == <span class="hljs-literal">nil</span> || headB == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br><br>    pa,pb := headA, headB<br>    <span class="hljs-keyword">for</span> pa != pb &#123;<br>        <span class="hljs-keyword">if</span> pa == <span class="hljs-literal">nil</span> &#123;<br>            pa = headB<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            pa = pa.Next<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> pb == <span class="hljs-literal">nil</span> &#123;<br>            pb = headA<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            pb = pb.Next<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pa<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h1><p>Difficulty: <strong>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。   示例 1： 输入：head = [1,2,3,4,5], n = 2 输出：[1,2,3,5] 示例 2： 输入：head = [1], n = 1 输出：[] 示例 3： 输入：head = [1,2], n = 1 输出：[1]   提示： 链表中结点的数目为 sz 1 &lt;= sz &lt;= 30 0 &lt;= Node.val &lt;= 100 1 &lt;= n &lt;= sz   进阶：你能尝试使用一趟扫描实现吗？ </strong></p><p>给你一个链表，删除链表的倒数第 <code>n</code>个结点，并且返回链表的头结点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; [1,2,3,4,5], n &#x3D; 2<br>输出：[1,2,3,5]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; [1], n &#x3D; 1<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; [1,2], n &#x3D; 1<br>输出：[1]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中结点的数目为 <code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><p>#双指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> cur <span class="hljs-keyword">int</span> = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(head *ListNode, n <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>    dummy := &amp;ListNode&#123;<span class="hljs-number">0</span>,head&#125;<br>    first, second := head, dummy<br><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>        first = first.Next<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> ; first != <span class="hljs-literal">nil</span>; first = first.Next &#123;<br>        second = second.Next<br>    &#125;<br><br>    second.Next = second.Next.Next<br>    <span class="hljs-keyword">return</span> dummy.Next<br>&#125;<br></code></pre></td></tr></table></figure><hr><hr><hr>]]></content>
    
    
    <summary type="html">力扣链表学习记录，使用Golang的数据结构入门</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Go" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Go/"/>
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="LeetCode" scheme="https://www.mingsrc.work/tags/LeetCode/"/>
    
    <category term="链表" scheme="https://www.mingsrc.work/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>力扣每日一题</title>
    <link href="https://www.mingsrc.work/posts/206c9e3b"/>
    <id>https://www.mingsrc.work/posts/206c9e3b</id>
    <published>2022-01-16T04:06:45.329Z</published>
    <updated>2022-01-23T06:59:28.876Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[Toc]</p><h1 id="382-链表随机节点"><a href="#382-链表随机节点" class="headerlink" title="382. 链表随机节点"></a><a href="https://leetcode-cn.com/problems/linked-list-random-node/">382. 链表随机节点</a></h1><p>给你一个单链表，随机选择链表的一个节点，并返回相应的节点值。每个节点 <strong>被选中的概率一样</strong> 。</p><p>实现 <code>Solution</code> 类：</p><ul><li><code>Solution(ListNode head)</code> 使用整数数组初始化对象。</li><li><code>int getRandom()</code> 从链表中随机选择一个节点并返回该节点的值。链表中所有节点被选中的概率相等。</li></ul><p><strong>示例：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/16/getrand-linked-list.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入<br>[&quot;Solution&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;, &quot;getRandom&quot;]<br>[[[1, 2, 3]], [], [], [], [], []]<br>输出<br>[null, 1, 3, 2, 2, 3]<br><br>解释<br>Solution solution &#x3D; new Solution([1, 2, 3]);<br>solution.getRandom(); &#x2F;&#x2F; 返回 1<br>solution.getRandom(); &#x2F;&#x2F; 返回 3<br>solution.getRandom(); &#x2F;&#x2F; 返回 2<br>solution.getRandom(); &#x2F;&#x2F; 返回 2<br>solution.getRandom(); &#x2F;&#x2F; 返回 3<br>&#x2F;&#x2F; getRandom() 方法应随机返回 1、2、3中的一个，每个元素被返回的概率相等。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中的节点数在范围 <code>[1, 10&lt;sup&gt;4&lt;/sup&gt;]</code> 内</li><li><code>-10&lt;sup&gt;4&lt;/sup&gt; &lt;= Node.val &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li><li>至多调用 <code>getRandom</code> 方法 <code>10&lt;sup&gt;4&lt;/sup&gt;</code> 次</li></ul><p><strong>进阶：</strong></p><ul><li>如果链表非常大且长度未知，该怎么处理？</li><li>你能否在不使用额外空间的情况下解决此问题？</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>#链表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">type</span> Solution []<span class="hljs-keyword">int</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Constructor</span><span class="hljs-params">(head *ListNode)</span> <span class="hljs-params">(s Solution)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> node := head; node != <span class="hljs-literal">nil</span>; node = node.Next &#123;<br>        s = <span class="hljs-built_in">append</span>(s, node.Val)<br>    &#125;<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s Solution)</span> <span class="hljs-title">GetRandom</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br>    <span class="hljs-keyword">return</span> s[rand.Intn(<span class="hljs-built_in">len</span>(s))]<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your Solution object will be instantiated and called as such:</span><br><span class="hljs-comment"> * obj := Constructor(head);</span><br><span class="hljs-comment"> * param_1 := obj.GetRandom();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="LeetCode" scheme="https://www.mingsrc.work/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Go_hard_Algorithm</title>
    <link href="https://www.mingsrc.work/posts/24feca74"/>
    <id>https://www.mingsrc.work/posts/24feca74</id>
    <published>2022-01-08T17:57:48.928Z</published>
    <updated>2022-01-08T18:32:19.294Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="913-猫和老鼠-图-dfs-dp"><a href="#913-猫和老鼠-图-dfs-dp" class="headerlink" title="913. 猫和老鼠 #图 #dfs #dp"></a><a href="https://leetcode-cn.com/problems/cat-and-mouse/">913. 猫和老鼠</a> #图 #dfs #dp</h1><p>两位玩家分别扮演猫和老鼠，在一张 <strong>无向</strong> 图上进行游戏，两人轮流行动。</p><p>图的形式是：<code>graph[a]</code> 是一个列表，由满足 <code>ab</code> 是图中的一条边的所有节点 <code>b</code> 组成。</p><p>老鼠从节点 <code>1</code> 开始，第一个出发；猫从节点 <code>2</code> 开始，第二个出发。在节点 <code>0</code> 处有一个洞。</p><p>在每个玩家的行动中，他们 <strong>必须</strong> 沿着图中与所在当前位置连通的一条边移动。例如，如果老鼠在节点 <code>1</code> ，那么它必须移动到 <code>graph[1]</code> 中的任一节点。</p><p>此外，猫无法移动到洞中（节点 <code>0</code>）。</p><p>然后，游戏在出现以下三种情形之一时结束：</p><ul><li>如果猫和老鼠出现在同一个节点，猫获胜。</li><li>如果老鼠到达洞中，老鼠获胜。</li><li>如果某一位置重复出现（即，玩家的位置和移动顺序都与上一次行动相同），游戏平局。</li></ul><p>给你一张图 <code>graph</code> ，并假设两位玩家都都以最佳状态参与游戏：</p><ul><li>如果老鼠获胜，则返回 <code>1</code>；</li><li>如果猫获胜，则返回 <code>2</code>；</li><li>如果平局，则返回 <code>0</code> 。</li></ul><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/17/cat1.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：graph &#x3D; [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/17/cat2.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：graph &#x3D; [[1,3],[0],[3],[0,2]]<br>输出：1<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= graph.length &lt;= 50</code></li><li><code>1 &lt;= graph[i].length &lt; graph.length</code></li><li><code>0 &lt;= graph[i][j] &lt; graph.length</code></li><li><code>graph[i][j] != i</code></li><li><code>graph[i]</code> 互不相同</li><li>猫和老鼠在游戏中总是移动</li></ul><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MOUSE_WIN = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> CAT_WIN = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> DRAW = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">51</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> dp[MAXN][MAXN][MAXN*<span class="hljs-number">2</span>];<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; graph;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">catMouseGame</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;n = graph.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">this</span>-&gt;graph = graph;<br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">-1</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(dp));<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getResult</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-keyword">int</span> mouse, <span class="hljs-keyword">int</span> cat, <span class="hljs-keyword">int</span> turns)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(turns == n * <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> DRAW;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>( dp[mouse][cat][turns] &lt; <span class="hljs-number">0</span> )<br>        &#123;<br>            <span class="hljs-keyword">if</span>(mouse == <span class="hljs-number">0</span>)<br>            &#123;<br>                dp[mouse][cat][turns] = MOUSE_WIN;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cat == mouse)<br>            &#123;<br>                dp[mouse][cat][turns] = CAT_WIN;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">getNextResult</span>(mouse, cat, turns);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[mouse][cat][turns];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getNextResult</span><span class="hljs-params">(<span class="hljs-keyword">int</span> mouse, <span class="hljs-keyword">int</span> cat, <span class="hljs-keyword">int</span> turns)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> curMove = turns % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? mouse : cat;<br>        <span class="hljs-keyword">int</span> defaultResult = curMove == mouse ? CAT_WIN : MOUSE_WIN;<br>        <span class="hljs-keyword">int</span> result = defaultResult;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> next : graph[curMove])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(curMove == cat &amp;&amp; next == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">int</span> nextMouse = curMove == mouse ? next : mouse;<br>            <span class="hljs-keyword">int</span> nextCat = curMove == cat ? next : cat;<br>            <span class="hljs-keyword">int</span> nextResult = <span class="hljs-built_in">getResult</span>(nextMouse, nextCat, turns+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(nextResult != defaultResult)<br>            &#123;<br>                result = nextResult;<br>                <span class="hljs-keyword">if</span>(result != DRAW)<br>                &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        dp[mouse][cat][turns] = result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>    draw = <span class="hljs-number">0</span><br>    mouseWin = <span class="hljs-number">1</span><br>    catWin = <span class="hljs-number">2</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">catMouseGame</span><span class="hljs-params">(graph [][]<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(graph)<br>    dp := <span class="hljs-built_in">make</span>([][][]<span class="hljs-keyword">int</span>, n)<br>    <span class="hljs-keyword">for</span> i:= <span class="hljs-keyword">range</span> dp &#123;<br>        dp[i] = <span class="hljs-built_in">make</span>([][]<span class="hljs-keyword">int</span>, n)<br>        <span class="hljs-keyword">for</span> j:= <span class="hljs-keyword">range</span> dp[i] &#123;<br>            dp[i][j] = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, n*<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">for</span> k:= <span class="hljs-keyword">range</span> dp[i][j] &#123;<br>                dp[i][j][k] = <span class="hljs-number">-1</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> getResult, getNextResult <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> <br>    getResult = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(mouse, cat, turns <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>        <span class="hljs-keyword">if</span> turns == n*<span class="hljs-number">2</span> &#123;<br>            <span class="hljs-keyword">return</span> draw<br>        &#125;<br><br>        res := dp[mouse][cat][turns]<br>        <span class="hljs-keyword">if</span> res != <span class="hljs-number">-1</span> &#123;<br>            <span class="hljs-keyword">return</span> res<br>        &#125;<br>        <span class="hljs-keyword">if</span> mouse == <span class="hljs-number">0</span> &#123;<br>            res = mouseWin<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> cat == mouse &#123;<br>            res = catWin<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            res = getNextResult(mouse, cat, turns)<br>        &#125;<br>        dp[mouse][cat][turns] = res<br>        <span class="hljs-keyword">return</span> res<br>        &#125;<br><br>        getNextResult = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(mouse, cat, turns <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>        curMove := mouse<br>        <span class="hljs-keyword">if</span> turns % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#123;<br>            curMove = cat<br>        &#125;<br>        defaultRes := mouseWin<br>        <span class="hljs-keyword">if</span> curMove == mouse &#123;<br>            defaultRes = catWin<br>        &#125;<br>        <br>        res := defaultRes<br>        <span class="hljs-keyword">for</span> _,next := <span class="hljs-keyword">range</span> graph[curMove] &#123;<br>            <span class="hljs-keyword">if</span> curMove == cat &amp;&amp; next == <span class="hljs-number">0</span> &#123;<br>                <span class="hljs-keyword">continue</span><br>            &#125;<br><br>            nextMouse, nextCat := mouse,cat<br>            <span class="hljs-keyword">if</span> curMove == mouse &#123;<br>                nextMouse = next<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> curMove == cat &#123;<br>                nextCat = next<br>            &#125;<br><br>            nextRes := getResult(nextMouse, nextCat, turns + <span class="hljs-number">1</span> )<br>            <span class="hljs-keyword">if</span> nextRes != defaultRes &#123;<br>                res = nextRes<br>                <span class="hljs-keyword">if</span> res != draw &#123;<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> getResult(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="思路（转自力扣官方）"><a href="#思路（转自力扣官方）" class="headerlink" title="思路（转自力扣官方）"></a>思路（转自力扣官方）</h2><p>这道题是博弈问题，猫和老鼠都按照最优策略参与游戏。</p><p>在阐述具体解法之前，首先介绍博弈问题中的三个概念：必胜状态、必败状态与必和状态。</p><ol><li><p>对于特定状态，如果游戏已经结束，则根据结束时的状态决定必胜状态、必败状态与必和状态。</p><ul><li><p>如果分出胜负，则该特定状态对于获胜方为必胜状态，对于落败方为必败状态。</p></li><li><p>如果是平局，则该特定状态对于双方都为必和状态。</p></li></ul></li><li><p>从特定状态开始，如果存在一种操作将状态变成必败状态，则当前玩家可以选择该操作，将必败状态留给对方玩家，因此该特定状态对于当前玩家为必胜状态。</p></li><li><p>从特定状态开始，如果所有操作都会将状态变成必胜状态，则无论当前玩家选择哪种操作，都会将必胜状态留给对方玩家，因此该特定状态对于当前玩家为必败状态。</p></li><li><p>从特定状态开始，如果任何操作都不能将状态变成必败状态，但是存在一种操作将状态变成必和状态，则当前玩家可以选择该操作，将必和状态留给对方玩家，因此该特定状态对于双方玩家都为必和状态。</p></li></ol><p>对于每个玩家，最优策略如下：</p><ol><li><p>争取将必胜状态留给自己，将必败状态留给对方玩家。</p></li><li><p>在自己无法到达必胜状态的情况下，争取将必和状态留给自己。</p></li></ol><p>方法一：动态规划<br>博弈问题通常可以使用动态规划求解。</p><p>使用三维数组 $dp$ 表示状态，$dp[mouse][cat][turns] $表示从老鼠位于节点 $\textit{mouse}mouse$、猫位于节点 $\textit{cat}cat$、游戏已经进行了 $\textit{turns}turns $轮的状态开始，猫和老鼠都按照最优策略的情况下的游戏结果。假设图中的节点数是 nn，则有 $0 \le \textit{mouse}, \textit{cat} &lt; n0≤mouse,cat&lt;n$。</p><p>由于游戏的初始状态是老鼠位于节点 11，猫位于节点 22，因此$ \textit{dp}[1][2][0]dp[1][2][0] $为从初始状态开始的游戏结果。</p><p>动态规划的边界条件为可以直接得到游戏结果的状态，包括以下三种状态：</p><ul><li><p>如果$ \textit{mouse} = 0mouse=0$，老鼠躲入洞里，则老鼠获胜，因此对于任意$ \textit{cat}cat$ 和 $\textit{turns}turns 都有 \textit{dp}[0][\textit{cat}][\textit{turns}] = 1dp[0][cat][turns]=1$，该状态为老鼠的必胜状态，猫的必败状态。</p></li><li><p>如果$ \textit{cat} = \textit{mouse}cat=mouse$，猫和老鼠占据相同的节点，则猫获胜，因此当 $\textit{cat} = \textit{mouse}cat=mouse $时，对于任意 $\textit{mouse}mouse、\textit{cat}cat $和 $\textit{turns}turns$ 都有$ \textit{dp}[\textit{mouse}][\textit{cat}][\textit{turns}] = 2dp[mouse][cat][turns]=2$，该状态为老鼠的必败状态，猫的必胜状态。注意猫不能移动到节点 00，因此当$ \textit{mouse} = 0mouse=0$ 时，一定有$ \textit{cat} \ne \textit{mouse}cat =mouse$。</p></li><li><p>如果$ \textit{turns} \ge 2nturns≥2n$，则是平局，该状态为双方的必和状态。</p></li></ul><blockquote><p>为什么当 $\textit{turns} \ge 2nturns≥2n$时，游戏结果是平局呢？</p><p>如果游戏已经进行了$ 2n2n$ 轮，但是仍然没有任何一方获胜，此时猫和老鼠各移动了 nn 次，该移动次数等于图中的节点数，因此一定存在一个老鼠到达过至少两次的节点，以及一定存在一个猫到达过至少两次的节点。</p><p>对于老鼠而言，即使按照最优策略，也无法躲入洞内，而是只能回到一个已经到达过的节点。当老鼠回到一个在过去的某个回合已经到达过的节点时，猫可能回到在相同回合已经到达过的节点，也可能移动到一个更有利于猫获胜的节点，不可能移动到一个更有利于老鼠获胜的节点（否则猫就不是按照最优策略参与游戏）。如果猫回到在相同回合已经到达过的节点，则形成循环，因此是平局；如果猫移动到一个更有利于猫获胜的节点，则老鼠的获胜机会更小，因此老鼠无法获胜。</p><p>同理可知，如果猫按照最优策略也只能回到一个已经到达过的节点，则猫无法获胜。<br>因此当猫和老鼠分别回到一个已经到达过的节点时，猫和老鼠都无法获胜，游戏结果是平局。</p></blockquote><p>动态规划的状态转移需要考虑当前玩家所有可能的移动，选择最优策略的移动。<br>由于老鼠先开始移动，猫后开始移动，因此可以根据游戏已经进行的轮数 $\textit{turns}turns $的奇偶性决定当前轮到的玩家，当$ \textit{turns}turns $是偶数时轮到老鼠移动，当 $\textit{turns}turns $是奇数时轮到猫移动。</p><ol><li>如果轮到老鼠移动，则对于老鼠从当前节点移动一次之后可能到达的每个节点，进行如下操作：</li><li>如果存在一个节点，老鼠到达该节点之后，老鼠可以获胜，则老鼠到达该节点之后的状态为老鼠的必胜状态，猫的必败状态，因此在老鼠移动之前的当前状态为老鼠的必胜状态。<br>如果老鼠到达任何节点之后的状态都不是老鼠的必胜状态，但是存在一个节点，老鼠到达该节点之后，结果是平局，则老鼠到达该节点之后的状态为双方的必和状态，因此在老鼠移动之前的当前状态为双方的必和状态。</li><li>如果老鼠到达任何节点之后的状态都不是老鼠的必胜状态或必和状态，则老鼠到达任何节点之后的状态都为老鼠的必败状态，猫的必胜状态，因此在老鼠移动之前的当前状态为老鼠的必败状态。</li></ol><p>如果轮到猫移动，则对于猫从当前节点移动一次之后可能到达的每个节点，进行如下操作：</p><ol><li>如果存在一个节点，猫到达该节点之后，猫可以获胜，则猫到达该节点之后的状态为猫的必胜状态，老鼠的必败状态，因此在猫移动之前的当前状态为猫的必胜状态。</li><li>如果猫到达任何节点之后的状态都不是猫的必胜状态，但是存在一个节点，猫到达该节点之后，结果是平局，则猫到达该节点之后的状态为双方的必和状态，因此在猫移动之前的当前状态为双方的必和状态。</li><li>如果猫到达任何节点之后的状态都不是猫的必胜状态或必和状态，则猫到达任何节点之后的状态都为猫的必败状态，老鼠的必胜状态，因此在猫移动之前的当前状态为猫的必败状态。</li></ol><p>实现方面，由于双方移动的策略相似，因此可以使用一个函数实现移动策略，根据游戏已经进行的轮数的奇偶性决定当前轮到的玩家。对于特定玩家的移动，实现方法如下：</p><ol><li><p>如果当前玩家存在一种移动方法到达非必败状态，则用该状态更新游戏结果。</p><ul><li><p>如果该移动方法到达必胜状态，则将当前状态（移动前的状态）设为必胜状态，结束遍历其他可能的移动。</p></li><li><p>如果该移动方法到达必和状态，则将当前状态（移动前的状态）设为必和状态，继续遍历其他可能的移动，因为可能存在到达必胜状态的移动方法。</p></li></ul></li><li><p>如果当前玩家的任何移动方法都到达必败状态，则将当前状态（移动前的状态）设为必败状态。</p></li></ol><p>特别地，如果当前玩家是猫，则不能移动到节点 00。</p><blockquote><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/cat-and-mouse/solution/mao-he-lao-shu-by-leetcode-solution-444x/">https://leetcode-cn.com/problems/cat-and-mouse/solution/mao-he-lao-shu-by-leetcode-solution-444x/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
    <summary type="html">Go刷题笔记_Init_Come on!!!</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Go" scheme="https://www.mingsrc.work/categories/Go/"/>
    
    <category term="刷题笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="LeetCode" scheme="https://www.mingsrc.work/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Go_Easy_Algorithm</title>
    <link href="https://www.mingsrc.work/posts/a0a70754"/>
    <id>https://www.mingsrc.work/posts/a0a70754</id>
    <published>2022-01-08T15:14:20.824Z</published>
    <updated>2022-01-09T12:20:19.350Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="7-整数反转-for-整型"><a href="#7-整数反转-for-整型" class="headerlink" title="7. 整数反转 #for #整型"></a><a href="https://leetcode-cn.com/problems/reverse-integer/">7. 整数反转</a> #for #整型</h1><p>Difficulty: <strong>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。 如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。 假设环境不允许存储 64 位整数（有符号或无符号）。   示例 1： 输入：x = 123 输出：321 示例 2： 输入：x = -123 输出：-321 示例 3： 输入：x = 120 输出：21 示例 4： 输入：x = 0 输出：0   提示： -231 &lt;= x &lt;= 231 - 1 </strong></p><p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−2&lt;sup&gt;31&lt;/sup&gt;,  2&lt;sup&gt;31 &lt;/sup&gt;− 1]</code> ，就返回 0。</p><p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：x &#x3D; 123<br>输出：321<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：x &#x3D; -123<br>输出：-321<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：x &#x3D; 120<br>输出：21<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：x &#x3D; 0<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-2&lt;sup&gt;31&lt;/sup&gt; &lt;= x &lt;= 2&lt;sup&gt;31&lt;/sup&gt; - 1</code></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(x <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(rev <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> x != <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">if</span> rev &lt; math.MinInt32/<span class="hljs-number">10</span> || rev &gt; math.MaxInt32/<span class="hljs-number">10</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br><br>        digit := x % <span class="hljs-number">10</span><br>        x /= <span class="hljs-number">10</span><br>        rev = rev*<span class="hljs-number">10</span> + digit<br>    &#125;<br>    <span class="hljs-keyword">return</span> <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1614-括号的最大嵌套深度-字符串-for"><a href="#1614-括号的最大嵌套深度-字符串-for" class="headerlink" title="1614. 括号的最大嵌套深度 #字符串 #for"></a><a href="https://leetcode-cn.com/problems/maximum-nesting-depth-of-the-parentheses/">1614. 括号的最大嵌套深度</a> #字符串 #for</h1><p>如果字符串满足以下条件之一，则可以称之为 <strong>有效括号字符串**</strong>（valid parentheses string<strong>，可以简写为 </strong>VPS**）：</p><ul><li>字符串是一个空字符串 <code>&quot;&quot;</code>，或者是一个不为 <code>&quot;(&quot;</code> 或 <code>&quot;)&quot;</code> 的单字符。</li><li>字符串可以写为 <code>AB</code>（<code>A</code> 与 <code>B</code> 字符串连接），其中 <code>A</code> 和 <code>B</code> 都是 <strong>有效括号字符串</strong> 。</li><li>字符串可以写为 <code>(A)</code>，其中 <code>A</code> 是一个 <strong>有效括号字符串</strong> 。</li></ul><p>类似地，可以定义任何有效括号字符串 <code>S</code> 的 <strong>嵌套深度</strong> <code>depth(S)</code>：</p><ul><li><code>depth(&quot;&quot;) = 0</code></li><li><code>depth(C) = 0</code>，其中 <code>C</code> 是单个字符的字符串，且该字符不是 <code>&quot;(&quot;</code> 或者 <code>&quot;)&quot;</code></li><li><code>depth(A + B) = max(depth(A), depth(B))</code>，其中 <code>A</code> 和 <code>B</code> 都是 <strong>有效括号字符串</strong></li><li><code>depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A)</code>，其中 <code>A</code> 是一个 <strong>有效括号字符串</strong></li></ul><p>例如：<code>&quot;&quot;</code>、<code>&quot;()()&quot;</code>、<code>&quot;()(()())&quot;</code> 都是 <strong>有效括号字符串</strong>（嵌套深度分别为 0、1、2），而 <code>&quot;)(&quot;</code> 、<code>&quot;(()&quot;</code> 都不是 <strong>有效括号字符串</strong> 。</p><p>给你一个 <strong>有效括号字符串</strong> <code>s</code>，返回该字符串的<code>s</code> <strong>嵌套深度</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;(1+(2*3)+((8)&#x2F;4))+1&quot;<br>输出：3<br>解释：数字 8 在嵌套的 3 层括号中。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;(1)+((2))+(((3)))&quot;<br>输出：3<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;1+(2*3)&#x2F;(2-1)&quot;<br>输出：1<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;1&quot;<br>输出：0<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 100</code></li><li><code>s</code> 由数字 <code>0-9</code> 和字符 <code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;*&#39;</code>、<code>&#39;/&#39;</code>、<code>&#39;(&#39;</code>、<code>&#39;)&#39;</code> 组成</li><li>题目数据保证括号表达式 <code>s</code> 是 <strong>有效的括号表达式</strong></li></ul><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(ans <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    dept := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _,ch := <span class="hljs-keyword">range</span> s &#123;<br>        <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;(&#x27;</span> &#123;<br>            dept++;<br>            <span class="hljs-keyword">if</span> dept &gt;= ans &#123;<br>                ans = dept<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;)&#x27;</span> &#123;<br>            dept--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="71-简化路径-字符串切割-栈"><a href="#71-简化路径-字符串切割-栈" class="headerlink" title="71. 简化路径 #字符串切割 #栈"></a><a href="https://leetcode-cn.com/problems/simplify-path/">71. 简化路径</a> #字符串切割 #栈</h1><p>给你一个字符串 <code>path</code> ，表示指向某一文件或目录的 Unix 风格 <strong>绝对路径</strong> （以 <code>&#39;/&#39;</code> 开头），请你将其转化为更加简洁的规范路径。</p><p>在 Unix 风格的文件系统中，一个点（<code>.</code>）表示当前目录本身；此外，两个点 （<code>..</code>） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，<code>&#39;//&#39;</code>）都被视为单个斜杠 <code>&#39;/&#39;</code> 。 对于此问题，任何其他格式的点（例如，<code>&#39;...&#39;</code>）均被视为文件/目录名称。</p><p>请注意，返回的 <strong>规范路径</strong> 必须遵循下述格式：</p><ul><li>始终以斜杠 <code>&#39;/&#39;</code> 开头。</li><li>两个目录名之间必须只有一个斜杠 <code>&#39;/&#39;</code> 。</li><li>最后一个目录名（如果存在）<strong>不能</strong> 以 <code>&#39;/&#39;</code> 结尾。</li><li>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 <code>&#39;.&#39;</code> 或 <code>&#39;..&#39;</code>）。</li></ul><p>返回简化后得到的 <strong>规范路径</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：path &#x3D; &quot;&#x2F;home&#x2F;&quot;<br>输出：&quot;&#x2F;home&quot;<br>解释：注意，最后一个目录名后面没有斜杠。 <br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：path &#x3D; &quot;&#x2F;..&#x2F;&quot;<br>输出：&quot;&#x2F;&quot;<br>解释：从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：path &#x3D; &quot;&#x2F;home&#x2F;&#x2F;foo&#x2F;&quot;<br>输出：&quot;&#x2F;home&#x2F;foo&quot;<br>解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：path &#x3D; &quot;&#x2F;a&#x2F;.&#x2F;b&#x2F;..&#x2F;..&#x2F;c&#x2F;&quot;<br>输出：&quot;&#x2F;c&quot;<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= path.length &lt;= 3000</code></li><li><code>path</code> 由英文字母，数字，<code>&#39;.&#39;</code>，<code>&#39;/&#39;</code> 或 <code>&#39;_&#39;</code> 组成。</li><li><code>path</code> 是一个有效的 Unix 风格绝对路径。</li></ul><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">simplifyPath</span><span class="hljs-params">(path <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;<br>    stack := []<span class="hljs-keyword">string</span>&#123;&#125;<br>    <span class="hljs-keyword">for</span> _,name := <span class="hljs-keyword">range</span> strings.Split(path, <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>        <span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;..&quot;</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(stack) &gt; <span class="hljs-number">0</span> &#123;<br>                stack = stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]   <br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> name != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; name != <span class="hljs-string">&quot;.&quot;</span> &#123;<br>            stack = <span class="hljs-built_in">append</span>(stack, name)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/&quot;</span> + strings.Join(stack,<span class="hljs-string">&quot;/&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1576-替换所有的问号-字符串"><a href="#1576-替换所有的问号-字符串" class="headerlink" title="1576. 替换所有的问号 #字符串"></a><a href="https://leetcode-cn.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/">1576. 替换所有的问号</a> #字符串</h1><p>给你一个仅包含小写英文字母和 <code>&#39;?&#39;</code> 字符的字符串 <code>s</code>，请你将所有的 <code>&#39;?&#39;</code> 转换为若干小写字母，使最终的字符串不包含任何 <strong>连续重复</strong> 的字符。</p><p>注意：你 <strong>不能</strong> 修改非 <code>&#39;?&#39;</code> 字符。</p><p>题目测试用例保证 <strong>除</strong> <code>&#39;?&#39;</code> 字符 <strong>之外</strong>，不存在连续重复的字符。</p><p>在完成所有转换（可能无需转换）后返回最终的字符串。如果有多个解决方案，请返回其中任何一个。可以证明，在给定的约束条件下，答案总是存在的。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;?zs&quot;<br>输出：&quot;azs&quot;<br>解释：该示例共有 25 种解决方案，从 &quot;azs&quot; 到 &quot;yzs&quot; 都是符合题目要求的。只有 &quot;z&quot; 是无效的修改，因为字符串 &quot;zzs&quot; 中有连续重复的两个 &#39;z&#39; 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;ubv?w&quot;<br>输出：&quot;ubvaw&quot;<br>解释：该示例共有 24 种解决方案，只有替换成 &quot;v&quot; 和 &quot;w&quot; 不符合题目要求。因为 &quot;ubvvw&quot; 和 &quot;ubvww&quot; 都包含连续重复的字符。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;j?qg??b&quot;<br>输出：&quot;jaqgacb&quot;<br></code></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：s &#x3D; &quot;??yw?ipkj?&quot;<br>输出：&quot;acywaipkja&quot;<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><p><code>1 &lt;= s.length &lt;= 100</code></p></li><li><p><code>s</code> 仅包含小写英文字母和 <code>&#39;?&#39;</code> 字符</p></li></ul><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">modifyString</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">string</span></span> &#123;<br>    res := []<span class="hljs-keyword">byte</span>(s)<br>    n := <span class="hljs-built_in">len</span>(res)<br>    <span class="hljs-keyword">for</span> i,ch := <span class="hljs-keyword">range</span> res &#123;<br>        <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;?&#x27;</span> &#123;<br>            <span class="hljs-keyword">for</span> b := <span class="hljs-keyword">byte</span>(<span class="hljs-string">&#x27;a&#x27;</span>); b &lt;= <span class="hljs-string">&#x27;c&#x27;</span>; b++ &#123;<br>                <span class="hljs-keyword">if</span> !(i &gt; <span class="hljs-number">0</span> &amp;&amp; res[i<span class="hljs-number">-1</span>] == b || i &lt; n - <span class="hljs-number">1</span> &amp;&amp; res[i+<span class="hljs-number">1</span>] == b) &#123;<br>                    res[i] = b<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">string</span>(res)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1629-按键持续时间最长的键-数组"><a href="#1629-按键持续时间最长的键-数组" class="headerlink" title="1629. 按键持续时间最长的键 #数组"></a><a href="https://leetcode-cn.com/problems/slowest-key/">1629. 按键持续时间最长的键</a> #数组</h1><p>LeetCode 设计了一款新式键盘，正在测试其可用性。测试人员将会点击一系列键（总计 <code>n</code> 个），每次一个。</p><p>给你一个长度为 <code>n</code> 的字符串 <code>keysPressed</code> ，其中 <code>keysPressed[i]</code> 表示测试序列中第 <code>i</code> 个被按下的键。<code>releaseTimes</code> 是一个升序排列的列表，其中 <code>releaseTimes[i]</code> 表示松开第 <code>i</code> 个键的时间。字符串和数组的 <strong>下标都从 0 开始</strong> 。第 <code>0</code> 个键在时间为 <code>0</code> 时被按下，接下来每个键都 <strong>恰好</strong> 在前一个键松开时被按下。</p><p>测试人员想要找出按键 <strong>持续时间最长</strong> 的键。第 <code>i</code>次按键的持续时间为 <code>releaseTimes[i] - releaseTimes[i - 1]</code> ，第 <code>0</code> 次按键的持续时间为 <code>releaseTimes[0]</code> 。</p><p>注意，测试期间，同一个键可以在不同时刻被多次按下，而每次的持续时间都可能不同。</p><p>请返回按键 <strong>持续时间最长</strong> 的键，如果有多个这样的键，则返回 <strong>按字母顺序排列最大</strong> 的那个键。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：releaseTimes &#x3D; [9,29,49,50], keysPressed &#x3D; &quot;cbcd&quot;<br>输出：&quot;c&quot;<br>解释：按键顺序和持续时间如下：<br>按下 &#39;c&#39; ，持续时间 9（时间 0 按下，时间 9 松开）<br>按下 &#39;b&#39; ，持续时间 29 - 9 &#x3D; 20（松开上一个键的时间 9 按下，时间 29 松开）<br>按下 &#39;c&#39; ，持续时间 49 - 29 &#x3D; 20（松开上一个键的时间 29 按下，时间 49 松开）<br>按下 &#39;d&#39; ，持续时间 50 - 49 &#x3D; 1（松开上一个键的时间 49 按下，时间 50 松开）<br>按键持续时间最长的键是 &#39;b&#39; 和 &#39;c&#39;（第二次按下时），持续时间都是 20<br>&#39;c&#39; 按字母顺序排列比 &#39;b&#39; 大，所以答案是 &#39;c&#39;<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：releaseTimes &#x3D; [12,23,36,46,62], keysPressed &#x3D; &quot;spuda&quot;<br>输出：&quot;a&quot;<br>解释：按键顺序和持续时间如下：<br>按下 &#39;s&#39; ，持续时间 12<br>按下 &#39;p&#39; ，持续时间 23 - 12 &#x3D; 11<br>按下 &#39;u&#39; ，持续时间 36 - 23 &#x3D; 13<br>按下 &#39;d&#39; ，持续时间 46 - 36 &#x3D; 10<br>按下 &#39;a&#39; ，持续时间 62 - 46 &#x3D; 16<br>按键持续时间最长的键是 &#39;a&#39; ，持续时间 16<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>releaseTimes.length == n</code></li><li><code>keysPressed.length == n</code></li><li><code>2 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= releaseTimes[i] &lt;= 10&lt;sup&gt;9&lt;/sup&gt;</code></li><li><code>releaseTimes[i] &lt; releaseTimes[i+1]</code></li><li><code>keysPressed</code> 仅由小写英文字母组成</li></ul><h2 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h2><p>Language: <strong>go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">slowestKey</span><span class="hljs-params">(releaseTimes []<span class="hljs-keyword">int</span>, keysPressed <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">byte</span></span> &#123;<br>    n := <span class="hljs-built_in">len</span>(releaseTimes)<br>    <span class="hljs-keyword">var</span> ans <span class="hljs-keyword">byte</span> = keysPressed[<span class="hljs-number">0</span>]<br>    maxTime := releaseTimes[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>); i &lt; n; i++ &#123;<br>        key := keysPressed[i]<br>        time := releaseTimes[i] - releaseTimes[i<span class="hljs-number">-1</span>]<br><br>        <span class="hljs-keyword">if</span>(time &gt; maxTime || (time == maxTime &amp;&amp; key &gt; ans)) &#123;<br>            ans = key<br>            maxTime = time<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="206-反转链表-链表"><a href="#206-反转链表-链表" class="headerlink" title="206. 反转链表 #链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a> #链表</h1><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; [1,2,3,4,5]<br>输出：[5,4,3,2,1]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; [1,2]<br>输出：[2,1]<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：head &#x3D; []<br>输出：[]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p><h2 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * type ListNode struct &#123;</span><br><span class="hljs-comment"> *     Val int</span><br><span class="hljs-comment"> *     Next *ListNode</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(head *ListNode)</span> *<span class="hljs-title">ListNode</span></span> &#123;<br>    <span class="hljs-keyword">var</span> prev * ListNode<br>    curr := head<br>    <span class="hljs-keyword">for</span> curr != <span class="hljs-literal">nil</span> &#123;<br>        next := curr.Next<br><br>        curr.Next = prev<br>        prev = curr<br><br>        curr = next<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="121-买卖股票的最佳时机-数组-dp"><a href="#121-买卖股票的最佳时机-数组-dp" class="headerlink" title="121. 买卖股票的最佳时机 #数组 #dp"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a> #数组 #dp</h1><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：[7,1,5,3,6,4]<br>输出：5<br>解释：在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出，最大利润 &#x3D; 6-1 &#x3D; 5 。<br>     注意利润不能是 7-1 &#x3D; 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：prices &#x3D; [7,6,4,3,1]<br>输出：0<br>解释：在这种情况下, 没有交易完成, 所以最大利润为 0。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10&lt;sup&gt;5&lt;/sup&gt;</code></li><li><code>0 &lt;= prices[i] &lt;= 10&lt;sup&gt;4&lt;/sup&gt;</code></li></ul><h2 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(prices []<span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(max <span class="hljs-keyword">int</span>)</span></span> &#123;<br>    min := prices[<span class="hljs-number">0</span>]<br>    max = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _,price := <span class="hljs-keyword">range</span> prices &#123;<br>        <span class="hljs-keyword">if</span> price &lt; min &#123;<br>            min = price<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> max &gt; price - min &#123;<br>                <span class="hljs-keyword">continue</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                max = price - min<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="剑指-Offer-03-数组中重复的数字-数组-坐标交换"><a href="#剑指-Offer-03-数组中重复的数字-数组-坐标交换" class="headerlink" title="剑指 Offer 03. 数组中重复的数字 #数组 #坐标交换"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a> #数组 #坐标交换</h1><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">输入：<br>[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 <br></code></pre></td></tr></table></figure><p><strong>限制：</strong></p><p><code>2 &lt;= n &lt;= 100000</code></p><h2 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h2><p>坐标交换：通俗讲就是每个人都有一个自己位置，坐标交换就是先把每个人都放到自己的位置上，当发现自己的位置被人占了以后，就说明出现了重复元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plain">func findRepeatNumber(nums []int) int &#123;<br>    i :&#x3D; 0<br>    for i &lt; len(nums) &#123;<br>        if nums[i] &#x3D;&#x3D; i &#123;<br>            i++<br>            continue<br>        &#125;<br><br>        if nums[nums[i]] &#x3D;&#x3D; nums[i] &#123;<br>            return nums[i]<br>        &#125;<br><br>        nums[nums[i]], nums[i] &#x3D; nums[i], nums[nums[i]]<br>    &#125;<br>    return -1<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Go刷题笔记_Init_Come on!!!</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Go" scheme="https://www.mingsrc.work/categories/Go/"/>
    
    <category term="刷题笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.mingsrc.work/tags/Go/"/>
    
    <category term="LeetCode" scheme="https://www.mingsrc.work/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>gcc编译可执行文件的各个过程</title>
    <link href="https://www.mingsrc.work/posts/d710f2d"/>
    <id>https://www.mingsrc.work/posts/d710f2d</id>
    <published>2021-12-26T07:27:09.590Z</published>
    <updated>2022-01-08T15:26:51.003Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h1><ol><li>【预处理阶段】：对源代码文件中文件包含关系（头文件）、预编译语句（宏定义）进行分析和替换，生成预编译文件🔻。</li><li>【编译阶段】：将经过预处理后的预编译文件转换成特定汇编代码，生成汇编文件🔻。==根据当前源代码编译成二进制目标文件（即.obj文件）==</li><li>【汇编阶段】：将编译阶段生成的汇编文件转化成机器码，生成可重定位目标文件🔻。</li><li>【链接阶段】：将多个目标文件及所需要的库连接成最终的可执行目标文件。==将生成的.obj文件与库文件.lib等文件链接，生成可执行文件（.exe文件）。==</li></ol><h1 id="gcc的编译过程"><a href="#gcc的编译过程" class="headerlink" title="gcc的编译过程"></a>gcc的编译过程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> .i 中间文件，基本不会用到</span><br>gcc -E main.c -o main.i<br><span class="hljs-meta">#</span><span class="bash"> .s 汇编语言文件</span><br>gcc -S main.i -o main.s<br><span class="hljs-meta">#</span><span class="bash"> .o 汇编文件</span><br><span class="hljs-meta">#</span><span class="bash"> -c 只编译不链接，生成.obj文件也就是上述对应的汇编文件</span><br>gcc -c main.s -o main.o<br><span class="hljs-meta">#</span><span class="bash"> 生成可执行文件</span><br>gcc main.o -o main<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">gcc命令行整理</summary>
    
    
    
    <category term="Linux" scheme="https://www.mingsrc.work/categories/Linux/"/>
    
    
    <category term="gcc" scheme="https://www.mingsrc.work/tags/gcc/"/>
    
    <category term="linux" scheme="https://www.mingsrc.work/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>explicit关键字</title>
    <link href="https://www.mingsrc.work/posts/58412853"/>
    <id>https://www.mingsrc.work/posts/58412853</id>
    <published>2021-12-12T09:08:36.576Z</published>
    <updated>2021-12-12T09:59:05.994Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>如下代码收拾</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weight</span> &#123;</span><br><span class="hljs-built_in">Weight</span>(<span class="hljs-keyword">int</span> wh, <span class="hljs-keyword">double</span> lbs);<br>    <span class="hljs-built_in">Weight</span>(<span class="hljs-keyword">double</span> lbs);<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> m_wh;<br>    <span class="hljs-keyword">double</span> m_lbs;<br>&#125;;<br><br>Weight::<span class="hljs-built_in">Weight</span>(<span class="hljs-keyword">int</span> wh, <span class="hljs-keyword">double</span> lbs)<br>&#123;<br>    m_wh = wh;<br>    m_lbs = lbs;<br>&#125;<br><br>Weight::<span class="hljs-built_in">Weight</span>(<span class="hljs-keyword">double</span> lbs)<br>&#123;<br>    m_wh = lbs / <span class="hljs-number">2</span>;<br>    m_lbs = lbs;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Weight</code>类并非真的需要声明构造函数，因为自动生成的默认构造函数就很好。但是<code>Weight</code>类提供了两个构造函数。一个是<code>int,double</code>类型的，一个是<code>double</code>类型的，每个构造函数都给私有成员全部赋了值。因为创建<code>Weight</code>对象时，将会自动设置这两种重量表示。</p><p>因为<code>Weight</code>对象表示一个重量，因为可以提供一种整数值或者浮点值转换为<code>Weight</code>对象的方法。即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Weight wh;<br>wh = <span class="hljs-number">19.6</span>;<br></code></pre></td></tr></table></figure><p>程序将使用构造函数<code>Weight(double)</code>来创建一个临时的<code>Weight</code>对象。随后采用逐成员赋值方式将该临时对象的内容复制到<code>wh</code>中。这一过程称为隐式转换，因为它是自动进行的，而不需要显式强制类型转换。</p><p>但情况是，只有接受一个参数的构造函数才能作为转换函数。如<code>Weight(int,double)</code>就不可以。</p><p>然而，如果第二个参数提供了==默认值==，它便可以用于转换<code>int</code>。</p><p><code>Weight(int, double lbs = 0);</code></p><p>在这个时候，便会导致意外的类型转换。因此，C++新增了关键字<code>explicit</code>，用于关闭这种特性。也就是在声明构造函数时加上<code>explicit</code>关键字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weight</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Weight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> wh, <span class="hljs-keyword">double</span> lbs)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">Weight</span><span class="hljs-params">(<span class="hljs-keyword">double</span> lbs)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> m_wh;<br>    <span class="hljs-keyword">double</span> m_lbs;<br>&#125;;<br></code></pre></td></tr></table></figure><p>添加<code>explicit</code>关键字之后，便可以关闭上述中的隐式转换，但仍然允许显式转换，即显式强制类型转换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Weight weight; <span class="hljs-comment">// create a Stonewt object</span><br>weight = <span class="hljs-number">19.6</span>;<span class="hljs-comment">// not valid if Stonevt(double) is declared as expliclt</span><br>weight = <span class="hljs-built_in">Weight</span>(<span class="hljs-number">19.61</span>);<span class="hljs-comment">// ok,an explicit corversion</span><br>weight = (Weight)<span class="hljs-number">19.6</span>;<span class="hljs-comment">//ok,old form for explicit typecat</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">explicit关键字说明</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="C++" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C/"/>
    
    
    <category term="C++" scheme="https://www.mingsrc.work/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>QPROPETRY属性</title>
    <link href="https://www.mingsrc.work/posts/8aa93b6e"/>
    <id>https://www.mingsrc.work/posts/8aa93b6e</id>
    <published>2021-12-12T08:10:57.058Z</published>
    <updated>2021-12-12T08:14:42.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>Q_PROPERTY 是 Qt 中的一个宏，是用类中声明属性。如果需要使用该宏，必须要继承 QObject 类或者其子类。QPushButton 则是 QObject 的间接子类，所以继承 QPushButton 类后同样可以使用 Q_PROPERTY 宏。</p><p>Q_PROPERTY 属性自带了一些属性，同样程序可以自定义。本实验中只讲解 Q_PROPERTY 自带的属性。</p><p>在自定义导航按钮的程序中同样使用了 Q_PROPERTY，且程序中只使用了 Q_PROPERTY 的 READ 属性和 WRITE 属性。</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>Q_PROPERTY 自带属性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-built_in">Q_PROPERTY</span>(type name<br>           READ getFunction<br>           [WRITE setFunction]<br>           [RESET resetFunction]<br>           [NOTIFY notifySignal]<br>           [DESIGNABLE <span class="hljs-keyword">bool</span>]<br>           [SCRIPTABLE <span class="hljs-keyword">bool</span>]<br>           [STORED <span class="hljs-keyword">bool</span>]<br>           [USER <span class="hljs-keyword">bool</span>]<br>           [CONSTANT]<br>           [FINAL])<br></code></pre></td></tr></table></figure><ul><li>在上面的代码中，方括号 [] 中的内容属性可选。</li><li>必选 <code>READ</code> 属性：用来读取属性值，因此使用 const 限制，返回值类型必须为属性类型或者属性类型的引用或者指针。</li><li>可选 <code>WRITE</code> 属性：用来设置属性值，返回值必须为 void 类型，需要一个参数。</li><li>可选 <code>RESET</code> 属性：能够将值设置为默认状态，返回值为 void 类型且不带参数。</li><li>可选 <code>NOTIFY</code> 属性：提供一个信号，当值发送改变是该信号会自动被触发。</li><li>可选 <code>DESIGNABLE</code> 属性：是否在界面设计器的属性编辑器中出现。大多数属性是可见的，除了可以为变量传入 true 或 false 还可以执行一个 bool 行的成员函数。</li><li>可选 <code>SCRIPTABLE</code> 属性：是够可以被脚本引擎操作（默认为 true）。可以赋予 true 或者 false 或 bool 类型的函数。</li><li>可选 <code>STORED</code> 属性：是否被认为是独立存在还是依赖于其他的值而存在，也可以表明是否在保存对象状态时保存此属性的值。大多数属性都是需要保存的，但也有例外，例如 <code>QWidget::minimumWidth()</code> 就是不被保存的，因为它的值是从另一个属性 <code>QWidget::minimumSize()</code> 得来的。</li><li>可选 <code>USER</code> 属性：是否被设计为面向用户的或用户可修改的类属性。通常，每个类只有一个 USER 属性。例如 <code>QAbstractButton::checked</code> 是按钮类的用户可修改属性。注意 QItemDelegate 获取和设置 widget 的 USER 属性。</li><li>可选 <code>CONSTANT</code> 属性：表示属性的值是不变的。</li><li>可选 <code>FINAL</code> 属性：表示属性不能被派生类所重写。</li></ul>]]></content>
    
    
    <summary type="html">Q_PROPERT属性的说明</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Qt" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Qt/"/>
    
    
    <category term="Qt" scheme="https://www.mingsrc.work/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Windows Cmd命令整理</title>
    <link href="https://www.mingsrc.work/posts/4d62d9f3"/>
    <id>https://www.mingsrc.work/posts/4d62d9f3</id>
    <published>2021-11-25T11:58:36.862Z</published>
    <updated>2021-11-29T02:54:23.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Cmd高级用法整理"><a href="#Cmd高级用法整理" class="headerlink" title="Cmd高级用法整理"></a>Cmd高级用法整理</h1><h2 id="查看路由"><a href="#查看路由" class="headerlink" title="查看路由"></a>查看路由</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">route print<br></code></pre></td></tr></table></figure><h2 id="无限ping"><a href="#无限ping" class="headerlink" title="无限ping"></a>无限ping</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ping 192.168.1.1 /t<br></code></pre></td></tr></table></figure><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地5分钟关机</span><br>shutdown/s<br><br><span class="hljs-comment"># 本地定时关机</span><br>shutdown/s /t XXX（时间，按秒记）<br><br><span class="hljs-comment"># 网络关机</span><br>shutdown/s /m xxx.xxx.xxx.xxx（IP地址）<br><br><span class="hljs-comment"># 取消关机</span><br>shutdown/a<br></code></pre></td></tr></table></figure><h2 id="sfc命令"><a href="#sfc命令" class="headerlink" title="sfc命令"></a>sfc命令</h2><p>检查系统完整性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sfc /scannow<br></code></pre></td></tr></table></figure><h2 id="Talnet命令"><a href="#Talnet命令" class="headerlink" title="Talnet命令"></a>Talnet命令</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Talnet IP:端口号<br></code></pre></td></tr></table></figure><h2 id="vol"><a href="#vol" class="headerlink" title="vol"></a>vol</h2><p>检查硬盘分区</p>]]></content>
    
    
    <summary type="html">CMD高级用法整理</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SYSTEM" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/SYSTEM/"/>
    
    
    <category term="Windows" scheme="https://www.mingsrc.work/tags/Windows/"/>
    
    <category term="cmd" scheme="https://www.mingsrc.work/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>C++常识与通识</title>
    <link href="https://www.mingsrc.work/posts/9d0d833e"/>
    <id>https://www.mingsrc.work/posts/9d0d833e</id>
    <published>2021-11-25T03:45:29.792Z</published>
    <updated>2021-11-25T07:20:35.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><h3 id="将引用作为返回值的通常原因是避免创建副本以提高效率，包括其他的函数传参亦是如此"><a href="#将引用作为返回值的通常原因是避免创建副本以提高效率，包括其他的函数传参亦是如此" class="headerlink" title="将引用作为返回值的通常原因是避免创建副本以提高效率，包括其他的函数传参亦是如此"></a>将引用作为返回值的通常原因是避免创建副本以提高效率，包括其他的函数传参亦是如此</h3></li><li><h3 id="std-nothrow可以消除抛出异常"><a href="#std-nothrow可以消除抛出异常" class="headerlink" title="std::nothrow可以消除抛出异常"></a><code>std::nothrow</code>可以消除抛出异常</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;new&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100000000ul</span>];   <span class="hljs-comment">// throwing overload</span><br>        &#125;<br>    &#125; <span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (<span class="hljs-keyword">const</span> std::bad_alloc&amp; e) &#123;<br>        std::cout &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">int</span>* p = <span class="hljs-built_in"><span class="hljs-keyword">new</span></span>(std::nothrow) <span class="hljs-keyword">int</span>[<span class="hljs-number">100000000ul</span>]; <span class="hljs-comment">// non-throwing overload</span><br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">nullptr</span>) &#123;<br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Allocation returned nullptr\n&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>输出：<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">std::bad_alloc<br>Allocation returned nullptr<br></code></pre></td></tr></table></figure></p><ol><li><h3 id="枚举用法——类静态成员"><a href="#枚举用法——类静态成员" class="headerlink" title="枚举用法——类静态成员"></a>枚举用法——类静态成员</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">year</span> &#123;</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span>MONTH = <span class="hljs-number">12</span>&#125;; <span class="hljs-comment">// 可以当做一个 static const</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>具体使用场景自己探索哦~</p></li><li><h3 id="可以通过terminate-（默认行为）、abort-、exit-来终止程序"><a href="#可以通过terminate-（默认行为）、abort-、exit-来终止程序" class="headerlink" title="可以通过terminate()（默认行为）、abort()、exit()来终止程序"></a>可以通过<code>terminate()（默认行为）、abort()、exit()</code>来终止程序</h3></li><li><h3 id="虽然算法、数据结构是基础，但是设计模式也一定要看"><a href="#虽然算法、数据结构是基础，但是设计模式也一定要看" class="headerlink" title="虽然算法、数据结构是基础，但是设计模式也一定要看"></a>虽然算法、数据结构是基础，但是设计模式也一定要看</h3></li><li><h3 id><a href="#" class="headerlink" title=" "></a> </h3></li></ol>]]></content>
    
    
    <summary type="html">整理自个人学习过程中的所见所得</summary>
    
    
    
    <category term="C++笔记" scheme="https://www.mingsrc.work/categories/C-%E7%AC%94%E8%AE%B0/"/>
    
    <category term="C++_Primer_Plus" scheme="https://www.mingsrc.work/categories/C-%E7%AC%94%E8%AE%B0/C-Primer-Plus/"/>
    
    
    <category term="C++" scheme="https://www.mingsrc.work/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>windows Terminal 打开 Git Bash</title>
    <link href="https://www.mingsrc.work/posts/352e7838"/>
    <id>https://www.mingsrc.work/posts/352e7838</id>
    <published>2021-11-21T10:41:42.564Z</published>
    <updated>2021-11-21T13:36:49.259Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="添加Bash到环境变量中"><a href="#添加Bash到环境变量中" class="headerlink" title="添加Bash到环境变量中"></a>添加Bash到环境变量中</h1><h2 id="1-添加git到环境变量"><a href="#1-添加git到环境变量" class="headerlink" title="1. 添加git到环境变量"></a>1. 添加<code>git</code>到环境变量</h2><p>这一步的目的是方便使用系统命令调用<code>git bash</code>。</p><h2 id="①-操作"><a href="#①-操作" class="headerlink" title="① 操作"></a>① 操作</h2><p>右击<code>我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;Path-&gt;添加Git/bin路径即可</code></p><p><img src="../../../images/Windows%20Terminal%20&amp;%20GitBase/1.png" alt="Git目录"></p><p>如图所示：找到<code>bin</code>目录后，将其添加到path目录</p><h2 id="②-验证"><a href="#②-验证" class="headerlink" title="② 验证"></a>② 验证</h2><p><kbd>Win</kbd><code>+</code><kbd>R</kbd>输入<code>Bash</code>能打开Git则说明添加到环境变量成功。</p><p><img src="../../../images/Windows%20Terminal%20&amp;%20GitBase/3.png" alt="Win+R-&gt;bash"></p><h1 id="2-修改Windows-Terminal配置"><a href="#2-修改Windows-Terminal配置" class="headerlink" title="2. 修改Windows Terminal配置"></a>2. 修改Windows Terminal配置</h1><p>打开Windows Terminal进入到设置界面，然后点击左下角<code>打开Json文件</code>，在Json文件中找到<code>Profile</code>对象，然后在其子对象list中添加下述代码即可。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;acrylicOpacity&quot;</span> : <span class="hljs-number">0.75</span>,<br>    <span class="hljs-attr">&quot;closeOnExit&quot;</span> : <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;colorScheme&quot;</span> : <span class="hljs-string">&quot;Campbell&quot;</span>,<br>    <span class="hljs-attr">&quot;commandline&quot;</span> : <span class="hljs-string">&quot;bash.exe&quot;</span>,<br>    <span class="hljs-attr">&quot;cursorColor&quot;</span> : <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>    <span class="hljs-attr">&quot;cursorShape&quot;</span> : <span class="hljs-string">&quot;bar&quot;</span>,<br>    <span class="hljs-attr">&quot;fontFace&quot;</span> : <span class="hljs-string">&quot;Consolas&quot;</span>,<br>    <span class="hljs-attr">&quot;fontSize&quot;</span> : <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">&quot;historySize&quot;</span> : <span class="hljs-number">9001</span>,<br>    <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;git-bash&quot;</span>,<br>    <span class="hljs-attr">&quot;padding&quot;</span> : <span class="hljs-string">&quot;0, 0, 0, 0&quot;</span>,<br>    <span class="hljs-attr">&quot;snapOnInput&quot;</span> : <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;startingDirectory&quot;</span> : <span class="hljs-string">&quot;%USERPROFILE%&quot;</span>,<br>    <span class="hljs-attr">&quot;useAcrylic&quot;</span> : <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>关于<code>Icon</code>，可以邮件下载下边这张图，下载后修改后缀名为<code>ico</code>,在上述代码中添加<code>Icon</code>字段即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&quot;icon&quot;: &quot;图片路径\\git-for-windows.ico&quot;<br></code></pre></td></tr></table></figure><p><img src="../../../images/Windows%20Terminal%20&amp;%20GitBase/git-for-windows.png" alt="git-for-windows"></p><h1 id="补充-添加主题代码"><a href="#补充-添加主题代码" class="headerlink" title="补充 添加主题代码"></a>补充 添加主题代码</h1><p>直接复制替换Json配置文件中的<code>schemes</code>字段即可。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>Windows Terminal 主题相关配置</span></div>    <div class="hide-content"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><code class="hljs json">&quot;schemes&quot;: <br>[<br>    &#123;<br>        <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#0C0C0C&quot;</span>,<br>        <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#0C0C0C&quot;</span>,<br>        <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#0037DA&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#767676&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#3B78FF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#61D6D6&quot;</span>,<br>        <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#16C60C&quot;</span>,<br>        <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#B4009E&quot;</span>,<br>        <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#E74856&quot;</span>,<br>        <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#F2F2F2&quot;</span>,<br>        <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#F9F1A5&quot;</span>,<br>        <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#3A96DD&quot;</span>,<br>        <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#CCCCCC&quot;</span>,<br>        <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#13A10E&quot;</span>,<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Campbell&quot;</span>,<br>        <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#881798&quot;</span>,<br>        <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#C50F1F&quot;</span>,<br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#CCCCCC&quot;</span>,<br>        <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#C19C00&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#012456&quot;</span>,<br>        <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#0C0C0C&quot;</span>,<br>        <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#0037DA&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#767676&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#3B78FF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#61D6D6&quot;</span>,<br>        <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#16C60C&quot;</span>,<br>        <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#B4009E&quot;</span>,<br>        <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#E74856&quot;</span>,<br>        <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#F2F2F2&quot;</span>,<br>        <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#F9F1A5&quot;</span>,<br>        <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#3A96DD&quot;</span>,<br>        <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#CCCCCC&quot;</span>,<br>        <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#13A10E&quot;</span>,<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Campbell Powershell&quot;</span>,<br>        <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#881798&quot;</span>,<br>        <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#C50F1F&quot;</span>,<br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#CCCCCC&quot;</span>,<br>        <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#C19C00&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#282C34&quot;</span>,<br>        <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#282C34&quot;</span>,<br>        <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#61AFEF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#5A6374&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#61AFEF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#56B6C2&quot;</span>,<br>        <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#98C379&quot;</span>,<br>        <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#C678DD&quot;</span>,<br>        <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#E06C75&quot;</span>,<br>        <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#DCDFE4&quot;</span>,<br>        <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#E5C07B&quot;</span>,<br>        <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#56B6C2&quot;</span>,<br>        <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#DCDFE4&quot;</span>,<br>        <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#98C379&quot;</span>,<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;One Half Dark&quot;</span>,<br>        <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#C678DD&quot;</span>,<br>        <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#E06C75&quot;</span>,<br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#DCDFE4&quot;</span>,<br>        <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#E5C07B&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#FAFAFA&quot;</span>,<br>        <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#383A42&quot;</span>,<br>        <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#0184BC&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#4F525D&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#61AFEF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#56B5C1&quot;</span>,<br>        <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#98C379&quot;</span>,<br>        <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#C577DD&quot;</span>,<br>        <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#DF6C75&quot;</span>,<br>        <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#E4C07A&quot;</span>,<br>        <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#4F525D&quot;</span>,<br>        <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#0997B3&quot;</span>,<br>        <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#383A42&quot;</span>,<br>        <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#50A14F&quot;</span>,<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;One Half Light&quot;</span>,<br>        <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#A626A4&quot;</span>,<br>        <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#E45649&quot;</span>,<br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#FAFAFA&quot;</span>,<br>        <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#C18301&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#002B36&quot;</span>,<br>        <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#002B36&quot;</span>,<br>        <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#268BD2&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#073642&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#839496&quot;</span>,<br>        <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#93A1A1&quot;</span>,<br>        <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#586E75&quot;</span>,<br>        <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#6C71C4&quot;</span>,<br>        <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#CB4B16&quot;</span>,<br>        <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#FDF6E3&quot;</span>,<br>        <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#657B83&quot;</span>,<br>        <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#2AA198&quot;</span>,<br>        <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#839496&quot;</span>,<br>        <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#859900&quot;</span>,<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Solarized Dark&quot;</span>,<br>        <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#D33682&quot;</span>,<br>        <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#DC322F&quot;</span>,<br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#EEE8D5&quot;</span>,<br>        <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#B58900&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#FDF6E3&quot;</span>,<br>        <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#002B36&quot;</span>,<br>        <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#268BD2&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#073642&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#839496&quot;</span>,<br>        <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#93A1A1&quot;</span>,<br>        <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#586E75&quot;</span>,<br>        <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#6C71C4&quot;</span>,<br>        <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#CB4B16&quot;</span>,<br>        <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#FDF6E3&quot;</span>,<br>        <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#657B83&quot;</span>,<br>        <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#002B36&quot;</span>,<br>        <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#2AA198&quot;</span>,<br>        <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#657B83&quot;</span>,<br>        <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#859900&quot;</span>,<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Solarized Light&quot;</span>,<br>        <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#D33682&quot;</span>,<br>        <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#DC322F&quot;</span>,<br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#EEE8D5&quot;</span>,<br>        <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#B58900&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#000000&quot;</span>,<br>        <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#000000&quot;</span>,<br>        <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#3465A4&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#555753&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#729FCF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#34E2E2&quot;</span>,<br>        <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#8AE234&quot;</span>,<br>        <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#AD7FA8&quot;</span>,<br>        <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#EF2929&quot;</span>,<br>        <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#EEEEEC&quot;</span>,<br>        <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#FCE94F&quot;</span>,<br>        <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#06989A&quot;</span>,<br>        <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#D3D7CF&quot;</span>,<br>        <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#4E9A06&quot;</span>,<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tango Dark&quot;</span>,<br>        <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#75507B&quot;</span>,<br>        <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#CC0000&quot;</span>,<br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#D3D7CF&quot;</span>,<br>        <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#C4A000&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#000000&quot;</span>,<br>        <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#3465A4&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#555753&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#729FCF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#34E2E2&quot;</span>,<br>        <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#8AE234&quot;</span>,<br>        <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#AD7FA8&quot;</span>,<br>        <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#EF2929&quot;</span>,<br>        <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#EEEEEC&quot;</span>,<br>        <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#FCE94F&quot;</span>,<br>        <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#000000&quot;</span>,<br>        <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#06989A&quot;</span>,<br>        <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#555753&quot;</span>,<br>        <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#4E9A06&quot;</span>,<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tango Light&quot;</span>,<br>        <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#75507B&quot;</span>,<br>        <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#CC0000&quot;</span>,<br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#D3D7CF&quot;</span>,<br>        <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#C4A000&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#000000&quot;</span>,<br>        <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#000000&quot;</span>,<br>        <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#000080&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#808080&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#0000FF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#00FFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#00FF00&quot;</span>,<br>        <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#FF00FF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#FF0000&quot;</span>,<br>        <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#FFFF00&quot;</span>,<br>        <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#008080&quot;</span>,<br>        <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#C0C0C0&quot;</span>,<br>        <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#008000&quot;</span>,<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Vintage&quot;</span>,<br>        <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#800080&quot;</span>,<br>        <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#800000&quot;</span>,<br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#C0C0C0&quot;</span>,<br>        <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#808000&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;background&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;black&quot;</span>: <span class="hljs-string">&quot;#073642&quot;</span>,<br>        <span class="hljs-attr">&quot;blue&quot;</span>: <span class="hljs-string">&quot;#268BD2&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlack&quot;</span>: <span class="hljs-string">&quot;#002B36&quot;</span>,<br>        <span class="hljs-attr">&quot;brightBlue&quot;</span>: <span class="hljs-string">&quot;#949800&quot;</span>,<br>        <span class="hljs-attr">&quot;brightCyan&quot;</span>: <span class="hljs-string">&quot;#93A1A1&quot;</span>,<br>        <span class="hljs-attr">&quot;brightGreen&quot;</span>: <span class="hljs-string">&quot;#00BC00&quot;</span>,<br>        <span class="hljs-attr">&quot;brightPurple&quot;</span>: <span class="hljs-string">&quot;#6C71C4&quot;</span>,<br>        <span class="hljs-attr">&quot;brightRed&quot;</span>: <span class="hljs-string">&quot;#CB4B16&quot;</span>,<br>        <span class="hljs-attr">&quot;brightWhite&quot;</span>: <span class="hljs-string">&quot;#FDF6E3&quot;</span>,<br>        <span class="hljs-attr">&quot;brightYellow&quot;</span>: <span class="hljs-string">&quot;#657B83&quot;</span>,<br>        <span class="hljs-attr">&quot;cursorColor&quot;</span>: <span class="hljs-string">&quot;#FFFFFF&quot;</span>,<br>        <span class="hljs-attr">&quot;cyan&quot;</span>: <span class="hljs-string">&quot;#2AA198&quot;</span>,<br>        <span class="hljs-attr">&quot;foreground&quot;</span>: <span class="hljs-string">&quot;#000000&quot;</span>,<br>        <span class="hljs-attr">&quot;green&quot;</span>: <span class="hljs-string">&quot;#FFE79E&quot;</span>,<br>        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;lwz_solarized_light&quot;</span>,<br>        <span class="hljs-attr">&quot;purple&quot;</span>: <span class="hljs-string">&quot;#D33682&quot;</span>,<br>        <span class="hljs-attr">&quot;red&quot;</span>: <span class="hljs-string">&quot;#DC322F&quot;</span>,<br>        <span class="hljs-attr">&quot;selectionBackground&quot;</span>: <span class="hljs-string">&quot;#BFBFBF&quot;</span>,<br>        <span class="hljs-attr">&quot;white&quot;</span>: <span class="hljs-string">&quot;#EEE8D5&quot;</span>,<br>        <span class="hljs-attr">&quot;yellow&quot;</span>: <span class="hljs-string">&quot;#B58900&quot;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure></div></div>]]></content>
    
    
    <summary type="html">Windows Terminal 配置Git Bash | 颜色主题</summary>
    
    
    
    
    <category term="技巧" scheme="https://www.mingsrc.work/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="杂记" scheme="https://www.mingsrc.work/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="分享" scheme="https://www.mingsrc.work/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>前端样式整理</title>
    <link href="https://www.mingsrc.work/posts/3ec63883"/>
    <id>https://www.mingsrc.work/posts/3ec63883</id>
    <published>2021-11-10T04:02:30.854Z</published>
    <updated>2021-11-29T02:57:44.001Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="span-list"><a href="#span-list" class="headerlink" title="span list"></a>span list</h1>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html">1<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fas faa-ring animated-hover&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-bottom:3px solid green&quot;</span>&gt;</span>《半小时漫画中国哲学史》<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>2<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;font-size:20px;font:30px 书体坊兰亭体;color:blueviolent;word-spacing:30px;&quot;</span>&gt;</span>“ 既许一人以偏爱，愿尽余生之慷慨 ”<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>3<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;class: faa-bounce animated-hover;border-bottom: 5px solid #8F81EF;&quot;</span>&gt;</span>[data.json文件链接](https://pan.baidu.com/s/1omzU65YMpJr0jPPFItZ7SA )<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br> 4  <br><span class="hljs-tag">&lt;<span class="hljs-name">mark</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:royalBlue;border-bottom:lightblue 2px solid;color:white;font-family:consolas&quot;</span>&gt;</span>当使用重做日志文件来进行数据库恢复时，ORACLE将读取其中的重做记录(包括其中的修改向量)，并且将这些修改用于相关的块中。<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><br>5<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: PaleVioletRed;border-radius:10px;padding:1px 5px;color:white;font-weight:900&quot;</span>&gt;</span>存储结构管理主要就是通过对表空间的管理来实现的<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>6<br><span class="hljs-tag">&lt;<span class="hljs-name">mark</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:green;border-radius:10px;color:white&quot;</span>&gt;</span>效果如下：<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><br>7<br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">10px</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight:700;font-family:&#x27;华文彩云&#x27;;color:rgb(100,190,100)&quot;</span>&gt;</span>基本语言(一)<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>8<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-bottom: 2px dashed #000000&quot;</span>&gt;</span>代码段、数据段、BSS段、堆区、文件映射区以及栈区<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>9<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:black;font:conloas;color:white;&quot;</span>&gt;</span><br><span class="hljs-symbol">&amp;nbsp;</span>数组长度为：3<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-symbol">&amp;nbsp;</span>请按任意键继续. . .<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>10<br><span class="hljs-tag">&lt;<span class="hljs-name">mark</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;background:red;font-weight:600;border_radius:100px&quot;</span>&gt;</span>但效率更高<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><ol><li><span class="fas faa-ring animated-hover" style="border-bottom:3px solid green">《半小时漫画中国哲学史》</span></li></ol><hr><ol><li><span style="text-align:center;font-size:20px;font:30px 书体坊兰亭体;color:blueviolent;word-spacing:30px;">“ 既许一人以偏爱，愿尽余生之慷慨 ”</span></li></ol><hr><ol><li><span style="class: faa-bounce animated-hover;border-bottom: 5px solid #8F81EF;"><a href="https://pan.baidu.com/s/1omzU65YMpJr0jPPFItZ7SA">data.json文件链接</a></span></li></ol><hr><ol><li><mark style="background:royalBlue;border-bottom:lightblue 2px solid;color:white;font-family:consolas">当使用重做日志文件来进行数据库恢复时，ORACLE将读取其中的重做记录(包括其中的修改向量)，并且将这些修改用于相关的块中。</mark></li></ol><hr><ol><li><span style="background: PaleVioletRed;border-radius:10px;padding:1px 5px;color:white;font-weight:900">存储结构管理主要就是通过对表空间的管理来实现的</span></li></ol><hr><ol><li><mark style="background:green;border-radius:10px;color:white;padding: 5px">效果如下：</mark></li></ol><hr><ol><li><font size="10px" style="font-weight:700;font-family:'华文彩云';color:rgb(100,190,100)">基本语言(一)</font></li></ol><hr><ol><li><span style="border-bottom: 2px dashed #000000">代码段、数据段、BSS段、堆区、文件映射区以及栈区</span></li></ol><hr><ol><li><div style="background:black;font:conloas;color:white;">&nbsp; 数组长度为：3 <br>&nbsp; 请按任意键继续. . .</div></li><li><p><mark style="color:white;background:red;font-weight:600;border_radius:100px">但效率更高</mark></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="HTML" scheme="https://www.mingsrc.work/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>初识VUE</title>
    <link href="https://www.mingsrc.work/posts/f1706fda"/>
    <id>https://www.mingsrc.work/posts/f1706fda</id>
    <published>2021-11-10T03:56:44.621Z</published>
    <updated>2021-12-12T12:52:46.301Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>总想学点什么，又不知道学点什么的好，刚好一直也在美化博客，就学点前端的知识，总比不学的好。希望能把自己的学习经验和学习经历记录整理，也便于以后用的时候复习该方面的知识。</p></blockquote><p>VUE是国人尤雨溪开发的一款前端框架，初步了解之后，确实很神奇，但由于仅仅只是学习，缺乏项目经验，因此本篇文章只记录Vue的相关语法。</p><p>我自己也是参考B站视频教程学习：<a href="https://www.bilibili.com/video/BV12J411m7MG?p=1">黑马程序员vue前端基础教程-4个小时带你快速入门vue</a></p><hr><p>[toc]</p><hr><p>在使用之前，有必要去vue官网查看相关的简介和快速开始，以便于对vue整体有一个初步的了解。</p><p>要是用vue，首先得引入相关js，即：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其次，学习Vue可能需要不断地去创建html文件，因此，最好整一个模板文件，每次都复制模板文件即可，这里po一个通用的vue-html文件模板：</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>Vue文件模板</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_01_Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123; message &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                message: <span class="hljs-string">&#x27;Hello World!&#x27;</span></span><br>            &#125;<br>        &#125;);<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><h1 id="el挂载点"><a href="#el挂载点" class="headerlink" title="el挂载点"></a>el挂载点</h1><p>也是实现标签和js绑定的一个最基础的实现，大致语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br>            el: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data: &#123;<br>                message: <span class="hljs-string">&#x27;Hello World!&#x27;</span><br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p>这里的<code>#app</code>就是所说的挂载点，如上代码便是实现<code>id</code>为<code>app</code>的标签的挂载。有了上述js代码，还得添加专门的标签才能生效和使用，语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123; message &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上标签就基本实现了一个初步的vue程序。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>完整代码</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_01_Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123; message &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                message: <span class="hljs-string">&#x27;Hello World!&#x27;</span></span><br>            &#125;<br>        &#125;);<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>结果相关函数的一些高级用法</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Auraro<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://static.runoob.com/assets/vue/1.0.11/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>修改输入框的值，查看效果：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;* message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 字符串连接 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message + &#x27;官网地址：www.mingsrc.work&#x27; &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 字符串反转 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span> <br><span class="javascript">  <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">    el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>    data:&#123;<br><span class="javascript">      message: <span class="hljs-string">&quot;学习Vue&quot;</span>,</span><br>    &#125;<br>  &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure></div></div><p>上述代码就是Vue的最基础的入门实例了，关于Vue的其他用法则需要一步一步了解。</p><div class="note green icon modern"><i class="note-icon fas fa-bullhorn"></i><p>其实不难发现，<code>new</code>出来的<code>Vue</code>的内容就是<code>json</code>格式的串。</p><ul><li><p>el作为一个挂载点出现在Json对象中</p></li><li><p>data则保存数据</p></li><li><p>相应的还有<code>methods</code>方法用来实现函数、交互等。</p></li></ul></div><h1 id="本地应用"><a href="#本地应用" class="headerlink" title="本地应用"></a>本地应用</h1><p>什么是本地应用？通俗理解就是js基于dom来获取并操作页面元素的方法，在Vue中使用以<code>v-</code>开头的特殊语法来实现，如<code>v-text</code>、<code>v-html</code>、<code>v-on</code>、<code>v-show</code>、<code>v-if</code>、<code>v-on</code>等一系列vue指令。</p><div class="tabs" id="选项卡二(默认为2)"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-1">v-text</button></li><li class="tab active"><button type="button" data-href="#选项卡二(默认为2)-2">v-html</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-3">v-on</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-4">v-show</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-5">v-if</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-6">v-bind</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-7">v-for</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-8">v-on补充</button></li><li class="tab"><button type="button" data-href="#选项卡二(默认为2)-9">v-model</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="选项卡二(默认为2)-1"><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><p>就是把内容直接输出为内容，不进行渲染，以下为例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="handlebars"><span class="xml">               content: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.mingsrc.work&quot;</span>&gt;</span>Auraro<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;,</span></span><br>            &#125;<br>        &#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其输出就是 ：<code>&lt;a href=&quot;https://www.mingsrc.work&quot;&gt;Auraro&lt;/a&gt;</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="选项卡二(默认为2)-2"><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p>会把Json对象指向的内容渲染为HTML元素，同上代码，如果<code>v-text</code>替换为<code>v-html</code>，其输出就会变为：</p><p><a href="https://www.mingsrc.work">Auraro</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-3"><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>即交互事件，当发生点击事件时的处理，v-on有多种写法，可以使用<code>v-on</code>，也可以使用简写的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;v-on指令&quot;</span> v-on:click=<span class="hljs-string">&quot;doIt&quot;</span>&gt;<br>&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;v-on简写&quot;</span> @click=<span class="hljs-string">&quot;doIt&quot;</span>&gt;<br>&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;双击事件&quot;</span> @dblclick=<span class="hljs-string">&quot;doIt&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>直接pao一个代码：</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>v-on</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vue_04_交互<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://static.runoob.com/assets/vue/1.0.11/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;v-on指令&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;v-on简写&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;双击事件&quot;</span> @<span class="hljs-attr">dblclick</span>=<span class="hljs-string">&quot;doIt&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> @<span class="hljs-attr">dblclick</span>=<span class="hljs-string">&quot;changeFood&quot;</span>&gt;</span>&#123;&#123; food &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">  el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>  data: &#123;<br><span class="javascript">    food: <span class="hljs-string">&quot;西蓝花炒蛋&quot;</span>,</span><br>    todos: [<br><span class="javascript">      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;菜鸟教程&#x27;</span> &#125;,</span><br><span class="javascript">      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;www.runoob.com&#x27;</span> &#125;,</span><br><span class="javascript">      &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;www.w3cschool.cc&#x27;</span> &#125;</span><br>    ]<br>  &#125;,<br>  methods: &#123;<br><span class="javascript">    doIt:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        alert(<span class="hljs-string">&quot;this is &#x27;Hello World&#x27; Button&quot;</span>);</span><br>    &#125;,<br><span class="javascript">    changeFood:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.food);</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.food+=<span class="hljs-string">&quot;好好吃！&quot;</span>;</span><br>    &#125;<br>  &#125;<br>&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>使用v-on实现一个简单的计数器</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    #app&#123;<br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        <span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-tag">button</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_05_+-<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://static.runoob.com/assets/vue/1.0.11/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-num&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sub&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                message: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br>                num: 1<br>            &#125;,<br>            methods: &#123;<br><span class="javascript">                add: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;add&quot;</span>);</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.num &lt; <span class="hljs-number">10</span>) &#123;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.num++;</span><br><span class="javascript">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        alert(<span class="hljs-string">&quot;已经是最大值了&quot;</span>);</span><br>                    &#125;<br>                &#125;,<br><span class="javascript">                sub: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;sub&quot;</span>);</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.num &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.num--;</span><br><span class="javascript">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        alert(<span class="hljs-string">&quot;已经是最小值了&quot;</span>);</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-4"><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p><code>v-show</code>为标签的显示开关，可以通过设置<code>v-show</code>的值选择组件是否展示。</p><blockquote><p>#注意：v-show相当于通过设置标签的<code>visibility</code>为<code>hidden</code>，在源码中还是能看到该元素标签，对内存消耗较小。</p></blockquote><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>v-show用法示例</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeIsShow&quot;</span>&gt;</span>图片显示开关<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addArg&quot;</span>&gt;</span>累加Arg &#123;&#123; isShowArg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/1.jpg&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;v-show test&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../img/2.jpg&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShowArg&gt;=10&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;v-show test&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>        data: &#123;<br><span class="javascript">            message: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br><span class="javascript">            isShow: <span class="hljs-literal">false</span>,</span><br>            isShowArg: 1<br>        &#125;,<br>        methods: &#123;<br><span class="javascript">            changeIsShow:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.isShow = !<span class="hljs-built_in">this</span>.isShow;</span><br>            &#125;,<br><span class="javascript">            addArg:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.isShowArg++;</span><br>            &#125;<br>        &#125;<br>    &#125;);<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-5"><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>与<code>v-show</code>功能类似的还有<code>v-if</code>，但不同的是，<code>v-if</code>会直接隐藏掉源码，即通过修改HTML源码<del style="color:red">删除相应的标签</del>修改页面展示</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>v-if用法示例</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;切换文字显示状态&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggleIsShow&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span> &gt;</span> &#123;&#123; message &#125;&#125; 测试文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>        data: &#123;<br><span class="javascript">            message: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br><span class="javascript">            isShow: <span class="hljs-literal">true</span></span><br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            toggleIsShow:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.isShow = !<span class="hljs-built_in">this</span>.isShow;</span><br>            &#125;<br>        &#125;<br>    &#125;);<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-6"><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>v-bind就是绑定的意思，可以绑定标签的一些属性，写法为<code>v-bind:src=“imgSrc”</code>，即绑定标签的src属性，设置其值为<code>Json</code>对象<code>imgSrc</code>的值。</p><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>v-bind用法示例</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;切换&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggleActive&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgSrc&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;isActive?&#x27;active&#x27;:&#x27;&#x27;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgSrc&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;active:isActive&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>        data: &#123;<br><span class="javascript">            message: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br><span class="javascript">            imgSrc: <span class="hljs-string">&quot;../img/4.jpg&quot;</span>,</span><br><span class="javascript">            imgTitle: <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="javascript">            isActive: <span class="hljs-literal">false</span></span><br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            toggleActive:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.isActive = !<span class="hljs-built_in">this</span>.isActive;</span><br>            &#125;<br>        &#125;<br>    &#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-7"><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>即Vue的遍历插件，会对Json数组对象的每个成员访问。下边使用v-for打印李商隐的《荷花》。</p><div class="note blue simple icon simple"><i class="note-icon fa fa-quote-left"></i><center>[荷花      ](https://so.gushiwen.cn/shiwenv_2c99bc7b0323.aspx)[李商隐](https://so.gushiwen.cn/authorv.aspx?name=李商隐)[〔唐代〕](https://so.gushiwen.cn/shiwens/default.aspx?cstr=唐代)都无色可并，不奈此香何。瑶席乘凉设，金羁落晚过。回衾灯照绮，渡袜水沾罗。预想前秋别，离居梦棹歌。</center></div><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>v-for代码示例</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in msgArr&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                message: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br>                msgArr: [<br><span class="javascript">                <span class="hljs-string">&quot;荷花&quot;</span>,</span><br><span class="javascript">                <span class="hljs-string">&quot;李商隐〔唐代〕&quot;</span>,</span><br><span class="javascript">                <span class="hljs-string">&quot;都无色可并，不奈此香何。&quot;</span>,</span><br><span class="javascript">                <span class="hljs-string">&quot;瑶席乘凉设，金羁落晚过。&quot;</span>,</span><br><span class="javascript">                <span class="hljs-string">&quot;回衾灯照绮，渡袜水沾罗。&quot;</span>,</span><br><span class="javascript">                <span class="hljs-string">&quot;预想前秋别，离居梦棹歌。&quot;</span></span><br>                ]<br>            &#125;<br>        &#125;);<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器就会输出这首《荷花》。</p></div></div><p>需要注意的几个用法：</p><ul><li><p><code>v-for</code>的作用是：根据列表生成列表结构</p></li><li><p><code>v-for</code>主要和数组结合使用</p></li><li><p>语法<code>(item,index) in 数据</code> || <code>item in 数据</code></p></li><li><p><code>item</code>和<code>index</code>可以结合其他指令一起使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 指定标签title为it --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(it,index) in msg&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;it&quot;</span>&gt;</span>&#123;&#123; it &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>当然，也支持Json数组的解析。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">msg_2:&#123;<br>    title:&quot;荷花&quot;,<br>    author:&quot;李商隐〔唐代〕&quot;,<br>    content:[<br>        &#123;<br>            sentence: &quot;都无色可并，不奈此香何。&quot;,<br>        &#125;,<br>        &#123;<br>            sentence: &quot;瑶席乘凉设，金羁落晚过。&quot;,<br>        &#125;,<br>&#123;<br>            sentence: &quot;回衾灯照绮，渡袜水沾罗。&quot;,<br>        &#125;,<br>&#123;<br>            sentence: &quot;预想前秋别，离居梦棹歌。&quot;,<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>使用上述Json数据时，则需要更改<code>v-for</code>的格式才能有效遍历：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;it_2 in msg_2.content&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;it_2&quot;</span>&gt;</span>&#123;&#123; it_2.secntence &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-8"><p>使用了<code>v-model</code>绑定了<code>input</code>，每点击一次按钮，界面就会增加输入框中的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_01_Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;打印输入内容&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;print(&#x27;hello&#x27;)&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;inputValue&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;msgBox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;it in showValue&quot;</span>&gt;</span>&#123;&#123; it.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                message: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br><span class="javascript">                inputValue:<span class="hljs-string">&#x27;&#x27;</span>,</span><br>                showValue:[]<br>            &#125;,<br>            methods:&#123;<br><span class="javascript">                print:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">str</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.showValue.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-built_in">this</span>.inputValue&#125;)</span><br>                &#125;,<br><span class="javascript">                msgBox:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    alert(<span class="hljs-string">&quot;ok&quot;</span>);</span><br>                &#125;<br>            &#125;<br>        &#125;);<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="选项卡二(默认为2)-9"><p>简而言之就是实现标签的绑定，应用于关联标签之间的数据绑定。在<code>v-on</code>补充中有相应的用法可以参考使用。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;% hideToggle 分割线 %&#125;<br><br>&#123;% endhideToggle %&#125;<br></code></pre></td></tr></table></figure><h2 id="综合上述所学，实现首页图片切换的功能"><a href="#综合上述所学，实现首页图片切换的功能" class="headerlink" title="综合上述所学，实现首页图片切换的功能"></a>综合上述所学，实现首页图片切换的功能</h2><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>代码</span></div>    <div class="hide-content"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.5</span>);</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">99</span>;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">510px</span>;</span><br>        &#125;<br><span class="css">        <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: white;</span><br>        &#125;<br><span class="css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-comment">/* padding: 20%; */</span></span><br>        &#125;<br>        .imgShift&#123;<br><span class="css">            zoom: <span class="hljs-number">100%</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid white;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">1960px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">1060px</span>;</span><br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_09_ShiftImg<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mask&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;prev&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;right:45%&quot;</span>&gt;</span>←<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;next&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;left:45%&quot;</span>&gt;</span>→<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgArr[index]&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#x27;imgShift&#x27;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#mask&#x27;</span>,</span><br>            data: &#123;<br>                imgArr: [<br><span class="javascript">                    <span class="hljs-string">&quot;../img/2.jpg&quot;</span>,</span><br><span class="javascript">                    <span class="hljs-string">&quot;../img/3.jpg&quot;</span>,</span><br><span class="javascript">                    <span class="hljs-string">&quot;../img/4.jpg&quot;</span>,</span><br><span class="javascript">                    <span class="hljs-string">&quot;../img/1.jpg&quot;</span></span><br>                ],<br><span class="javascript">                message: <span class="hljs-string">&#x27;Hello World!&#x27;</span>,</span><br>                index: 0<br>            &#125;,<br>            methods: &#123;<br><span class="javascript">                prev: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.index--;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.index &lt; <span class="hljs-number">0</span>)</span><br>                    &#123;<br><span class="javascript">                        <span class="hljs-built_in">this</span>.index = <span class="hljs-number">3</span>;</span><br>                    &#125;<br>                &#125;,<br><span class="javascript">                next: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.index++;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.index &gt; <span class="hljs-number">3</span>)</span><br>                    &#123;<br><span class="javascript">                        <span class="hljs-built_in">this</span>.index = <span class="hljs-number">0</span>;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></div></div><h1 id="小黑记事本的实现"><a href="#小黑记事本的实现" class="headerlink" title="小黑记事本的实现"></a>小黑记事本的实现</h1><blockquote><p>结合以上所学，实现一个记事本功能，CSS样式修饰比较麻烦，仅就功能敲一下代码</p></blockquote><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>Temp_Code</span></div>    <div class="hide-content"><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue_01_Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    #todoapp&#123;<br><span class="css">        <span class="hljs-attribute">display</span>:grid;</span><br><span class="css">        <span class="hljs-attribute">border</span>: none;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">align-self</span>: center;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        <span class="hljs-attribute">max-width</span>: <span class="hljs-number">550px</span>;</span><br><span class="css">        <span class="hljs-attribute">min-width</span>: <span class="hljs-number">230px</span>;</span><br><span class="css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.4em</span>;</span><br><span class="css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;</span><br><span class="css">        <span class="hljs-attribute">filter</span><span class="hljs-selector-pseudo">:drop</span>-shadow(<span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">5px</span> rgb(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>));</span><br><span class="css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale3d</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);</span><br><span class="css">        <span class="hljs-attribute">transition</span>: <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.215</span>, <span class="hljs-number">0.610</span>, <span class="hljs-number">0.355</span>, <span class="hljs-number">1</span>);</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: white;</span><br>    &#125;<br>    #footer &#123;<br><span class="css">        <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">138</span>, <span class="hljs-number">133</span>, <span class="hljs-number">133</span>);</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">182</span>, <span class="hljs-number">180</span>, <span class="hljs-number">180</span>) solid;</span><br><span class="css">        <span class="hljs-attribute">display</span>:inline-block;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">15px</span>;</span><br><span class="css">        <span class="hljs-attribute">border-bottom</span>: none;</span><br><span class="css">        <span class="hljs-attribute">border-radius</span>: inherit;</span><br>    &#125;<br>    #main&#123;<br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30%</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;       </span><br>    &#125;<br>    #todo-list &#123;<br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br>    &#125;<br>    #todo&#123;<br><span class="css">        <span class="hljs-attribute">list-style-type</span>: none;</span><br><span class="css">        <span class="hljs-attribute">font</span>: <span class="hljs-string">&#x27;微软雅黑&#x27;</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">194</span>, <span class="hljs-number">192</span>, <span class="hljs-number">192</span>) solid;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br>    &#125;<br>    .new-todo&#123;<br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">90%</span>;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">194</span>, <span class="hljs-number">192</span>, <span class="hljs-number">192</span>) solid;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30%</span>;</span><br><span class="css">        <span class="hljs-attribute">display</span>:flexbox;</span><br><span class="css">        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">opacity</span>(<span class="hljs-number">1</span>);</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: transparent<span class="hljs-meta">!important</span>;</span><br>    &#125;<br>    #view &#123;<br>    <br>    &#125;<br>    #index&#123;<br><span class="css">        <span class="hljs-attribute">text-align</span>: left;</span><br><span class="css">        <span class="hljs-attribute">float</span>: left;</span><br>    &#125;<br>    #destroy &#123;<br><span class="css">        <span class="hljs-attribute">float</span>: right;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">10%</span>;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">9%</span>;</span><br><span class="css">        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">opacity</span>(<span class="hljs-number">0</span>);</span><br><span class="css">        <span class="hljs-attribute">border</span>: none;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: none;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-id">#destroy</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">opacity</span>(<span class="hljs-number">1</span>);</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: none;</span><br><span class="css">        <span class="hljs-attribute">color</span>: black;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: white;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">46</span>, <span class="hljs-number">115</span>, <span class="hljs-number">243</span>);</span><br>    &#125;<br>    #info &#123;<br><span class="css">        <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">850px</span>;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center<span class="hljs-meta">!important</span>;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: transparent;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">10%</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: none;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">46</span>, <span class="hljs-number">115</span>, <span class="hljs-number">243</span>);</span><br><span class="css">        <span class="hljs-attribute">color</span>: white;</span><br><span class="css">        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;</span><br><span class="css">        <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">229</span>, <span class="hljs-number">221</span>, <span class="hljs-number">230</span>));</span><br><span class="css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.5</span>,<span class="hljs-number">1.5</span>);</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="css">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Franklin Gothic Medium&#x27;</span>, <span class="hljs-string">&#x27;Arial Narrow&#x27;</span>, Arial, sans-serif;</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 主题区域 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;todoapp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> 记事本 <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;inputValue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入任务&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;new-todo&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 列表区域 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;todo-list&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;todo&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123; index+1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: left;&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;destroy&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;remove(index)&quot;</span>&gt;</span>×<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--统计和清空 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left;&quot;</span>&gt;</span>&#123;&#123; list.length &#125;&#125; items left<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: right;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span>clear<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 底部 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>CopyRight By mignming.shi<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JavaScript 代码需要放在尾部（指定的HTML元素之后） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            el: <span class="hljs-string">&#x27;#todoapp&#x27;</span>,</span><br>            data: &#123;<br><span class="javascript">                list:[<span class="hljs-string">&quot;牺牲你宝贵的时间去干了更宝贵的事情吗？&quot;</span>,<span class="hljs-string">&quot;保持思考&quot;</span>],</span><br><span class="javascript">                inputValue:<span class="hljs-string">&quot;&quot;</span></span><br>            &#125;,<br>            methods:&#123;<br><span class="javascript">                add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.inputValue.length != <span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.list.push(<span class="hljs-built_in">this</span>.inputValue);</span><br><span class="javascript">                        <span class="hljs-built_in">this</span>.inputValue = <span class="hljs-string">&quot;&quot;</span>;</span><br>                    &#125;<br>                &#125;,<br><span class="javascript">                remove:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(x);</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.list.splice(x,<span class="hljs-number">1</span>);</span><br>                &#125;,<br><span class="javascript">                clear:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.list = [];</span><br>                &#125;<br>            &#125;<br>        &#125;);<br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="../../../images/VUE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jsb.png" alt="image-20211123143018679"></p></div></div>]]></content>
    
    
    <summary type="html">VUE学习之路</summary>
    
    
    
    <category term="学习笔记，前端" scheme="https://www.mingsrc.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8C%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="VUE" scheme="https://www.mingsrc.work/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>《Effective C++》条款20~21</title>
    <link href="https://www.mingsrc.work/posts/93488446"/>
    <id>https://www.mingsrc.work/posts/93488446</id>
    <published>2021-11-10T03:32:54.470Z</published>
    <updated>2021-11-21T13:29:21.849Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>条款20：宁以<code>pass-by-reference-to-const</code>替换<code>pass-by-value</code></li><li>条款21：必须返回对象时，别往相反其reference</li></ul><blockquote><p><code>pass-by-value</code>和<code>pass-by-reference</code></p><p>20、21章 讲了<b>函数传参</b>过程<b>引用传值</b>和<b>值传递</b>应该以什么样的形式去处理。从函数的<u>入口</u>和<u>出口</u>两个方面讲了</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C++笔记" scheme="https://www.mingsrc.work/categories/C-%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Effective C++" scheme="https://www.mingsrc.work/categories/C-%E7%AC%94%E8%AE%B0/Effective-C/"/>
    
    
    <category term="Effective C++" scheme="https://www.mingsrc.work/tags/Effective-C/"/>
    
  </entry>
  
  <entry>
    <title>软件分享</title>
    <link href="https://www.mingsrc.work/posts/a80b6d86"/>
    <id>https://www.mingsrc.work/posts/a80b6d86</id>
    <published>2021-06-25T13:21:44.333Z</published>
    <updated>2021-11-29T02:42:18.909Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Utools"><a href="#Utools" class="headerlink" title="Utools"></a>Utools</h1><p>可能是Windows里边最好的快捷方式呼出工具了，个人使用非常顺手。具体看<a href="https://u.tools/">官网</a>介绍吧！我只能说确实好用，也是把这个软件放在第一位的原因。</p><h1 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h1><p>全局搜索工具</p><h1 id="TrayS"><a href="#TrayS" class="headerlink" title="TrayS"></a>TrayS</h1><p>绿色版任务栏透明居中软件</p><h1 id="语雀"><a href="#语雀" class="headerlink" title="语雀"></a>语雀</h1><p>多端协同笔记短剑</p><h2 id="Mouse-Without-Borders"><a href="#Mouse-Without-Borders" class="headerlink" title="Mouse Without Borders"></a>Mouse Without Borders</h2><p>局域网内多台主机键鼠共享</p><h1 id="SpaceDesk"><a href="#SpaceDesk" class="headerlink" title="SpaceDesk"></a>SpaceDesk</h1><p>局域网内多台主机屏幕共享</p><h1 id="浏览器插件类"><a href="#浏览器插件类" class="headerlink" title="浏览器插件类"></a>浏览器插件类</h1><h2 id="油猴"><a href="#油猴" class="headerlink" title="油猴"></a>油猴</h2><p>可以下载和使用各种脚本，目前已经有大量的脚本可以直接去下载使用，非常方便</p><h2 id="微博图床"><a href="#微博图床" class="headerlink" title="微博图床"></a>微博图床</h2><p>可以建一个免费的专属于你个人的图床</p><h2 id="infinity-Pro"><a href="#infinity-Pro" class="headerlink" title="infinity Pro"></a>infinity Pro</h2><p>一个极简风格的标签页</p><h1 id="笔记类软件"><a href="#笔记类软件" class="headerlink" title="笔记类软件"></a>笔记类软件</h1><p>一款好用的markdown软件（可以配合百度云实现同步功能）</p><p><a href="https://typora.io/#">https://typora.io/#</a></p><p><img src="../../../images/AllOFSW/image-20201012181725937.png" alt="image-20201012181725937"></p><p>博客框架Hexo</p><p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p><img src="../../../images/AllOFSW/image-20201012181648993.png" alt></p><p><img src="../../../images/AllOFSW/image-20201012181701043.png" alt></p><p>在线图片处理</p><p><a href="https://www.yasuotu.com/">https://www.yasuotu.com/</a></p><p><img src="../../../images/AllOFSW/image-20201012181632367.png" alt></p><p>快用工具（文档、视频、图片、文件解压缩、数据分析）</p><p><a href="https://www.fastools.cn/doc">https://www.fastools.cn/doc</a></p><p><img src="../../../images/AllOFSW/image-20201012182144932.png" alt></p><p>奶牛快传（文件快传）</p><p><a href="https://cowtransfer.com/?utm_source=nicelinks.site">https://cowtransfer.com/?utm_source=nicelinks.site</a></p><p><img src="../../../images/AllOFSW/image-20201012182128085.png" alt></p><p>PPT网站资源整合</p><p><a href="https://www.hippter.com/?utm_source=nicelinks.site">https://www.hippter.com/?utm_source=nicelinks.site</a></p><p><img src="../../../images/AllOFSW/image-20201012182235016.png" alt></p><p>标签生成器（shields.io）</p><p><img src="../../../images/AllOFSW/image-20201012182319292.png" alt></p><p><img src="../../../images/AllOFSW/image-20201012182346086.png" alt></p><p>语雀（在线笔记平台-阿里开发）</p><p><a href="https://www.yuque.com/dashboard">https://www.yuque.com/dashboard</a></p><p><img src="../../../images/AllOFSW/yuque.png" alt></p>]]></content>
    
    
    <summary type="html">分享一些自己在学习工作中用到的软件</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>《我的团长我的团》</title>
    <link href="https://www.mingsrc.work/posts/f5df8c81"/>
    <id>https://www.mingsrc.work/posts/f5df8c81</id>
    <published>2021-06-13T04:47:49.550Z</published>
    <updated>2021-11-24T08:56:02.755Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div style="color:black;backdrop-filter: blur(10px) brightness(110%);font:25px 华文行楷;text-align:center;background-image:url(https://gitee.com/fole-del/img/raw/master/%E4%BF%A1.jpg);border-radius:25px;line-height:1.5;background-repeat: no-repeat;background-size: 65% 100%;background-position: center;">    <br>    我有眼泪给别人，但不愿<br>    为自己痛哭；我没有使自己<br>    适合于这世界，也没有美丽的<br>    自辟的国土，就只好永远<br>    <br>    渴望：为希望而生；在希望里<br>    死去，终于承认了不知道<br>    生命；接受了它又挥霍掉，<br>    只是历史的工具，长路上的<br>    <br>    一粒沙，所以拼命摆脱<br>    那黑影，而他们因此讥笑我；<br>    这就选择了寂寞，热闹的寂寞，<br>    <br>    用笑声骗自己，漂浮在庸俗<br>    生活的涡流里，而渐渐，我就说，<br>    我是个庸俗主义者，无心痛哭。<br>    <span style="text-align:right;">——杜运燮《赠友》</span>    <br>    <br>   </div><h2 id="剧情简介"><a href="#剧情简介" class="headerlink" title="剧情简介"></a>剧情简介</h2><div class="note success modern"><p>1942年，中缅边境有座叫禅达的小镇。时不时受到炮火袭击的地方，聚集着一群来自五湖四海的溃兵。他们是小太爷孟烦了（张译 饰）、军医郝兽医（罗京民 饰）、东北佬迷龙（张国强 饰）、阿译长官（王往 饰）、湖南人不辣（王大治 饰）等。他们只求有吃的死不了，如同活死尸。这时，师 长虞啸卿（邢佳栋 饰）出现了，他想利用这群散兵重组川军团，空降缅甸参加战争。但到达战场的小分队面对的却是已成定局的溃败。最后剩下的孟烦了一行人被逼退到四面楚歌的小屋里。外面是不断靠近的日本兵，危机的最高点，拯救他们的是自称团长的龙文章（段奕宏 饰）。<br>　　龙文章其人，由来不明，不按常理出牌，却奇迹地带领着孟烦了一行人渡过怒江，回到了禅达。等待他们的不是嘉奖，而是看守。而龙文章则被发现根本不是什么团长，而是摘了军衔自己挂帅的中尉。就在大家都猜测龙文章凶多吉少时，龙文章不仅没死还被虞啸卿任命为川军团团长，但等待他们的是更深的漩涡……</p></div><p><span style="border-bottom: 2px dashed #000000">主演： <a href="https://movie.douban.com/celebrity/1274291/">段奕宏</a> / <a href="https://movie.douban.com/celebrity/1274761/">张译</a> / <a href="https://movie.douban.com/celebrity/1274258/">张国强</a> / <a href="https://movie.douban.com/celebrity/1274762/">邢佳栋</a> / <a href="https://movie.douban.com/celebrity/1274252/">李晨</a> / <a href="https://movie.douban.com/celebrity/1320815/">曹海涛</a> / <a href="https://movie.douban.com/celebrity/1313992/">刘威葳</a> / <a href="https://movie.douban.com/celebrity/1275669/">高峰</a> / <a href="https://movie.douban.com/celebrity/1313471/">罗京民</a> / <a href="https://movie.douban.com/celebrity/1316774/">王往</a> / <a href="https://movie.douban.com/celebrity/1314858/">王大治</a> / <a href="https://movie.douban.com/celebrity/1313486/">范雷</a> / <a href="https://movie.douban.com/celebrity/1317139/">王迅</a> / <a href="https://movie.douban.com/celebrity/1325197/">王东栋</a> / <a href="https://movie.douban.com/celebrity/1318324/">刘天佐</a> / <a href="https://movie.douban.com/celebrity/1314488/">谢孟伟</a> / <a href="https://movie.douban.com/celebrity/1321566/">左腾云</a> / <a href="https://movie.douban.com/celebrity/1355785/">赵志君</a> / <a href="https://movie.douban.com/celebrity/1321805/">王大奇</a> / <a href="https://movie.douban.com/celebrity/1320314/">袁菲</a> / <a href="https://movie.douban.com/celebrity/1355786/">江奇翰</a> / <a href="https://movie.douban.com/celebrity/1275728/">李泓良</a> / <a href="https://movie.douban.com/celebrity/1331309/">杜建桥</a> / <a href="https://movie.douban.com/celebrity/1318417/">张衡平</a> / <a href="https://movie.douban.com/celebrity/1355787/">宿宇杰</a> / <a href="https://movie.douban.com/subject_search?search_text=马云">马云</a> / <a href="https://movie.douban.com/celebrity/1355788/">何杰</a> / <a href="https://movie.douban.com/celebrity/1327332/">白恩</a> / <a href="https://movie.douban.com/celebrity/1316812/">柯志凌</a> / <a href="https://movie.douban.com/celebrity/1274972/">曹操</a> / <a href="https://movie.douban.com/celebrity/1355789/">吴有才</a> / <a href="https://movie.douban.com/celebrity/1355790/">哈斯其其格</a> / <a href="https://movie.douban.com/celebrity/1275948/">史航</a> / <a href="https://movie.douban.com/celebrity/1355791/">邓宝</a> / <a href="https://movie.douban.com/celebrity/1274763/">陈思诚</a> / <a href="https://movie.douban.com/celebrity/1355792/">张衍</a> / <a href="https://movie.douban.com/celebrity/1341886/">李京</a> / <a href="https://movie.douban.com/celebrity/1355793/">杨在景</a> / <a href="https://movie.douban.com/celebrity/1318613/">李博</a> / <a href="https://movie.douban.com/celebrity/1330631/">刁海明</a> / <a href="https://movie.douban.com/celebrity/1275188/">兰晓龙</a></span></p><h2 id="夸一夸"><a href="#夸一夸" class="headerlink" title="夸一夸"></a>夸一夸</h2><div class="note red no-icon simple"><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🎉实在惊叹于<span style="border-bottom: 2px dashed #000000">演员演技的扎实和剧情的波澜起伏</span>。<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 看的过程中实在是有太多的感慨。既是军人，也是逃兵，也是英雄，对角色的塑立实在犹如神来之笔。但这还仅仅只是个开始，文中人物谈吐皆具深意，随性一首便是对处境、遭遇、生死的感慨，借用网友一句来形容，那就是：</p><blockquote><p>“拍摄如电影，表演似话剧，以远征军历史为背景，探讨鲁迅式的国民性以及哈姆莱特式的生存命题。”</p><footer><strong>@抛书人</strong></footer></blockquote><p>就像剧中有句话说的那样，这世上，没有哪个人经得起挑剔</p></div><h2 id="豆瓣评价"><a href="#豆瓣评价" class="headerlink" title="豆瓣评价"></a>豆瓣评价</h2><iframe height="500px" width="100%" src="https://movie.douban.com/subject/2997325/comments?status=P"></iframe><h2 id="剧照"><a href="#剧照" class="headerlink" title="剧照"></a>剧照</h2><div class="justified-gallery"><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2052563604,1680387617&amp;fm=26&amp;gp=0.jpg" alt="img"></p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201901%2F01%2F20190101225255_LMiUN.thumb.700_0.jpeg&amp;refer=http%3A%2F%2Fb-ssl.duitang.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1626186531&amp;t=80e4bcb1c0b8027413f55b8302ab34e0" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fvsd-picture.cdn.bcebos.com%2Fe4ca2e2ec63a5127fe292e97e607587d61f4e429.jpg&amp;refer=http%3A%2F%2Fvsd-picture.cdn.bcebos.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1626186531&amp;t=74fe0aacea0448c5b84803adfc33e07f" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fq_70%2Cc_zoom%2Cw_640%2Fimages%2F20171125%2F1bcc16716d6f46a896f0f470e79d521b.jpeg&amp;refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1626186531&amp;t=fb9080dfbeb4adc7e38c6f57b496e956" alt="img"><img src="https://ss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/728da9773912b31be8075e9f8d18367adab4e119.jpg" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.tv.cctv.com%2Fimage%2F20090310%2FIMAG1236649173204252.jpg&amp;refer=http%3A%2F%2Fimg.tv.cctv.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1626186531&amp;t=f448f2c7947ee6771cc8ac46ee1208d7" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg6.itiexue.net%2F2660%2F26603010.jpg&amp;refer=http%3A%2F%2Fimg6.itiexue.net&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1626186613&amp;t=808253a9ab2bd082aa3413c49a35a82b" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fgss0.baidu.com%2F-fo3dSag_xI4khGko9WTAnF6hhy%2Fzhidao%2Fpic%2Fitem%2Fd009b3de9c82d1589a4c2bf78b0a19d8bd3e42ad.jpg&amp;refer=http%3A%2F%2Fgss0.baidu.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1626186613&amp;t=7de8666ab70264e331d13905c6c9ca9c" alt="img"></p>          </div>]]></content>
    
    
    <summary type="html">&lt;span style=&quot;text-align:center;font:20px 华文行楷;color:blueviolent;word-spacing:30px;background-image:-webkit-linear-gradient(bottom,red,#990033,#AB2524);-webkit-background-clip:text;-webkit-text-fill-color:transparent;  &quot; &gt;一腔热血，满腔报国；无畏热血，一心为国&lt;/span&gt;&lt;br&gt;一部你值得看的剧，不一定是奥斯卡，不一定是金马。&lt;br&gt;十一人组成的炮灰团就够了吧</summary>
    
    
    
    
    <category term="分享" scheme="https://www.mingsrc.work/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="好剧" scheme="https://www.mingsrc.work/tags/%E5%A5%BD%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>ipad访问🐾电脑文件</title>
    <link href="https://www.mingsrc.work/posts/cdc0a7f6"/>
    <id>https://www.mingsrc.work/posts/cdc0a7f6</id>
    <published>2021-06-10T14:05:35.726Z</published>
    <updated>2021-11-21T13:29:21.755Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ipad访问电脑文件夹"><a href="#ipad访问电脑文件夹" class="headerlink" title="ipad访问电脑文件夹"></a>ipad访问电脑文件夹</h1><div class="note green icon simple"><i class="note-icon fab fa fa-dot-circle-o"></i><p>最终目标：ipad上可以访问电脑共享的文件夹</p></div><h2 id="一、前提条件"><a href="#一、前提条件" class="headerlink" title="一、前提条件"></a>一、前提条件</h2><p><img src="https://gitee.com/fole-del/img/raw/master/20210611173034.png" style="zoom:50%;float:right;"></p><div class="checkbox plus green checked"><input type="checkbox" checked="checked">            <p>ipad与电脑是在同一个局域网内</p>            </div><div class="checkbox red checked"><input type="checkbox" checked="checked">            <p>当然，你还得有一个pad</p>            </div><div class="checkbox red checked"><input type="checkbox" checked="checked">            <p>你还得知道你电脑账户名以及账户密码</p>            </div><h2 id="二、设置共享文件夹"><a href="#二、设置共享文件夹" class="headerlink" title="二、设置共享文件夹"></a>二、设置共享文件夹</h2><blockquote><p>本文以<code>share-folders文件夹</code>为例<img src="https://gitee.com/fole-del/img/raw/master/20210611173240.png" alt="就是这个文件夹" style="zoom:80%;"></p></blockquote><h3 id="1-设置共享文件夹-跟着步骤来"><a href="#1-设置共享文件夹-跟着步骤来" class="headerlink" title="1. 设置共享文件夹(跟着步骤来)"></a>1. 设置共享文件夹(跟着步骤来)</h3><ol><li><p>右击文件夹</p><p><img src="https://gitee.com/fole-del/img/raw/master/20210611173435.png" alt="step 1" style="zoom: 80%;"></p></li><li><p>点击共享</p><p><img src="https://gitee.com/fole-del/img/raw/master/20210611173602.png" alt="step 2" style="zoom:80%;"></p></li><li><p>选择被共享的用户，这里我选择<code>ming Ming</code>，选择用户之后点击右下角<kbd>🀄共享(H)</kbd>按钮即可</p><p>   <img src="https://gitee.com/fole-del/img/raw/master/20210611174022.png" alt="step 3" style="zoom:67%;"></p></li><li><p>到这一步，共享文件夹就设置完毕了，如图所示</p></li></ol><p><img src="https://gitee.com/fole-del/img/raw/master/20210611174511.png" alt="step 4" style="zoom:80%;"></p><h3 id="2-查看windows的IP地址"><a href="#2-查看windows的IP地址" class="headerlink" title="2. 查看windows的IP地址"></a>2. 查看windows的IP地址</h3><ol><li>按<kbd>Win+R</kbd>输入<code>cmd</code>，打开命令提示符（或者右击左下角<img src="https://gitee.com/fole-del/img/raw/master/20210611181912.png" style>按钮，点击运行)</li><li>输入<code>ipconfig</code>查看本机IP地址</li><li>如下图所示为我本人电脑的IP地址<i id="2-3"></i></li></ol><p><img src="https://gitee.com/fole-del/img/raw/master/20210611175249.png" alt="IP地址" style="zoom:80%;"></p><h3 id="3-在ipad连接"><a href="#3-在ipad连接" class="headerlink" title="3. 在ipad连接"></a>3. 在ipad连接</h3><ol><li>打开文件，没有的可以去<code>app store</code>下载</li></ol><p><img src="https://gitee.com/fole-del/img/raw/master/20210611175804.png" alt="step 1"></p><ol><li><p>点击文件右上角菜单栏<kbd style="color:#3493FE;font-family:黑体;font-weight:900;">···</kbd></p><p><img src="https://gitee.com/fole-del/img/raw/master/20210611180014.png" alt="step 2" style="zoom: 33%;"></p></li><li><p>输入IP地址，然后点击<kbd style="color:#3493FE;font-family:黑体;font-weight:900;">连接</kbd></p></li></ol><p><a href="#2-3">也就是<code>2-3</code>得到的地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">smb:&#x2F;&#x2F;192.168.1.113<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/fole-del/img/raw/master/20210611180648.png" alt="step 3" style="zoom:33%;"></p><ol><li><p>输入名称和密码（也就是你的windows用户和密码），点击<kbd style="color:#3493FE;font-family:黑体;font-weight:900;font-size:14px;">下一步</kbd></p><p><span style="border-bottom: 2px dashed #000000">注1：如果你电脑是中文名，那你就输入中文名即可</span></p></li></ol><p><img src="https://gitee.com/fole-del/img/raw/master/20210611181344.png" alt="step 4" style="zoom:33%;"></p><p><span style="border-bottom: 2px dashed #000000">注2：用户名带空格的如果登录失败，可以删除空格再尝试一遍</span></p><h2 id="三、连接成功"><a href="#三、连接成功" class="headerlink" title="三、连接成功"></a>三、连接成功</h2><p>如图所示，ipad文件已共享出现了我们刚才连接的网络位置，打开<code>share-folders</code>文件夹也能看到仅有的一张图片。同样的，在电脑的网络位置，点进去也能看到我们已经共享的文件夹。</p><div class="justified-gallery"><p><img src="https://gitee.com/fole-del/img/raw/master/20210611182955.png" alt="ipad-over"></p><p><img src="https://gitee.com/fole-del/img/raw/master/20210611182953.png" alt="windows-over"></p><p><img src="https://gitee.com/fole-del/img/raw/master/20210611182952.png" alt="share-folders文件夹内容"></p>          </div><hr><p><img src="https://gitee.com/fole-del/img/raw/master/20210611184500.png" alt="恭喜你，出师了"></p>]]></content>
    
    
    <summary type="html">仅限于ipad访问🐾电脑的文件夹</summary>
    
    
    
    
    <category term="技巧" scheme="https://www.mingsrc.work/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="杂记" scheme="https://www.mingsrc.work/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="分享" scheme="https://www.mingsrc.work/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter扩展技能</title>
    <link href="https://www.mingsrc.work/posts/2018b55"/>
    <id>https://www.mingsrc.work/posts/2018b55</id>
    <published>2021-06-10T08:52:51.592Z</published>
    <updated>2021-11-29T02:55:34.572Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jupyter-使用相关"><a href="#Jupyter-使用相关" class="headerlink" title="Jupyter 使用相关"></a>Jupyter 使用相关</h1><h2 id="一、安装主题"><a href="#一、安装主题" class="headerlink" title="一、安装主题"></a>一、安装主题</h2><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install --upgrade jupyterthemes<br></code></pre></td></tr></table></figure><p>查看可用主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jt -l<br></code></pre></td></tr></table></figure><h3 id="设置推荐"><a href="#设置推荐" class="headerlink" title="设置推荐"></a>设置推荐</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">jt -t chesterish -fs 14 -cellw 85% -ofs 13 -dfs 11 -T<br>jt -t oceans16 -f fira -fs 13 -cellw 90% -ofs 11 -dfs 11 -T -N<br></code></pre></td></tr></table></figure><h2 id="二、自动补全等功能"><a href="#二、自动补全等功能" class="headerlink" title="二、自动补全等功能"></a>二、自动补全等功能</h2>]]></content>
    
    
    <summary type="html">主题|自动补全|Markdown|快捷键等</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>有书读 NO.1</title>
    <link href="https://www.mingsrc.work/posts/2d110b49"/>
    <id>https://www.mingsrc.work/posts/2d110b49</id>
    <published>2021-05-30T12:29:36.404Z</published>
    <updated>2021-11-21T13:29:22.038Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《半小时漫画中国哲学史》"><a href="#《半小时漫画中国哲学史》" class="headerlink" title="《半小时漫画中国哲学史》"></a>《半小时漫画中国哲学史》</h1><div class="note green icon modern"><i class="note-icon fa fa-hand-peace-o"></i><p><span class="fas faa-wrench animated"><a>虽然</a></span>书名说的就是半个小时，但我是间隔这用了三天时间读了一下，从另一个角度来讲，我既是来陶冶一下最近烦躁的情绪；同时，也是因为在上党课时对哲学、批判思维的一种兴趣，发现这本书纯属意外。但确实值得推荐：</p><p>​    1. 作者通过漫画的形式讲了中国哲学的一些内容；</p><p>​    2. 诙谐幽默的讲述为本就枯燥的内容平添色彩，内容方面图一乐，毕竟好多知识课本里边都学过，但值得学习的是作者叙述的风格和语言的组织，以及文中不间断的插画内容，思维确实有趣</p></div><style>.card--11 .card__img1,.card--11 .card__img--hover1 {  background-image: url("https://cdn.jsdelivr.net/gh/fole-del/img/imgservice.suning.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg");}.card__clock1 {  vertical-align: middle;  fill: #FFFFFF;}.card__time1 {  color: #FFFFFF;  vertical-align: text-bottom;}.card__clock-info1 {  float: right;}.card__img1 {  visibility: hidden;  background-size: cover;  background-position: center;  background-repeat: no-repeat;  width: 100%;  height: 200px;  border-top-left-radius: 12px;  border-top-right-radius: 12px;}.card__info-hover1 {  position: absolute;  padding: 16px;  width: 100%;  opacity: 0;  top: 0;}.card__img--hover1 {  transition: 0.2s all ease-out;  background-size: cover;  background-position: center;  background-repeat: no-repeat;width: 100%;  position: absolute;  height: 235px;  border-top-left-radius: 12px;  border-top-right-radius: 12px;  top: 0;}.card1 {  transition: all 0.4s cubic-bezier(0.175, 0.885, 0, 1);  background-color: #fff;  position: relative;  border-radius: 12px;  overflow: hidden;  box-shadow: 0px 13px 10px -7px rgba(0, 0, 0, 0.1);  transform: scale(0.9, 0.9);}.card1:hover {  box-shadow: 0px 30px 18px -8px rgba(0, 0, 0, 0.1);  transform: scale(1, 1);}.card__info1 {  z-index: 2;  background-color: #fff;  border-bottom-left-radius: 12px;  border-bottom-right-radius: 12px;}.card__category1 {  text-transform: uppercase;  font-size: 13px;  letter-spacing: 2px;  font-weight: 500;  color: #868686;}.card__title1 {  margin-top: 5px;  margin-bottom: 10px;}.card__by1 {  font-size: 12px;  font-weight: 500;}.card__author1 {  font-weight: 600;  text-decoration: none;  color: #ad7d52;}.card1:hover .card__img--hover1 {  height: 100%;  opacity: 0.1;}.card1:hover .card__info1 {  background-color: transparent;  position: relative;}.card:hover .card__info-hover1 {  opacity: 1;}/**  * CSS Locks * min viewport 576px  * max viewport 1400px**/   .card1 {    /*   * min width = 300   * max width = 600     */      width: calc(300px + (600 - 300) * ((100vw - 576px) / (1400 - 576)));    }    .card__like1 {     /*   * min width = 18   * max width = 36     */      width: calc(36px + (36 - 18) * ((100vw - 576px) / (1400 - 576)));    }    .card__clock1 {     /*   * min width = 20   * max width = 40     */      width: calc(20px + (40 - 20) * ((100vw - 576px) / (1400 - 576)));    }    .card__time1 {     /*   * min font-size = 12   * max font-size = 24     */     font-size: calc(24px + (24 - 12) * ((100vw - 576px) / (1400 - 576)));     margin-left: calc(5px + (10 - 5) * ((100vw - 576px) / (1400 - 576)));    }    .card__info1 {     padding: calc(16px + (32 - 16) * ((100vw - 576px) / (1400 - 576)))     calc(24px + (48 - 24) * ((100vw - 576px) / (1400 - 576)))     calc(24px + (48 - 24) * ((100vw - 576px) / (1400 - 576)))     calc(24px + (48 - 24) * ((100vw - 576px) / (1400 - 576)));    }</style><h1 id><a href="#" class="headerlink" title></a><div class="checkbox plus red checked"><input type="checkbox" checked="checked">            <p><a href="https://weread.qq.com/web/reader/90f3285071ff6efe90f1363kc81322c012c81e728d9d180">链接直达</a></p>            </div></h1> <article class="card1 card--11">    <div class="card__info-hover1">      <svg class="card__like1" viewbox="0 0 24 24"><path fill="#FFFFFF" d="M12.1,18.55L12,18.65L11.89,18.55C7.14,14.24 4,11.39 4,8.5C4,6.5 5.5,5 7.5,5C9.04,5 10.54,6 11.07,7.36H12.93C13.46,6 14.96,5 16.5,5C18.5,5 20,6.5 20,8.5C20,11.39 16.86,14.24 12.1,18.55M16.5,3C14.76,3 13.09,3.81 12,5.08C10.91,3.81 9.24,3 7.5,3C4.42,3 2,5.41 2,8.5C2,12.27 5.4,15.36 10.55,20.03L12,21.35L13.45,20.03C18.6,15.36 22,12.27 22,8.5C22,5.41 19.58,3 16.5,3Z"/></svg>      <!-- 右上角时间 -->      <div class="card__clock-info1">        <svg class="card__clock1" viewbox="0 0 24 24">          <path d="M12,20A7,7 0 0,1 5,13A7,7 0 0,1 12,6A7,7 0 0,1 19,13A7,7 0 0,1 12,20M19.03,7.39L20.45,5.97C20,5.46 19.55,5 19.04,4.56L17.62,6C16.07,4.74 14.12,4 12,4A9,9 0 0,0 3,13A9,9 0 0,0 12,22C17,22 21,17.97 21,13C21,10.88 20.26,8.93 19.03,7.39M11,14H13V8H11M15,1H9V3H15V1Z"/>            <span class="card__time1"><p>《半小时漫画中国哲学史》</p></span>        </svg>      </div>    </div>    <div class="card__img1"></div>    <a href="https://weread.qq.com/web/reader/90f3285071ff6efe90f1363kc81322c012c81e728d9d180" class="card_link1">      <div class="card__img--hover1"></div>    </a>    <div class="card__info1">      <p class="card__title1">古人都在思考些什么？</p>      <span class="card__by1">by <a href="https://weread.qq.com/web/reader/90f3285071ff6efe90f1363kc81322c012c81e728d9d180" class="card__author1" title="author">《半小时漫画中国哲学史》</a></span>    </div>  </article><p>一些文中的插画</p><div class="justified-gallery"><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210530231154622.png" alt="插画"></p><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210530231220611.png" alt="插画"></p><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210530231238611.png" alt="插画"></p>          </div>]]></content>
    
    
    <summary type="html">半个小时你能干什么？不如看看漫画，顺便还能了解一下中国哲学史&lt;br&gt;&lt;span class=&quot;fas faa-ring animated-hover&quot; style=&quot;border-bottom:3px solid green&quot;&gt;《半小时漫画中国哲学史》&lt;/span&gt;</summary>
    
    
    
    <category term="杂记" scheme="https://www.mingsrc.work/categories/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="分享" scheme="https://www.mingsrc.work/categories/%E6%9D%82%E8%AE%B0/%E5%88%86%E4%BA%AB/"/>
    
    <category term="书籍" scheme="https://www.mingsrc.work/categories/%E6%9D%82%E8%AE%B0/%E5%88%86%E4%BA%AB/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="分享" scheme="https://www.mingsrc.work/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="书单" scheme="https://www.mingsrc.work/tags/%E4%B9%A6%E5%8D%95/"/>
    
    <category term="好书" scheme="https://www.mingsrc.work/tags/%E5%A5%BD%E4%B9%A6/"/>
    
  </entry>
  
</feed>
