<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A u r o r a</title>
  
  
  <link href="https://www.mingsrc.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.mingsrc.xyz/"/>
  <updated>2021-06-28T13:12:06.622Z</updated>
  <id>https://www.mingsrc.xyz/</id>
  
  <author>
    <name>Asurora</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件分享</title>
    <link href="https://www.mingsrc.xyz/2021/06/25/F_%E6%9D%82%E8%AE%B0/%E8%BD%AF%E4%BB%B6/AllOFSW/"/>
    <id>https://www.mingsrc.xyz/2021/06/25/F_%E6%9D%82%E8%AE%B0/%E8%BD%AF%E4%BB%B6/AllOFSW/</id>
    <published>2021-06-25T13:21:44.333Z</published>
    <updated>2021-06-28T13:12:06.622Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Utools"><a href="#Utools" class="headerlink" title="Utools"></a>Utools</h1><p>可能是Windows里边最好的快捷方式呼出工具了，个人使用非常顺手。具体看<a href="https://u.tools/">官网</a>介绍吧！我只能说确实好用，也是把这个软件放在第一位的原因。</p><p><img src="https://gitee.com/fole-del/img/raw/master/%E5%B0%81%E9%9D%A2(1).jpg"></p>]]></content>
    
    
    <summary type="html">分享一些自己在学习工作中用到的软件</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>《我的团长我的团》</title>
    <link href="https://www.mingsrc.xyz/2021/06/13/F_%E6%9D%82%E8%AE%B0/%E5%88%86%E4%BA%AB/%E6%8E%A8%E8%8D%90%E4%B8%80%E9%83%A8%E5%89%A7/%E3%80%8A%E6%88%91%E7%9A%84%E5%9B%A2%E9%95%BF%E6%88%91%E7%9A%84%E5%9B%A2%E3%80%8B/"/>
    <id>https://www.mingsrc.xyz/2021/06/13/F_%E6%9D%82%E8%AE%B0/%E5%88%86%E4%BA%AB/%E6%8E%A8%E8%8D%90%E4%B8%80%E9%83%A8%E5%89%A7/%E3%80%8A%E6%88%91%E7%9A%84%E5%9B%A2%E9%95%BF%E6%88%91%E7%9A%84%E5%9B%A2%E3%80%8B/</id>
    <published>2021-06-13T04:47:49.550Z</published>
    <updated>2021-10-30T07:11:01.856Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div style="backdrop-filter: blur(10px) brightness(110%);font:25px 华文行楷;text-align:center;background-image:url(https://gitee.com/fole-del/img/raw/master/%E4%BF%A1.jpg);border-radius:25px;line-height:1.5;background-repeat: no-repeat;background-size: 65% 100%;background-position: center;">    <br>    我有眼泪给别人，但不愿<br>    为自己痛哭；我没有使自己<br>    适合于这世界，也没有美丽的<br>    自辟的国土，就只好永远<br>    <br>    渴望：为希望而生；在希望里<br>    死去，终于承认了不知道<br>    生命；接受了它又挥霍掉，<br>    只是历史的工具，长路上的<br>    <br>    一粒沙，所以拼命摆脱<br>    那黑影，而他们因此讥笑我；<br>    这就选择了寂寞，热闹的寂寞，<br>    <br>    用笑声骗自己，漂浮在庸俗<br>    生活的涡流里，而渐渐，我就说，<br>    我是个庸俗主义者，无心痛哭。<br>    <span style="text-align:right;">——杜运燮《赠友》</span>    <br>    <br>   </div><h2 id="剧情简介"><a href="#剧情简介" class="headerlink" title="剧情简介"></a>剧情简介</h2><div class="note success modern"><p>1942年，中缅边境有座叫禅达的小镇。时不时受到炮火袭击的地方，聚集着一群来自五湖四海的溃兵。他们是小太爷孟烦了（张译 饰）、军医郝兽医（罗京民 饰）、东北佬迷龙（张国强 饰）、阿译长官（王往 饰）、湖南人不辣（王大治 饰）等。他们只求有吃的死不了，如同活死尸。这时，师 长虞啸卿（邢佳栋 饰）出现了，他想利用这群散兵重组川军团，空降缅甸参加战争。但到达战场的小分队面对的却是已成定局的溃败。最后剩下的孟烦了一行人被逼退到四面楚歌的小屋里。外面是不断靠近的日本兵，危机的最高点，拯救他们的是自称团长的龙文章（段奕宏 饰）。<br>　　龙文章其人，由来不明，不按常理出牌，却奇迹地带领着孟烦了一行人渡过怒江，回到了禅达。等待他们的不是嘉奖，而是看守。而龙文章则被发现根本不是什么团长，而是摘了军衔自己挂帅的中尉。就在大家都猜测龙文章凶多吉少时，龙文章不仅没死还被虞啸卿任命为川军团团长，但等待他们的是更深的漩涡……</p></div><p><span style="border-bottom: 2px dashed #000000">主演： <a href="https://movie.douban.com/celebrity/1274291/">段奕宏</a> / <a href="https://movie.douban.com/celebrity/1274761/">张译</a> / <a href="https://movie.douban.com/celebrity/1274258/">张国强</a> / <a href="https://movie.douban.com/celebrity/1274762/">邢佳栋</a> / <a href="https://movie.douban.com/celebrity/1274252/">李晨</a> / <a href="https://movie.douban.com/celebrity/1320815/">曹海涛</a> / <a href="https://movie.douban.com/celebrity/1313992/">刘威葳</a> / <a href="https://movie.douban.com/celebrity/1275669/">高峰</a> / <a href="https://movie.douban.com/celebrity/1313471/">罗京民</a> / <a href="https://movie.douban.com/celebrity/1316774/">王往</a> / <a href="https://movie.douban.com/celebrity/1314858/">王大治</a> / <a href="https://movie.douban.com/celebrity/1313486/">范雷</a> / <a href="https://movie.douban.com/celebrity/1317139/">王迅</a> / <a href="https://movie.douban.com/celebrity/1325197/">王东栋</a> / <a href="https://movie.douban.com/celebrity/1318324/">刘天佐</a> / <a href="https://movie.douban.com/celebrity/1314488/">谢孟伟</a> / <a href="https://movie.douban.com/celebrity/1321566/">左腾云</a> / <a href="https://movie.douban.com/celebrity/1355785/">赵志君</a> / <a href="https://movie.douban.com/celebrity/1321805/">王大奇</a> / <a href="https://movie.douban.com/celebrity/1320314/">袁菲</a> / <a href="https://movie.douban.com/celebrity/1355786/">江奇翰</a> / <a href="https://movie.douban.com/celebrity/1275728/">李泓良</a> / <a href="https://movie.douban.com/celebrity/1331309/">杜建桥</a> / <a href="https://movie.douban.com/celebrity/1318417/">张衡平</a> / <a href="https://movie.douban.com/celebrity/1355787/">宿宇杰</a> / <a href="https://movie.douban.com/subject_search?search_text=%E9%A9%AC%E4%BA%91">马云</a> / <a href="https://movie.douban.com/celebrity/1355788/">何杰</a> / <a href="https://movie.douban.com/celebrity/1327332/">白恩</a> / <a href="https://movie.douban.com/celebrity/1316812/">柯志凌</a> / <a href="https://movie.douban.com/celebrity/1274972/">曹操</a> / <a href="https://movie.douban.com/celebrity/1355789/">吴有才</a> / <a href="https://movie.douban.com/celebrity/1355790/">哈斯其其格</a> / <a href="https://movie.douban.com/celebrity/1275948/">史航</a> / <a href="https://movie.douban.com/celebrity/1355791/">邓宝</a> / <a href="https://movie.douban.com/celebrity/1274763/">陈思诚</a> / <a href="https://movie.douban.com/celebrity/1355792/">张衍</a> / <a href="https://movie.douban.com/celebrity/1341886/">李京</a> / <a href="https://movie.douban.com/celebrity/1355793/">杨在景</a> / <a href="https://movie.douban.com/celebrity/1318613/">李博</a> / <a href="https://movie.douban.com/celebrity/1330631/">刁海明</a> / <a href="https://movie.douban.com/celebrity/1275188/">兰晓龙</a></span></p><h2 id="夸一夸"><a href="#夸一夸" class="headerlink" title="夸一夸"></a>夸一夸</h2><div class="note red no-icon simple"><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;🎉实在惊叹于<span style="border-bottom: 2px dashed #000000">演员演技的扎实和剧情的波澜起伏</span>。<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 看的过程中实在是有太多的感慨。既是军人，也是逃兵，也是英雄，对角色的塑立实在犹如神来之笔。但这还仅仅只是个开始，文中人物谈吐皆具深意，随性一首便是对处境、遭遇、生死的感慨，借用网友一句来形容，那就是：</p><blockquote><p>“拍摄如电影，表演似话剧，以远征军历史为背景，探讨鲁迅式的国民性以及哈姆莱特式的生存命题。”</p><footer><strong>@抛书人</strong></footer></blockquote><p>就像剧中有句话说的那样，这世上，没有哪个人经得起挑剔</p></div><h2 id="豆瓣评价"><a href="#豆瓣评价" class="headerlink" title="豆瓣评价"></a>豆瓣评价</h2><iframe height="500px" width="100%" src="https://movie.douban.com/subject/2997325/comments?status=P"></iframe><h2 id="剧照"><a href="#剧照" class="headerlink" title="剧照"></a>剧照</h2><div class="justified-gallery"><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2052563604,1680387617&fm=26&gp=0.jpg" alt="img"></p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201901%2F01%2F20190101225255_LMiUN.thumb.700_0.jpeg&refer=http%3A%2F%2Fb-ssl.duitang.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186531&t=80e4bcb1c0b8027413f55b8302ab34e0" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fvsd-picture.cdn.bcebos.com%2Fe4ca2e2ec63a5127fe292e97e607587d61f4e429.jpg&refer=http%3A%2F%2Fvsd-picture.cdn.bcebos.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186531&t=74fe0aacea0448c5b84803adfc33e07f" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fq_70%2Cc_zoom%2Cw_640%2Fimages%2F20171125%2F1bcc16716d6f46a896f0f470e79d521b.jpeg&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186531&t=fb9080dfbeb4adc7e38c6f57b496e956" alt="img"><img src="https://ss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/728da9773912b31be8075e9f8d18367adab4e119.jpg" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.tv.cctv.com%2Fimage%2F20090310%2FIMAG1236649173204252.jpg&refer=http%3A%2F%2Fimg.tv.cctv.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186531&t=f448f2c7947ee6771cc8ac46ee1208d7" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg6.itiexue.net%2F2660%2F26603010.jpg&refer=http%3A%2F%2Fimg6.itiexue.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186613&t=808253a9ab2bd082aa3413c49a35a82b" alt="img"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fgss0.baidu.com%2F-fo3dSag_xI4khGko9WTAnF6hhy%2Fzhidao%2Fpic%2Fitem%2Fd009b3de9c82d1589a4c2bf78b0a19d8bd3e42ad.jpg&refer=http%3A%2F%2Fgss0.baidu.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1626186613&t=7de8666ab70264e331d13905c6c9ca9c" alt="img"></p>          </div>]]></content>
    
    
    <summary type="html">&lt;span style=&quot;text-align:center;font:20px 华文行楷;color:blueviolent;word-spacing:30px;background-image:-webkit-linear-gradient(bottom,red,#990033,#AB2524);-webkit-background-clip:text;-webkit-text-fill-color:transparent;  &quot; &gt;一腔热血，满腔报国；无畏热血，一心为国&lt;/span&gt;&lt;br&gt;一部你值得看的剧，不一定是奥斯卡，不一定是金马。&lt;br&gt;十一人组成的炮灰团就够了吧</summary>
    
    
    
    
    <category term="分享" scheme="https://www.mingsrc.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="好剧" scheme="https://www.mingsrc.xyz/tags/%E5%A5%BD%E5%89%A7/"/>
    
  </entry>
  
  <entry>
    <title>ipad访问🐾电脑文件</title>
    <link href="https://www.mingsrc.xyz/2021/06/10/F_%E6%9D%82%E8%AE%B0/%E6%8A%80%E5%B7%A7/ipad%E8%AE%BF%E9%97%AE%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6/"/>
    <id>https://www.mingsrc.xyz/2021/06/10/F_%E6%9D%82%E8%AE%B0/%E6%8A%80%E5%B7%A7/ipad%E8%AE%BF%E9%97%AE%E7%94%B5%E8%84%91%E6%96%87%E4%BB%B6/</id>
    <published>2021-06-10T14:05:35.726Z</published>
    <updated>2021-06-13T22:26:32.609Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ipad访问电脑文件夹"><a href="#ipad访问电脑文件夹" class="headerlink" title="ipad访问电脑文件夹"></a>ipad访问电脑文件夹</h1><div class="note green icon simple"><i class="note-icon fab fa fa-dot-circle-o"></i><p>最终目标：ipad上可以访问电脑共享的文件夹</p></div><h2 id="一、前提条件"><a href="#一、前提条件" class="headerlink" title="一、前提条件"></a>一、前提条件</h2><img src="https://gitee.com/fole-del/img/raw/master/20210611173034.png" style="zoom:50%;float:right;" /><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>ipad与电脑是在同一个局域网内</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>当然，你还得有一个pad</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>你还得知道你电脑账户名以及账户密码</p>            </div><h2 id="二、设置共享文件夹"><a href="#二、设置共享文件夹" class="headerlink" title="二、设置共享文件夹"></a>二、设置共享文件夹</h2><blockquote><p>本文以<code>share-folders文件夹</code>为例<img src="https://gitee.com/fole-del/img/raw/master/20210611173240.png" alt="就是这个文件夹" style="zoom:80%;" /></p></blockquote><h3 id="1-设置共享文件夹-跟着步骤来"><a href="#1-设置共享文件夹-跟着步骤来" class="headerlink" title="1. 设置共享文件夹(跟着步骤来)"></a>1. 设置共享文件夹(跟着步骤来)</h3><ol><li><p>右击文件夹</p><img src="https://gitee.com/fole-del/img/raw/master/20210611173435.png" alt="step 1" style="zoom: 80%;" /></li><li><p>点击共享</p><img src="https://gitee.com/fole-del/img/raw/master/20210611173602.png" alt="step 2" style="zoom:80%;" /></li><li><p>选择被共享的用户，这里我选择<code>ming Ming</code>，选择用户之后点击右下角<kbd>🀄共享(H)</kbd>按钮即可</p>   <img src="https://gitee.com/fole-del/img/raw/master/20210611174022.png" alt="step 3" style="zoom:67%;" /></li><li><p>到这一步，共享文件夹就设置完毕了，如图所示</p></li></ol><img src="https://gitee.com/fole-del/img/raw/master/20210611174511.png" alt="step 4" style="zoom:80%;" /><h3 id="2-查看windows的IP地址"><a href="#2-查看windows的IP地址" class="headerlink" title="2. 查看windows的IP地址"></a>2. 查看windows的IP地址</h3><ol><li>按<kbd>Win+R</kbd>输入<code>cmd</code>，打开命令提示符（或者右击左下角<img src="https://gitee.com/fole-del/img/raw/master/20210611181912.png" style="" />按钮，点击运行)</li><li>输入<code>ipconfig</code>查看本机IP地址</li><li>如下图所示为我本人电脑的IP地址<i id='2-3'></i></li></ol><img src="https://gitee.com/fole-del/img/raw/master/20210611175249.png" alt="IP地址" style="zoom:80%;" /><h3 id="3-在ipad连接"><a href="#3-在ipad连接" class="headerlink" title="3. 在ipad连接"></a>3. 在ipad连接</h3><ol><li>打开文件，没有的可以去<code>app store</code>下载</li></ol><p><img src="https://gitee.com/fole-del/img/raw/master/20210611175804.png" alt="step 1"></p><ol start="2"><li><p>点击文件右上角菜单栏<kbd style="color:#3493FE;font-family:黑体;font-weight:900;">···</kbd></p><img src="https://gitee.com/fole-del/img/raw/master/20210611180014.png" alt="step 2" style="zoom: 33%;" /></li><li><p>输入IP地址，然后点击<kbd style="color:#3493FE;font-family:黑体;font-weight:900;">连接</kbd></p></li></ol><p><a href="#2-3">也就是<code>2-3</code>得到的地址</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">smb:&#x2F;&#x2F;192.168.1.113<br></code></pre></td></tr></table></figure><img src="https://gitee.com/fole-del/img/raw/master/20210611180648.png" alt="step 3" style="zoom:33%;" /><ol start="4"><li><p>输入名称和密码（也就是你的windows用户和密码），点击<kbd style="color:#3493FE;font-family:黑体;font-weight:900;font-size:14px;">下一步</kbd></p><p><span style="border-bottom: 2px dashed #000000">注1：如果你电脑是中文名，那你就输入中文名即可</span></p></li></ol><img src="https://gitee.com/fole-del/img/raw/master/20210611181344.png" alt="step 4" style="zoom:33%;" /><p><span style="border-bottom: 2px dashed #000000">注2：用户名带空格的如果登录失败，可以删除空格再尝试一遍</span></p><h2 id="三、连接成功"><a href="#三、连接成功" class="headerlink" title="三、连接成功"></a>三、连接成功</h2><p>如图所示，ipad文件已共享出现了我们刚才连接的网络位置，打开<code>share-folders</code>文件夹也能看到仅有的一张图片。同样的，在电脑的网络位置，点进去也能看到我们已经共享的文件夹。</p><div class="justified-gallery"><p><img src="https://gitee.com/fole-del/img/raw/master/20210611182955.png" alt="ipad-over"></p><p><img src="https://gitee.com/fole-del/img/raw/master/20210611182953.png" alt="windows-over"></p><p><img src="https://gitee.com/fole-del/img/raw/master/20210611182952.png" alt="share-folders文件夹内容"></p>          </div><hr><p><img src="https://gitee.com/fole-del/img/raw/master/20210611184500.png" alt="恭喜你，出师了"></p>]]></content>
    
    
    <summary type="html">仅限于ipad访问🐾电脑的文件夹</summary>
    
    
    
    
    <category term="杂记" scheme="https://www.mingsrc.xyz/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="技巧" scheme="https://www.mingsrc.xyz/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="分享" scheme="https://www.mingsrc.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter扩展技能</title>
    <link href="https://www.mingsrc.xyz/2021/06/10/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/python%E7%9B%B8%E5%85%B3/jupyter%E7%9B%B8%E5%85%B3/"/>
    <id>https://www.mingsrc.xyz/2021/06/10/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/python%E7%9B%B8%E5%85%B3/jupyter%E7%9B%B8%E5%85%B3/</id>
    <published>2021-06-10T08:52:51.592Z</published>
    <updated>2021-06-11T14:15:31.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jupyter-使用相关"><a href="#Jupyter-使用相关" class="headerlink" title="Jupyter 使用相关"></a>Jupyter 使用相关</h1><h2 id="一、安装主题"><a href="#一、安装主题" class="headerlink" title="一、安装主题"></a>一、安装主题</h2><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install --upgrade jupyterthemes<br></code></pre></td></tr></table></figure><p>查看可用主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jt -l<br></code></pre></td></tr></table></figure><h3 id="设置推荐"><a href="#设置推荐" class="headerlink" title="设置推荐"></a>设置推荐</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">jt -t chesterish -fs 14 -cellw 85% -ofs 13 -dfs 11 -T<br>jt -t oceans16 -f fira -fs 13 -cellw 90% -ofs 11 -dfs 11 -T -N<br></code></pre></td></tr></table></figure><h2 id="二、自动补全等功能"><a href="#二、自动补全等功能" class="headerlink" title="二、自动补全等功能"></a>二、自动补全等功能</h2>]]></content>
    
    
    <summary type="html">主题|自动补全|Markdown|快捷键等</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>有书读 NO.1</title>
    <link href="https://www.mingsrc.xyz/2021/05/30/F_%E6%9D%82%E8%AE%B0/%E5%88%86%E4%BA%AB/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%9C%AC%E4%B9%A6/%E3%80%8A%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E4%B8%AD%E5%9B%BD%E5%93%B2%E5%AD%A6%E5%8F%B2%E3%80%8B/"/>
    <id>https://www.mingsrc.xyz/2021/05/30/F_%E6%9D%82%E8%AE%B0/%E5%88%86%E4%BA%AB/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%9C%AC%E4%B9%A6/%E3%80%8A%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E4%B8%AD%E5%9B%BD%E5%93%B2%E5%AD%A6%E5%8F%B2%E3%80%8B/</id>
    <published>2021-05-30T12:29:36.404Z</published>
    <updated>2021-06-28T12:15:24.580Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="《半小时漫画中国哲学史》"><a href="#《半小时漫画中国哲学史》" class="headerlink" title="《半小时漫画中国哲学史》"></a>《半小时漫画中国哲学史》</h1><div class="note green icon modern"><i class="note-icon fa fa-hand-peace-o"></i><p><span class="fas faa-wrench animated"><a>虽然</a></span>书名说的就是半个小时，但我是间隔这用了三天时间读了一下，从另一个角度来讲，我既是来陶冶一下最近烦躁的情绪；同时，也是因为在上党课时对哲学、批判思维的一种兴趣，发现这本书纯属意外。但确实值得推荐：</p><p>​    1. 作者通过漫画的形式讲了中国哲学的一些内容；</p><p>​    2. 诙谐幽默的讲述为本就枯燥的内容平添色彩，内容方面图一乐，毕竟好多知识课本里边都学过，但值得学习的是作者叙述的风格和语言的组织，以及文中不间断的插画内容，思维确实有趣</p></div><style>.card--11 .card__img1,.card--11 .card__img--hover1 {  background-image: url("https://cdn.jsdelivr.net/gh/fole-del/img/imgservice.suning.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg");}.card__clock1 {  vertical-align: middle;  fill: #FFFFFF;}.card__time1 {  color: #FFFFFF;  vertical-align: text-bottom;}.card__clock-info1 {  float: right;}.card__img1 {  visibility: hidden;  background-size: cover;  background-position: center;  background-repeat: no-repeat;  width: 100%;  height: 200px;  border-top-left-radius: 12px;  border-top-right-radius: 12px;}.card__info-hover1 {  position: absolute;  padding: 16px;  width: 100%;  opacity: 0;  top: 0;}.card__img--hover1 {  transition: 0.2s all ease-out;  background-size: cover;  background-position: center;  background-repeat: no-repeat;width: 100%;  position: absolute;  height: 235px;  border-top-left-radius: 12px;  border-top-right-radius: 12px;  top: 0;}.card1 {  transition: all 0.4s cubic-bezier(0.175, 0.885, 0, 1);  background-color: #fff;  position: relative;  border-radius: 12px;  overflow: hidden;  box-shadow: 0px 13px 10px -7px rgba(0, 0, 0, 0.1);  transform: scale(0.9, 0.9);}.card1:hover {  box-shadow: 0px 30px 18px -8px rgba(0, 0, 0, 0.1);  transform: scale(1, 1);}.card__info1 {  z-index: 2;  background-color: #fff;  border-bottom-left-radius: 12px;  border-bottom-right-radius: 12px;}.card__category1 {  text-transform: uppercase;  font-size: 13px;  letter-spacing: 2px;  font-weight: 500;  color: #868686;}.card__title1 {  margin-top: 5px;  margin-bottom: 10px;}.card__by1 {  font-size: 12px;  font-weight: 500;}.card__author1 {  font-weight: 600;  text-decoration: none;  color: #ad7d52;}.card1:hover .card__img--hover1 {  height: 100%;  opacity: 0.1;}.card1:hover .card__info1 {  background-color: transparent;  position: relative;}.card:hover .card__info-hover1 {  opacity: 1;}/**  * CSS Locks * min viewport 576px  * max viewport 1400px**/   .card1 {    /*   * min width = 300   * max width = 600     */      width: calc(300px + (600 - 300) * ((100vw - 576px) / (1400 - 576)));    }    .card__like1 {     /*   * min width = 18   * max width = 36     */      width: calc(36px + (36 - 18) * ((100vw - 576px) / (1400 - 576)));    }    .card__clock1 {     /*   * min width = 20   * max width = 40     */      width: calc(20px + (40 - 20) * ((100vw - 576px) / (1400 - 576)));    }    .card__time1 {     /*   * min font-size = 12   * max font-size = 24     */     font-size: calc(24px + (24 - 12) * ((100vw - 576px) / (1400 - 576)));     margin-left: calc(5px + (10 - 5) * ((100vw - 576px) / (1400 - 576)));    }    .card__info1 {     padding: calc(16px + (32 - 16) * ((100vw - 576px) / (1400 - 576)))     calc(24px + (48 - 24) * ((100vw - 576px) / (1400 - 576)))     calc(24px + (48 - 24) * ((100vw - 576px) / (1400 - 576)))     calc(24px + (48 - 24) * ((100vw - 576px) / (1400 - 576)));    }</style><h1 id=""><a href="#" class="headerlink" title=""></a><div class='checkbox plus red checked'><input type="checkbox" checked="checked"/>            <p><a href="https://weread.qq.com/web/reader/90f3285071ff6efe90f1363kc81322c012c81e728d9d180">链接直达</a></p>            </div></h1> <article class="card1 card--11">    <div class="card__info-hover1">      <svg class="card__like1" viewBox="0 0 24 24"><path fill="#FFFFFF" d="M12.1,18.55L12,18.65L11.89,18.55C7.14,14.24 4,11.39 4,8.5C4,6.5 5.5,5 7.5,5C9.04,5 10.54,6 11.07,7.36H12.93C13.46,6 14.96,5 16.5,5C18.5,5 20,6.5 20,8.5C20,11.39 16.86,14.24 12.1,18.55M16.5,3C14.76,3 13.09,3.81 12,5.08C10.91,3.81 9.24,3 7.5,3C4.42,3 2,5.41 2,8.5C2,12.27 5.4,15.36 10.55,20.03L12,21.35L13.45,20.03C18.6,15.36 22,12.27 22,8.5C22,5.41 19.58,3 16.5,3Z" /></svg>      <!-- 右上角时间 -->      <div class="card__clock-info1">        <svg class="card__clock1" viewBox="0 0 24 24">          <path d="M12,20A7,7 0 0,1 5,13A7,7 0 0,1 12,6A7,7 0 0,1 19,13A7,7 0 0,1 12,20M19.03,7.39L20.45,5.97C20,5.46 19.55,5 19.04,4.56L17.62,6C16.07,4.74 14.12,4 12,4A9,9 0 0,0 3,13A9,9 0 0,0 12,22C17,22 21,17.97 21,13C21,10.88 20.26,8.93 19.03,7.39M11,14H13V8H11M15,1H9V3H15V1Z" />            <span class="card__time1"><p>《半小时漫画中国哲学史》</p></span>        </svg>      </div>    </div>    <div class="card__img1"></div>    <a href="https://weread.qq.com/web/reader/90f3285071ff6efe90f1363kc81322c012c81e728d9d180" class="card_link1">      <div class="card__img--hover1"></div>    </a>    <div class="card__info1">      <p class="card__title1">古人都在思考些什么？</p>      <span class="card__by1">by <a href="https://weread.qq.com/web/reader/90f3285071ff6efe90f1363kc81322c012c81e728d9d180" class="card__author1" title="author">《半小时漫画中国哲学史》</a></span>    </div>  </article><p>一些文中的插画</p><div class="justified-gallery"><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210530231154622.png" alt="插画"></p><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210530231220611.png" alt="插画"></p><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210530231238611.png" alt="插画"></p>          </div>]]></content>
    
    
    <summary type="html">半个小时你能干什么？不如看看漫画，顺便还能了解一下中国哲学史&lt;br&gt;&lt;span class=&quot;fas faa-ring animated-hover&quot; style=&quot;border-bottom:3px solid green&quot;&gt;《半小时漫画中国哲学史》&lt;/span&gt;</summary>
    
    
    
    <category term="杂记" scheme="https://www.mingsrc.xyz/categories/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="分享" scheme="https://www.mingsrc.xyz/categories/%E6%9D%82%E8%AE%B0/%E5%88%86%E4%BA%AB/"/>
    
    <category term="书籍" scheme="https://www.mingsrc.xyz/categories/%E6%9D%82%E8%AE%B0/%E5%88%86%E4%BA%AB/%E4%B9%A6%E7%B1%8D/"/>
    
    
    <category term="分享" scheme="https://www.mingsrc.xyz/tags/%E5%88%86%E4%BA%AB/"/>
    
    <category term="书单" scheme="https://www.mingsrc.xyz/tags/%E4%B9%A6%E5%8D%95/"/>
    
    <category term="好书" scheme="https://www.mingsrc.xyz/tags/%E5%A5%BD%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>numpy\pandas\random查询手册集合</title>
    <link href="https://www.mingsrc.xyz/2021/05/27/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%87%BD%E6%95%B0%E8%87%AA%E6%9F%A5%E6%89%8B%E5%86%8C/"/>
    <id>https://www.mingsrc.xyz/2021/05/27/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%87%BD%E6%95%B0%E8%87%AA%E6%9F%A5%E6%89%8B%E5%86%8C/</id>
    <published>2021-05-27T07:12:06.019Z</published>
    <updated>2021-06-13T22:29:57.702Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-设置小数点位数"><a href="#1-设置小数点位数" class="headerlink" title="1. 设置小数点位数"></a>1. 设置小数点位数</h4><ol><li>~~~python<br>df[‘a’] = df[‘a’].round(decimals=2)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">2. ~~~python<br>   decimals &#x3D; pd.Series([1, 0, 2], index&#x3D;[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;])<br>   df.round(decimals)<br></code></pre></td></tr></table></figure></li></ol><div style="display:right"><img src="https://cdn.jsdelivr.net/gh/fole-del/img/tempImage1622100945784.gif" style="zoom:50%;float:right;display:block;z-index:99;" /></div><h4 id="2-pandas统计每行的个数"><a href="#2-pandas统计每行的个数" class="headerlink" title="2. pandas统计每行的个数"></a>2. pandas统计每行的个数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">zero_col_count = <span class="hljs-built_in">dict</span>(df[<span class="hljs-number">0</span>].value_counts())<span class="hljs-comment">#统计第0列元素的值的个数</span><br>three_row_count = <span class="hljs-built_in">dict</span>(df.loc[<span class="hljs-number">3</span>].value_counts())<span class="hljs-comment">#统计第3行元素的值的个数</span><br></code></pre></td></tr></table></figure><p><a href="https://mingsrc.xyz/player/">🎵我喜欢的音乐-Ming</a></p><h4 id="3-全局变量"><a href="#3-全局变量" class="headerlink" title="3. 全局变量"></a>3. 全局变量</h4><ol><li><p>global</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">global</span> i<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;第&#x27;</span>+i+<span class="hljs-string">&#x27;次计算&#x27;</span>)<br>    <span class="hljs-keyword">return</span> a+b<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(add(i,i+<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure></li></ol><h4 id="4-pandas中apply列的输入输出"><a href="#4-pandas中apply列的输入输出" class="headerlink" title="4. pandas中apply列的输入输出"></a>4. pandas中apply列的输入输出</h4><ol><li><p>1  to 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">judge</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>df[<span class="hljs-string">&#x27;new_col&#x27;</span>] = df[<span class="hljs-string">&#x27;exist_col&#x27;</span>].apply(judge)<br></code></pre></td></tr></table></figure></li><li><p>N to 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">judge</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">if</span>(x[<span class="hljs-string">&#x27;old_col_1&#x27;</span>] &lt; <span class="hljs-number">10</span> &amp;&amp; x[<span class="hljs-string">&#x27;old_col_2&#x27;</span>] == <span class="hljs-string">&#x27;boy&#x27;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;child&#x27;</span><br>df[<span class="hljs-string">&#x27;new_col&#x27;</span>] = df.apply(judge,axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></li><li><p>1 to N</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">就是针对输出的三行写三个函数即可，或者使用<span class="hljs-keyword">lambda</span>分别处理就行<br>df_test = pd.DataFrame([<br>    &#123;<span class="hljs-string">&#x27;dir&#x27;</span>: <span class="hljs-string">&#x27;/Users/uname1&#x27;</span>, <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">994933</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;dir&#x27;</span>: <span class="hljs-string">&#x27;/Users/uname2&#x27;</span>, <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">109338711</span>&#125;,<br>])<br><br>df_test[<span class="hljs-string">&#x27;size_kb&#x27;</span>] = df_test[<span class="hljs-string">&#x27;size&#x27;</span>].astype(<span class="hljs-built_in">int</span>).apply(<span class="hljs-keyword">lambda</span> x: locale.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%.1f&quot;</span>, x / <span class="hljs-number">1024.0</span>, grouping=<span class="hljs-literal">True</span>) + <span class="hljs-string">&#x27; KB&#x27;</span>)<br>df_test[<span class="hljs-string">&#x27;size_mb&#x27;</span>] = df_test[<span class="hljs-string">&#x27;size&#x27;</span>].astype(<span class="hljs-built_in">int</span>).apply(<span class="hljs-keyword">lambda</span> x: locale.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%.1f&quot;</span>, x / <span class="hljs-number">1024.0</span> ** <span class="hljs-number">2</span>, grouping=<span class="hljs-literal">True</span>) + <span class="hljs-string">&#x27; MB&#x27;</span>)<br>df_test[<span class="hljs-string">&#x27;size_gb&#x27;</span>] = df_test[<span class="hljs-string">&#x27;size&#x27;</span>].astype(<span class="hljs-built_in">int</span>).apply(<span class="hljs-keyword">lambda</span> x: locale.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;%.1f&quot;</span>, x / <span class="hljs-number">1024.0</span> ** <span class="hljs-number">3</span>, grouping=<span class="hljs-literal">True</span>) + <span class="hljs-string">&#x27; GB&#x27;</span>)<br><br>df_test<br><br><br>             <span class="hljs-built_in">dir</span>       size       size_kb   size_mb size_gb<br><span class="hljs-number">0</span>  /Users/uname1     <span class="hljs-number">994933</span>      <span class="hljs-number">971.6</span> KB    <span class="hljs-number">0.9</span> MB  <span class="hljs-number">0.0</span> GB<br><span class="hljs-number">1</span>  /Users/uname2  <span class="hljs-number">109338711</span>  <span class="hljs-number">106</span>,<span class="hljs-number">776.1</span> KB  <span class="hljs-number">104.3</span> MB  <span class="hljs-number">0.1</span> GB<br></code></pre></td></tr></table></figure></li></ol><h4 id="5-删除空值"><a href="#5-删除空值" class="headerlink" title="5. 删除空值"></a>5. 删除空值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cond = df.isnull().<span class="hljs-built_in">any</span>(axis = <span class="hljs-number">1</span>)<br>index = df[cond].index<br>df2 = df.drop(labels=index)<br></code></pre></td></tr></table></figure><h4 id="6-根据条件删除值"><a href="#6-根据条件删除值" class="headerlink" title="6. 根据条件删除值"></a>6. 根据条件删除值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cond = (df &lt; <span class="hljs-number">60</span>).<span class="hljs-built_in">any</span>(axis=<span class="hljs-number">1</span>)<br>index = df[cond].index<br>df3 = df.drop[labels=index]<br></code></pre></td></tr></table></figure><h4 id="7-规范化到-0-1"><a href="#7-规范化到-0-1" class="headerlink" title="7. 规范化到[0,1]"></a>7. 规范化到<code>[0,1]</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> preprocessing<br><span class="hljs-comment"># 规范化到 [0,1] 空间</span><br>min_max_scaler=preprocessing.MinMaxScaler()<br>car_x=min_max_scaler.fit_transform(car_x)<br>pd.DataFrame(car_x).to_csv(<span class="hljs-string">&#x27;temp.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(car_x)<br></code></pre></td></tr></table></figure><div style="display:box;float:right;"><img src="https://cdn.jsdelivr.net/gh/fole-del/img/tempImage1622112659415-1622112665508.gif" style="zoom:50%;" /></div><h4 id="8-pandas删除行、列"><a href="#8-pandas删除行、列" class="headerlink" title="8. pandas删除行、列"></a>8. pandas删除行、列</h4><ul><li>删除行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 按行名指定</span><br><span class="hljs-built_in">print</span>(df.drop(<span class="hljs-string">&#x27;Charlie&#x27;</span>, axis=<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(df.drop(<span class="hljs-string">&#x27;Charlie&#x27;</span>))<br><span class="hljs-built_in">print</span>(df.drop(index=<span class="hljs-string">&#x27;Charlie&#x27;</span>))<br><span class="hljs-comment">## 一次删除多行</span><br><span class="hljs-built_in">print</span>(df.drop([<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Dave&#x27;</span>, <span class="hljs-string">&#x27;Frank&#x27;</span>]))<br><span class="hljs-built_in">print</span>(df.drop(index=[<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Dave&#x27;</span>, <span class="hljs-string">&#x27;Frank&#x27;</span>]))<br><span class="hljs-comment"># 按行号指定</span><br><span class="hljs-built_in">print</span>(df.index[[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]])<br><span class="hljs-built_in">print</span>(df.drop(df.index[[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]]))<br><span class="hljs-built_in">print</span>(df.drop(index=df.index[[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]]))<br></code></pre></td></tr></table></figure><ul><li>删除列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#  按列名指定</span><br><span class="hljs-built_in">print</span>(df.drop(<span class="hljs-string">&#x27;state&#x27;</span>, axis=<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(df.drop(columns=<span class="hljs-string">&#x27;state&#x27;</span>))<br><span class="hljs-comment">## 一次删除多行</span><br><span class="hljs-built_in">print</span>(df.drop([<span class="hljs-string">&#x27;state&#x27;</span>, <span class="hljs-string">&#x27;point&#x27;</span>], axis=<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(df.drop(columns=[<span class="hljs-string">&#x27;state&#x27;</span>, <span class="hljs-string">&#x27;point&#x27;</span>]))<br><span class="hljs-comment"># 按列号指定</span><br><span class="hljs-built_in">print</span>(df.columns[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]])<br><span class="hljs-built_in">print</span>(df.drop(df.columns[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]], axis=<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(df.drop(columns=df.columns[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]]))<br></code></pre></td></tr></table></figure><ul><li>删除多行多列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(df.drop(index=[<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Dave&#x27;</span>, <span class="hljs-string">&#x27;Frank&#x27;</span>],<br>              columns=[<span class="hljs-string">&#x27;state&#x27;</span>, <span class="hljs-string">&#x27;point&#x27;</span>]))<br><br><span class="hljs-built_in">print</span>(df.drop(index=df.index[[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]],<br>              columns=df.columns[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]]))<br><br>df_org = df.copy()<br>df_org.drop(index=[<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Dave&#x27;</span>, <span class="hljs-string">&#x27;Frank&#x27;</span>],<br>            columns=[<span class="hljs-string">&#x27;state&#x27;</span>, <span class="hljs-string">&#x27;point&#x27;</span>], inplace=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><div style="display:flex;float:right"><img src="https://cdn.jsdelivr.net/gh/fole-del/img/tempImage1622194258914.gif" style="zoom:50%;border-radius:20px;" /></div><h4 id="9-删除缺失值的行"><a href="#9-删除缺失值的行" class="headerlink" title="9. 删除缺失值的行"></a>9. 删除缺失值的行</h4><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df = df[~df[<span class="hljs-string">&#x27;col&#x27;</span>].isnull()]<br></code></pre></td></tr></table></figure><h4 id="10-删除索引"><a href="#10-删除索引" class="headerlink" title="10. 删除索引"></a>10. 删除索引</h4><p>在读取的时候不要读取索引列！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">qs = pd.read_excel(<span class="hljs-string">&#x27;./2018-QS-World-University-Rankings-Top200.xlsx&#x27;</span>,index=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h4 id="11-matplotlib画图"><a href="#11-matplotlib画图" class="headerlink" title="11. matplotlib画图"></a>11. matplotlib画图</h4><p><a href="https://blog.csdn.net/ICERON/article/details/80069680">看这个就完事了</a></p><h4 id="12-你问我怎么添加图例"><a href="#12-你问我怎么添加图例" class="headerlink" title="12. 你问我怎么添加图例"></a>12. 你问我怎么添加图例</h4><h4 id="13-设置行的索引为一列"><a href="#13-设置行的索引为一列" class="headerlink" title="13. 设置行的索引为一列"></a>13. 设置行的索引为一列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data[<span class="hljs-string">&#x27;user_geohash&#x27;</span>] = data._stat_axis.values.tolist() <span class="hljs-comment"># 行名称</span><br></code></pre></td></tr></table></figure><h4 id="14-pandas修改列名"><a href="#14-pandas修改列名" class="headerlink" title="14. pandas修改列名"></a>14. pandas修改列名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df1.rename(columns=&#123;<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-string">&#x27;D&#x27;</span>&#125;,inplace=<span class="hljs-literal">True</span>) <br></code></pre></td></tr></table></figure><h4 id="15-pandas修改列顺序"><a href="#15-pandas修改列顺序" class="headerlink" title="15. pandas修改列顺序"></a>15. pandas修改列顺序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">order = [<span class="hljs-string">&#x27;date&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;high&#x27;</span>, <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-string">&#x27;volumefrom&#x27;</span>, <span class="hljs-string">&#x27;volumeto&#x27;</span>]<br>df = df[order]<br></code></pre></td></tr></table></figure><img src="https://gitee.com/fole-del/img/raw/master/20210614062947.png" alt="来了姐妹" style="zoom:50%;" /><h4 id="16-pandas获取指定列中某个值（范围）所属的行"><a href="#16-pandas获取指定列中某个值（范围）所属的行" class="headerlink" title="16. pandas获取指定列中某个值（范围）所属的行"></a>16. pandas获取指定列中某个值（范围）所属的行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df[df[<span class="hljs-string">&#x27;colName&#x27;</span>].isin([left,right])]<br></code></pre></td></tr></table></figure><h4 id="17-pandas合并表"><a href="#17-pandas合并表" class="headerlink" title="17. pandas合并表"></a>17. pandas合并表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">df.join()<br>pd.conact()<br>df.merge()<br></code></pre></td></tr></table></figure><h4 id="18-三目运算符"><a href="#18-三目运算符" class="headerlink" title="18. 三目运算符"></a>18. 三目运算符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = b <span class="hljs-keyword">if</span> b &gt; <span class="hljs-number">10</span> <span class="hljs-keyword">else</span> c<br></code></pre></td></tr></table></figure><h4 id="19-查看列名"><a href="#19-查看列名" class="headerlink" title="19. 查看列名"></a>19. 查看列名</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">~~~<br><br><span class="hljs-comment">#### 20. 添加说明</span><br><br></code></pre></td></tr></table></figure><p>plt.annotate(s=’’,xy = (6,30),xytext = (8,32),arrowprops={‘arrowstyle’:’-&gt;’})</p><pre><code></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python 读取Json文件</title>
    <link href="https://www.mingsrc.xyz/2021/05/25/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/python%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/ReadJson/"/>
    <id>https://www.mingsrc.xyz/2021/05/25/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/python%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/ReadJson/</id>
    <published>2021-05-25T01:22:20.935Z</published>
    <updated>2021-05-25T11:22:42.498Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="解析Json的常见代码"><a href="#解析Json的常见代码" class="headerlink" title="解析Json的常见代码"></a>解析Json的常见代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json <span class="hljs-comment"># 导入json解析需要的包</span><br></code></pre></td></tr></table></figure><h3 id="1-json-loads-读取字符串到json-object"><a href="#1-json-loads-读取字符串到json-object" class="headerlink" title="1. json.loads()读取字符串到json object"></a>1. <code>json.loads()</code>读取字符串到<code>json object</code></h3><p><code>json.loads()</code>是将<code>str\bytes\bytearray</code>等格式的文件读取到<code>json object</code>中。但是在使用的时候往往会因为一些小问题导致读取错误等。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs plain">Docstring:<br>Deserialize &#96;&#96;s&#96;&#96; (a &#96;&#96;str&#96;&#96;, &#96;&#96;bytes&#96;&#96; or &#96;&#96;bytearray&#96;&#96; instance<br>containing a JSON document) to a Python object.<br><br>&#96;&#96;object_hook&#96;&#96; is an optional function that will be called with the<br>result of any object literal decode (a &#96;&#96;dict&#96;&#96;). The return value of<br>&#96;&#96;object_hook&#96;&#96; will be used instead of the &#96;&#96;dict&#96;&#96;. This feature<br>can be used to implement custom decoders (e.g. JSON-RPC class hinting).<br><br>&#96;&#96;object_pairs_hook&#96;&#96; is an optional function that will be called with the<br>result of any object literal decoded with an ordered list of pairs.  The<br>return value of &#96;&#96;object_pairs_hook&#96;&#96; will be used instead of the &#96;&#96;dict&#96;&#96;.<br>This feature can be used to implement custom decoders.  If &#96;&#96;object_hook&#96;&#96;<br>is also defined, the &#96;&#96;object_pairs_hook&#96;&#96; takes priority.<br><br>&#96;&#96;parse_float&#96;&#96;, if specified, will be called with the string<br>of every JSON float to be decoded. By default this is equivalent to<br>float(num_str). This can be used to use another datatype or parser<br>for JSON floats (e.g. decimal.Decimal).<br><br>&#96;&#96;parse_int&#96;&#96;, if specified, will be called with the string<br>of every JSON int to be decoded. By default this is equivalent to<br>int(num_str). This can be used to use another datatype or parser<br>for JSON integers (e.g. float).<br><br>&#96;&#96;parse_constant&#96;&#96;, if specified, will be called with one of the<br>following strings: -Infinity, Infinity, NaN.<br>This can be used to raise an exception if invalid JSON numbers<br>are encountered.<br><br>To use a custom &#96;&#96;JSONDecoder&#96;&#96; subclass, specify it with the &#96;&#96;cls&#96;&#96;<br>kwarg; otherwise &#96;&#96;JSONDecoder&#96;&#96; is used.<br></code></pre></td></tr></table></figure></blockquote><p><b><span style="class: faa-bounce animated-hover;border-bottom: 5px solid #8F81EF;"><a href="https://pan.baidu.com/s/1omzU65YMpJr0jPPFItZ7SA">data.json文件链接</a></span></b></p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1omzU65YMpJr0jPPFItZ7SA">https://pan.baidu.com/s/1omzU65YMpJr0jPPFItZ7SA</a><br>提取码：ysly<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><p>上述文件相对常见的Json文件来说，还是有点区别的，用python的json库操作相对有点困难。</p><p>报错<code>Expection \，delimiter</code>，看了好些解决办法仍然没能成功解决：<i id='1'></i></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 常见的Json读取</span><br>JsonText = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.json&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-comment"># 打开data.json</span><br>Json = JsonText.readlines() <span class="hljs-comment"># 把json中的文件全部读取到Json对象中。</span><br><br><br><br><span class="hljs-comment"># 读取上述data.json为json对象的代码</span><br>list_data = <span class="hljs-built_in">list</span>()<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_Json_file</span>(<span class="hljs-params">i,x</span>):</span><br>    <span class="hljs-comment"># 返回有效的Json字段</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&quot;</span> + i + <span class="hljs-string">&quot;行:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(x)<br>    <span class="hljs-comment"># 关于expectint的报错，我这处理就是但凡报错，直接返回空字段，如果你有别的解决办法，一定指教一下，不胜感激</span><br>    <span class="hljs-keyword">try</span>:<br>        JsonStr = x.replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>).replace(<span class="hljs-string">&#x27;/ &#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).replace(<span class="hljs-string">&#x27;, &#x27;</span>,<span class="hljs-string">&#x27;,&#x27;</span>)<br>        ret = json.loads(JsonStr,strict=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">except</span> json.JSONDecodeError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span><br>        <br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;categories&#x27;</span> <span class="hljs-keyword">in</span> ret):<br>        <span class="hljs-built_in">print</span>(ret[<span class="hljs-string">&#x27;categories&#x27;</span>])<br>        <span class="hljs-keyword">return</span> ret[<span class="hljs-string">&#x27;categories&#x27;</span>]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span><br>    <br>list_data = <span class="hljs-built_in">list</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(Json)):<br>list_data.append(read_Json_file(<span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>),Json[i]))<br></code></pre></td></tr></table></figure><h3 id="2-常见错误及解决办法"><a href="#2-常见错误及解决办法" class="headerlink" title="2. 常见错误及解决办法"></a>2. 常见错误及解决办法</h3><div class="tabs" id="tab-hide"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab-hide-1">描述</button></li><li class="tab"><button type="button" data-href="#tab-hide-2">解决办法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab-hide-1"><p>Json文件的单双引号不对，如下所示Python中的一个<code>str</code>，Json中的<code>Key值</code>都是用单引号<code>&#39;</code>括起来的，就会报错<code>Expecting property name enclosed in double quotes</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;&#123;&#x27;asin&#x27;: &#x27;0000032069&#x27;, &#x27;title&#x27;: &#x27;Adult Ballet Tutu Cheetah Pink&#x27;, &#x27;price&#x27;: 7.89, &#x27;imUrl&#x27;: &#x27;http://ecx.images-amazon.com/images/I/51EzU6quNML._SX342_.jpg&#x27;, &#x27;related&#x27;: &#123;&#x27;also_bought&#x27;: [&#x27;0000032050&#x27;, &#x27;B00D0DJAEG&#x27;, &#x27;0000032042&#x27;, &#x27;B00D0F450I&#x27;, &#x27;B00D2JTMS2&#x27;, &#x27;B00D0FDUAY&#x27;, &#x27;B00D2JSRFQ&#x27;, &#x27;0000032034&#x27;, &#x27;B00D0D5F6S&#x27;, &#x27;B00D2JRWWA&#x27;, &#x27;B00D0FIIJM&#x27;, &#x27;B00D0FCQQI&#x27;, &#x27;B00EXVN9PU&#x27;, &#x27;B0041EOTJO&#x27;, &#x27;B004PYEE8G&#x27;, &#x27;B001GTKPDQ&#x27;, &#x27;B00EON0SJ2&#x27;, &#x27;B005HMHOQ4&#x27;, &#x27;B002XZMGGQ&#x27;], &#x27;also_viewed&#x27;: [&#x27;B00D0F450I&#x27;, &#x27;0000032050&#x27;, &#x27;B00D2JTMS2&#x27;, &#x27;0000032042&#x27;, &#x27;B004PYEE8G&#x27;, &#x27;B00JHNSNSM&#x27;, &#x27;B00D0DJAEG&#x27;, &#x27;B00D2JSRFQ&#x27;, &#x27;B00D0FCQQI&#x27;, &#x27;B00D2JRWWA&#x27;, &#x27;B003AVNY6I&#x27;, &#x27;B0071KR2LC&#x27;, &#x27;B00GOR07RE&#x27;, &#x27;B00D0FIIJM&#x27;, &#x27;B005F50FXC&#x27;, &#x27;B0079MCIMU&#x27;, &#x27;B00D0FDUAY&#x27;, &#x27;B00H3RYN3I&#x27;, &#x27;B005C4Y4F6&#x27;, &#x27;B007IEFT84&#x27;, &#x27;B00D0D5F6S&#x27;, &#x27;B002BZX8Z6&#x27;, &#x27;B00JHONN1S&#x27;, &#x27;B008F0SU0Y&#x27;, &#x27;B00FNNFXAG&#x27;, &#x27;B007R2RM8W&#x27;, &#x27;B007VM3AMK&#x27;, &#x27;B00C0PLENA&#x27;, &#x27;B00BJGG6VG&#x27;, &#x27;B00E1YRI4C&#x27;, &#x27;B00IIK61WA&#x27;, &#x27;B009UC638W&#x27;, &#x27;B00KZN6RVI&#x27;, &#x27;B00CSFEENY&#x27;, &#x27;B002GZGI4E&#x27;, &#x27;B00HSOJJ94&#x27;, &#x27;B00LIPP4VG&#x27;, &#x27;B009RXWNSI&#x27;, &#x27;B00E87F196&#x27;, &#x27;B005HMHOQY&#x27;, &#x27;B00J6S9MSS&#x27;, &#x27;0000032034&#x27;, &#x27;B00CJQGNJK&#x27;, &#x27;B008FCA0F0&#x27;, &#x27;B0056LG7GY&#x27;, &#x27;B00DPQWCZ2&#x27;, &#x27;B00I3PV0US&#x27;, &#x27;B00KZN6IVW&#x27;, &#x27;B0054TBWKO&#x27;, &#x27;B00I2S01I8&#x27;, &#x27;B00BXF12P8&#x27;, &#x27;B00GVHU678&#x27;, &#x27;B005NWENGC&#x27;, &#x27;B003AVKOP2&#x27;, &#x27;B00JK8MQ4Q&#x27;, &#x27;B00FZIMVQS&#x27;, &#x27;B008BB19VE&#x27;, &#x27;B00GTEXPOE&#x27;, &#x27;B009WPT2RQ&#x27;, &#x27;B00E37SBBG&#x27;], &#x27;bought_together&#x27;: [&#x27;0000032050&#x27;, &#x27;B00D0DJAEG&#x27;, &#x27;0000032042&#x27;, &#x27;B00D0F450I&#x27;]&#125;, &#x27;brand&#x27;: &#x27;BubuBibi&#x27;, &#x27;categories&#x27;: [[&#x27;Sports &amp; Outdoors&#x27;, &#x27;Other Sports&#x27;, &#x27;Dance&#x27;, &#x27;Clothing&#x27;, &#x27;Girls&#x27;, &#x27;Skirts&#x27;]]&#125;&quot;</span><br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab-hide-2"><p>替换掉<code>str</code>中的<code>&#39;</code>为<code>&quot;</code>，替换<code>/_（空格）</code>为<code>/</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">text.replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>).replace(<span class="hljs-string">&#x27;/ &#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)<br></code></pre></td></tr></table></figure><p>再接着读取就不会报错了！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">JsonValue[<span class="hljs-string">&#x27;categories&#x27;</span>]<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[[&#x27;Sports &amp; Outdoors&#x27;, &#x27;Other Sports&#x27;, &#x27;Dance&#x27;, &#x27;Clothing&#x27;, &#x27;Girls&#x27;, &#x27;Skirts&#x27;]]<br></code></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="tab-hide1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab-hide1-1">描述</button></li><li class="tab"><button type="button" data-href="#tab-hide1-2">问题解决</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab-hide1-1"><p>这个问题真的被搞得头疼，到目前还没解决，<code>Json</code>字段是没有问题的，但是<code>loads()函数</code>就是会报错</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab-hide1-2"><p><a href="#1">解决办法</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">关于python中Json解析的相关操作以及相关错误</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    <category term="应用实例" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    
    
    <category term="python应用实例" scheme="https://www.mingsrc.xyz/tags/python%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>根据地名获取经纬度</title>
    <link href="https://www.mingsrc.xyz/2021/05/23/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/python%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/%E6%A0%B9%E6%8D%AE%E5%9C%B0%E5%90%8D%E8%8E%B7%E5%8F%96%E7%BB%8F%E7%BA%AC%E5%BA%A6/"/>
    <id>https://www.mingsrc.xyz/2021/05/23/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/python%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/%E6%A0%B9%E6%8D%AE%E5%9C%B0%E5%90%8D%E8%8E%B7%E5%8F%96%E7%BB%8F%E7%BA%AC%E5%BA%A6/</id>
    <published>2021-05-23T01:07:37.177Z</published>
    <updated>2021-05-25T10:31:21.706Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本文是通过调用百度开放平台的API实现的经纬度查询。因此在使用前需要你去注册一个应用。</p></blockquote><h1 id="相关步骤"><a href="#相关步骤" class="headerlink" title="相关步骤"></a>相关步骤</h1><ol><li>打开链接</li></ol><p><a href="https://lbsyun.baidu.com/apiconsole/key#/home">百度地图开放平台</a></p><ol start="2"><li>创建应用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210523093840891.png" alt="创建应用"></p><ol start="3"><li>获取AK</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210523094102002.png" alt="获取AK"></p><ol start="4"><li>替换程序中的AK，运行就能得到返回的JSON字符串</li></ol><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><ol><li>数据准备</li></ol><p>CSV文件中有一列是<code>city</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame()<br>df = pd.read_csv(<span class="hljs-string">r&#x27;./city.csv&#x27;</span>,encoding=<span class="hljs-string">&quot;gbk&quot;</span>)<br>df[<span class="hljs-string">&#x27;city&#x27;</span>]<br></code></pre></td></tr></table></figure><p>得到的数据如下所示，总共有一百条：</p><pre><code>0      昆山市1      江阴市2     张家港市3      晋江市4      常熟市      ... 95     福安市96     射阳县97     邹平县98     海城市99     青州市Name: city, Length: 100, dtype: object</code></pre><div><style scoped>.dataframe tbody tr th:only-of-type { vertical-align: middle;}    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_geohash</th>      <th>num</th>      <th>city</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>94ek6ke</td>      <td>1028</td>      <td>昆山市</td>    </tr>    <tr>      <th>1</th>      <td>94ek6lj</td>      <td>980</td>      <td>江阴市</td>    </tr>    <tr>      <th>2</th>      <td>94ek6lw</td>      <td>919</td>      <td>张家港市</td>    </tr>    <tr>      <th>3</th>      <td>94ek6kn</td>      <td>908</td>      <td>晋江市</td>    </tr>    <tr>      <th>4</th>      <td>94ek6l5</td>      <td>517</td>      <td>常熟市</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>95</th>      <td>9q0ltaw</td>      <td>243</td>      <td>福安市</td>    </tr>    <tr>      <th>96</th>      <td>99s4avh</td>      <td>242</td>      <td>射阳县</td>    </tr>    <tr>      <th>97</th>      <td>9519pwt</td>      <td>240</td>      <td>邹平县</td>    </tr>    <tr>      <th>98</th>      <td>94jrlp3</td>      <td>240</td>      <td>海城市</td>    </tr>    <tr>      <th>99</th>      <td>946hodd</td>      <td>240</td>      <td>青州市</td>    </tr>  </tbody></table><p>100 rows × 3 columns</p></div><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">showLocation&amp;&amp;showLocation(&#123;&quot;status&quot;:0,&quot;result&quot;:&#123;&quot;location&quot;:&#123;&quot;lng&quot;:120.98745249794995,&quot;lat&quot;:31.390863425081866&#125;,&quot;precise&quot;:0,&quot;confidence&quot;:20,&quot;comprehension&quot;:100,&quot;level&quot;:&quot;区县&quot;&#125;&#125;)<br>showLocation&amp;&amp;showLocation(&#123;&quot;status&quot;:0,&quot;result&quot;:&#123;&quot;location&quot;:&#123;&quot;lng&quot;:120.29156800752115,&quot;lat&quot;:31.926044909769045&#125;,&quot;precise&quot;:0,&quot;confidence&quot;:20,&quot;comprehension&quot;:100,&quot;level&quot;:&quot;区县&quot;&#125;&#125;)<br>showLocation&amp;&amp;showLocation(&#123;&quot;status&quot;:0,&quot;result&quot;:&#123;&quot;location&quot;:<br></code></pre></td></tr></table></figure><hr><p>因为使用的是API，因此得到是上述的Json字符串。</p><p>代码如下：</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc_ll</span>(<span class="hljs-params">x</span>):</span><br>    Post_url = <span class="hljs-string">&quot;http://api.map.baidu.com/geocoding/v3/?address=&quot;</span> + x + <span class="hljs-string">&quot;&amp;output=json&amp;ak=（百度API开放平台获取的AK）&amp;callback=showLocation&quot;</span> <span class="hljs-comment">#自己想办法弄到key</span><br>    Post_data = &#123;<br>        <span class="hljs-string">&#x27;address&#x27;</span>: x<br>    &#125;<br>    Text = se.post(Post_url, data=Post_data).text.replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>).replace(<span class="hljs-string">&#x27;/ &#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">27</span>:-<span class="hljs-number">1</span>] <span class="hljs-comment"># 提取为Json格式，去掉‘showLocation&amp;&amp;showLocation()’这些额外的字符</span><br>    jsonValue = json.loads(Text) <span class="hljs-comment"># 转化为Json对象</span><br>    <span class="hljs-comment"># print(jsonValue) # 打印Json值</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;result&#x27;</span> <span class="hljs-keyword">in</span> jsonValue):<br>        <span class="hljs-built_in">print</span>(jsonValue[<span class="hljs-string">&#x27;result&#x27;</span>][<span class="hljs-string">&#x27;location&#x27;</span>][<span class="hljs-string">&#x27;lng&#x27;</span>])<br>        <span class="hljs-keyword">return</span> [jsonValue[<span class="hljs-string">&#x27;result&#x27;</span>][<span class="hljs-string">&#x27;location&#x27;</span>][<span class="hljs-string">&#x27;lng&#x27;</span>],jsonValue[<span class="hljs-string">&#x27;result&#x27;</span>][<span class="hljs-string">&#x27;location&#x27;</span>][<span class="hljs-string">&#x27;lat&#x27;</span>]]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span><br>    <br>address = df[<span class="hljs-string">&#x27;city&#x27;</span>].apply(calc_ll)<br>se = requests.session()<br></code></pre></td></tr></table></figure><pre><code>&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.98745249794995, &#39;lat&#39;: 31.390863425081864&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.98745249794995&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.29156800752115, &#39;lat&#39;: 31.926044909769043&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.29156800752115&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.56155363871446, &#39;lat&#39;: 31.88114053634028&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.56155363871446&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 118.55843052000408, &#39;lat&#39;: 24.787824575144548&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;118.55843052000408&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.75949588665195, &#39;lat&#39;: 31.65953827674108&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.75949588665195&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 121.27259613631863, &#39;lat&#39;: 30.175256610720446&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;121.27259613631863&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.83160603216115, &#39;lat&#39;: 31.342956624267874&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.83160603216115&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 113.08755916595523, &#39;lat&#39;: 28.251818487944462&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;113.08755916595523&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.08158099305928, &#39;lat&#39;: 29.31114987541007&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.08158099305928&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 121.13559529350024, &#39;lat&#39;: 31.464599352977785&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;121.13559529350024&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 113.64939823850789, &#39;lat&#39;: 28.169832216070507&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;113.64939823850789&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 110.50542966826288, &#39;lat&#39;: 38.848544495220935&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;110.50542966826288&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 121.18843649817478, &#39;lat&#39;: 31.87361172603022&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;121.18843649817478&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 118.80341550029883, &#39;lat&#39;: 25.03694981503913&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;118.80341550029883&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.25340833196779, &#39;lat&#39;: 29.714934649194955&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.25340833196779&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 106.4075265551776, &#39;lat&#39;: 27.797752158542853&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;106.4075265551776&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 118.39257197205464, &#39;lat&#39;: 24.966362350467605&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;118.39257197205464&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 112.55840691564445, &#39;lat&#39;: 28.284104536209348&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;112.55840691564445&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.57946558109177, &#39;lat&#39;: 32.37785148610902&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.57946558109177&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.9925018561657, &#39;lat&#39;: 28.118179995228274&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.9925018561657&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.39046524748903, &#39;lat&#39;: 25.72634329903456&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.39046524748903&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 121.16058507482123, &#39;lat&#39;: 30.042734639570824&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;121.16058507482123&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 121.66347374677267, &#39;lat&#39;: 31.81423284964318&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;121.66347374677267&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.03953537126692, &#39;lat&#39;: 36.27034908804922&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.03953537126692&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.47443309577918, &#39;lat&#39;: 32.53919574424043&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.47443309577918&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.61250060471407, &#39;lat&#39;: 32.01592027416992&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.61250060471407&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 121.39258889457587, &#39;lat&#39;: 28.377655489850408&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;121.39258889457587&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.05859939046078, &#39;lat&#39;: 32.17747402371212&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.05859939046078&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.48536852807433, &#39;lat&#39;: 37.65255512549617&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.48536852807433&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 121.19243791023843, &#39;lat&#39;: 32.33587288615511&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;121.19243791023843&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 115.95046017276752, &#39;lat&#39;: 28.551604186108275&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;115.95046017276752&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.68656506738283, &#39;lat&#39;: 30.51792376977565&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.68656506738283&#123;&#39;status&#39;: 1, &#39;msg&#39;: &#39;Internal Service Error:无相关结果&#39;, &#39;results&#39;: []&#125;&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.66158218606775, &#39;lat&#39;: 27.783950736231652&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.66158218606775&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.28353203592053, &#39;lat&#39;: 31.988170075210594&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.28353203592053&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.57154315530762, &#39;lat&#39;: 30.63631118771037&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.57154315530762&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 118.0191233013022, &#39;lat&#39;: 34.34464551932591&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;118.0191233013022&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 118.70645736056483, &#39;lat&#39;: 40.00418392493125&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;118.70645736056483&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 104.03757322351338, &#39;lat&#39;: 30.648477494759213&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 75, &#39;comprehension&#39;: 0, &#39;level&#39;: &#39;购物&#39;&#125;&#125;104.03757322351338&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.32653706475246, &#39;lat&#39;: 32.872716312488244&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.32653706475246&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 122.49250463073764, &#39;lat&#39;: 37.171317939253235&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;122.49250463073764&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 118.65451902647484, &#39;lat&#39;: 24.737665160882703&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;118.65451902647484&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 121.98563754334361, &#39;lat&#39;: 39.63274074738802&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;121.98563754334361&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.85751406137442, &#39;lat&#39;: 32.917824213889254&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.85751406137442&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 113.44960935856369, &#39;lat&#39;: 30.33358775114635&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;城市&#39;&#125;&#125;113.44960935856369&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 111.24639840545701, &#39;lat&#39;: 39.87054026503683&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;111.24639840545701&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.46561561653884, &#39;lat&#39;: 32.787147020528316&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.46561561653884&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 112.9054740908161, &#39;lat&#39;: 30.40835793241892&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;城市&#39;&#125;&#125;112.9054740908161&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 117.01440416129005, &#39;lat&#39;: 35.40752093244999&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;117.01440416129005&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 117.16455781372443, &#39;lat&#39;: 31.712962132716886&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;117.16455781372443&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 113.02843100495258, &#39;lat&#39;: 34.754096888696935&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;113.02843100495258&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 116.94258562390337, &#39;lat&#39;: 34.76515195541547&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;116.94258562390337&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.19146705795117, &#39;lat&#39;: 32.27809048316069&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.19146705795117&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 118.7974153748082, &#39;lat&#39;: 36.86192174647094&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;118.7974153748082&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 113.49522360557991, &#39;lat&#39;: 34.14826652246125&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;113.49522360557991&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 117.17256521920983, &#39;lat&#39;: 35.120034809573916&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;117.17256521920983&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.13848201812112, &#39;lat&#39;: 26.156035214577336&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.13848201812112&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 109.75459043995566, &#39;lat&#39;: 39.570092815192666&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;109.75459043995566&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 113.74643447195358, &#39;lat&#39;: 34.40176637910559&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;113.74643447195358&#123;&#39;status&#39;: 1, &#39;msg&#39;: &#39;Internal Service Error:无相关结果&#39;, &#39;results&#39;: []&#125;&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 112.77847075950989, &#39;lat&#39;: 32.13472991431875&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;112.77847075950989&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 86.18149430993829, &#39;lat&#39;: 41.7323732214122&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;86.18149430993829&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 121.43643177294247, &#39;lat&#39;: 29.294317441105566&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;121.43643177294247&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.91749832197264, &#39;lat&#39;: 31.0325793268347&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.91749832197264&#123;&#39;status&#39;: 1, &#39;msg&#39;: &#39;Internal Service Error:无相关结果&#39;, &#39;results&#39;: []&#125;&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 112.60858070620743, &#39;lat&#39;: 35.072907226846525&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;城市&#39;&#125;&#125;112.60858070620743&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 118.36153652101795, &#39;lat&#39;: 34.37561095463685&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;118.36153652101795&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.9944142939757, &#39;lat&#39;: 36.78269225408944&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.9944142939757&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 113.39739094909922, &#39;lat&#39;: 34.54589798344474&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;113.39739094909922&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.44060165264568, &#39;lat&#39;: 37.36113714256612&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.44060165264568&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 111.456515837124, &#39;lat&#39;: 30.38440427431352&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;111.456515837124&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.94859307736998, &#39;lat&#39;: 37.18263660907421&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.94859307736998&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.17543320290359, &#39;lat&#39;: 31.950923490521372&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.17543320290359&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.4335951222883, &#39;lat&#39;: 27.523066788446513&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.4335951222883&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.2484219279141, &#39;lat&#39;: 29.295861065150863&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.2484219279141&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 114.21051607638233, &#39;lat&#39;: 36.70248828627979&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;114.21051607638233&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 122.97449548262718, &#39;lat&#39;: 39.686956078878055&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;122.97449548262718&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.41640221866636, &#39;lat&#39;: 36.00200885807568&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.41640221866636&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 117.77460624826666, &#39;lat&#39;: 35.9146198665876&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;117.77460624826666&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.26472938795023, &#39;lat&#39;: 23.0309091042802&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 25, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;乡镇&#39;&#125;&#125;120.26472938795023&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 116.1724489811672, &#39;lat&#39;: 23.30363452186039&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;116.1724489811672&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 114.72642585137605, &#39;lat&#39;: 22.991443112002415&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;114.72642585137605&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 114.98643626401979, &#39;lat&#39;: 30.10166780010339&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;114.98643626401979&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 104.47858183931757, &#39;lat&#39;: 25.715651258076416&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;104.47858183931757&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 121.23851297084417, &#39;lat&#39;: 28.14186298682908&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;121.23851297084417&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 116.45556614759954, &#39;lat&#39;: 33.93480147585089&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;116.45556614759954&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 116.1056050954973, &#39;lat&#39;: 38.717348630774524&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;116.1056050954973&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 117.17356009256213, &#39;lat&#39;: 32.483722623763164&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;117.17356009256213&#123;&#39;status&#39;: 1, &#39;msg&#39;: &#39;Internal Service Error:无相关结果&#39;, &#39;results&#39;: []&#125;&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 121.02257525525401, &#39;lat&#39;: 30.682240998057836&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;121.02257525525401&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 118.41349864392043, &#39;lat&#39;: 37.059638498906146&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;118.41349864392043&#123;&#39;status&#39;: 1, &#39;msg&#39;: &#39;Internal Service Error:无相关结果&#39;, &#39;results&#39;: []&#125;&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.93251060584033, &#39;lat&#39;: 30.83712219382042&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.93251060584033&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 114.29657265142765, &#39;lat&#39;: 23.178805592432578&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;114.29657265142765&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 103.72553503682038, &#39;lat&#39;: 36.10975375497273&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;103.72553503682038&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 119.65440636047963, &#39;lat&#39;: 27.094323508059915&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;119.65440636047963&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 120.26444564891948, &#39;lat&#39;: 33.78101359213001&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;120.26444564891948&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 117.74947848721935, &#39;lat&#39;: 36.8700322166973&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;117.74947848721935&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 109.12452136754654, &#39;lat&#39;: 21.481065838235963&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;109.12452136754654&#123;&#39;status&#39;: 0, &#39;result&#39;: &#123;&#39;location&#39;: &#123;&#39;lng&#39;: 118.48653672086745, &#39;lat&#39;: 36.690416508705376&#125;, &#39;precise&#39;: 0, &#39;confidence&#39;: 20, &#39;comprehension&#39;: 100, &#39;level&#39;: &#39;区县&#39;&#125;&#125;118.48653672086745</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">address<br></code></pre></td></tr></table></figure><pre><code>0     [120.98745249794995, 31.390863425081864]1     [120.29156800752115, 31.926044909769043]2      [120.56155363871446, 31.88114053634028]3     [118.55843052000408, 24.787824575144548]4      [120.75949588665195, 31.65953827674108]                        ...                   95    [119.65440636047963, 27.094323508059915]96     [120.26444564891948, 33.78101359213001]97      [117.74947848721935, 36.8700322166973]98    [109.12452136754654, 21.481065838235963]99    [118.48653672086745, 36.690416508705376]Name: city, Length: 100, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">address<br></code></pre></td></tr></table></figure><pre><code>1     [120.29156800752115, 31.926044909769043]2      [120.56155363871446, 31.88114053634028]3     [118.55843052000408, 24.787824575144548]4      [120.75949588665195, 31.65953827674108]5     [121.27259613631863, 30.175256610720446]                        ...                   94     [103.72553503682038, 36.10975375497273]95    [119.65440636047963, 27.094323508059915]96     [120.26444564891948, 33.78101359213001]97      [117.74947848721935, 36.8700322166973]98    [109.12452136754654, 21.481065838235963]Name: city, Length: 98, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">&#x27;pos&#x27;</span>] = df1 <span class="hljs-comment"># 保存到df文件中</span><br></code></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }    .dataframe tbody tr th {        vertical-align: top;    }    .dataframe thead th {        text-align: right;    }</style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>user_geohash</th>      <th>num</th>      <th>city</th>      <th>pos</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>94ek6ke</td>      <td>1028</td>      <td>昆山市</td>      <td>[120.98745249794995, 31.390863425081864]</td>    </tr>    <tr>      <th>1</th>      <td>94ek6lj</td>      <td>980</td>      <td>江阴市</td>      <td>[120.29156800752115, 31.926044909769043]</td>    </tr>    <tr>      <th>2</th>      <td>94ek6lw</td>      <td>919</td>      <td>张家港市</td>      <td>[120.56155363871446, 31.88114053634028]</td>    </tr>    <tr>      <th>3</th>      <td>94ek6kn</td>      <td>908</td>      <td>晋江市</td>      <td>[118.55843052000408, 24.787824575144548]</td>    </tr>    <tr>      <th>4</th>      <td>94ek6l5</td>      <td>517</td>      <td>常熟市</td>      <td>[120.75949588665195, 31.65953827674108]</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>95</th>      <td>9q0ltaw</td>      <td>243</td>      <td>福安市</td>      <td>[119.65440636047963, 27.094323508059915]</td>    </tr>    <tr>      <th>96</th>      <td>99s4avh</td>      <td>242</td>      <td>射阳县</td>      <td>[120.26444564891948, 33.78101359213001]</td>    </tr>    <tr>      <th>97</th>      <td>9519pwt</td>      <td>240</td>      <td>邹平县</td>      <td>[117.74947848721935, 36.8700322166973]</td>    </tr>    <tr>      <th>98</th>      <td>94jrlp3</td>      <td>240</td>      <td>海城市</td>      <td>[109.12452136754654, 21.481065838235963]</td>    </tr>    <tr>      <th>99</th>      <td>946hodd</td>      <td>240</td>      <td>青州市</td>      <td>[118.48653672086745, 36.690416508705376]</td>    </tr>  </tbody></table><p>100 rows × 4 columns</p></div><h2 id="计算两者之间的距离"><a href="#计算两者之间的距离" class="headerlink" title="计算两者之间的距离"></a>计算两者之间的距离</h2><p>在得到相关地名的经纬度之后，进一步就是根据经纬度，输入的是度数（°）</p><hr><p>根据经纬度计算实际距离的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br>Earth_Radius=<span class="hljs-number">6378.137</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sin_square</span>(<span class="hljs-params">a</span>):</span><br>    result=math.sin(a)<br>    <span class="hljs-keyword">return</span> result*result<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rad</span>(<span class="hljs-params">ang</span>):</span><br>    <span class="hljs-keyword">return</span> math.pi*ang/<span class="hljs-number">180.0</span><br><span class="hljs-comment">#a,b参数是数组</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">distance_calculate</span>(<span class="hljs-params">a,b</span>):</span><br>    lata,lnga=a[<span class="hljs-number">0</span>],a[<span class="hljs-number">1</span>]<br>    latb,lngb=b[<span class="hljs-number">0</span>],b[<span class="hljs-number">1</span>]<br><br>    radlata,radlnga=rad(lata),rad(lnga)<br>    radlatb, radlngb = rad(latb), rad(lngb)<br><br>    <span class="hljs-comment">#纬度差</span><br>    minus_a=radlata-radlatb<br>    <span class="hljs-comment">#经度差</span><br>    minus_b=radlnga-radlngb<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*math.asin( math.sqrt(sin_square(minus_a/<span class="hljs-number">2</span>) + math.cos(radlata)*math.cos(radlatb)*sin_square(minus_b/<span class="hljs-number">2</span>)))*Earth_Radius<br><br><span class="hljs-comment">#坐标测试</span><br><span class="hljs-comment">#google</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1000</span>*distance_calculate((<span class="hljs-number">30.26848247</span>,<span class="hljs-number">119.9499548338</span>),(<span class="hljs-number">30.2688658749</span>,<span class="hljs-number">119.9628533571</span>)))<br><span class="hljs-comment">#baidu</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1000</span>*distance_calculate((<span class="hljs-number">30.274671</span>,<span class="hljs-number">119.969392</span>),(<span class="hljs-number">30.274261</span>,<span class="hljs-number">119.956631</span>)))<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    <category term="应用实例" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    
    
    <category term="python应用实例" scheme="https://www.mingsrc.xyz/tags/python%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>numpy使用案例</title>
    <link href="https://www.mingsrc.xyz/2021/05/21/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/numpy%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.mingsrc.xyz/2021/05/21/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/numpy%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-21T02:57:23.946Z</published>
    <updated>2021-05-21T02:59:02.783Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/"/>
    
    <category term="python数据分析" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/python/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
    <category term="数据分析" scheme="https://www.mingsrc.xyz/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="numpy" scheme="https://www.mingsrc.xyz/tags/numpy/"/>
    
    <category term="python" scheme="https://www.mingsrc.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>HTML图片位置相关设置</title>
    <link href="https://www.mingsrc.xyz/2021/05/17/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML/%E5%9B%BE%E7%89%87%E7%9B%B8%E5%85%B3/"/>
    <id>https://www.mingsrc.xyz/2021/05/17/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML/%E5%9B%BE%E7%89%87%E7%9B%B8%E5%85%B3/</id>
    <published>2021-05-17T03:14:40.988Z</published>
    <updated>2021-05-28T10:44:45.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML-img标签"><a href="#HTML-img标签" class="headerlink" title="HTML  img标签"></a>HTML  img标签</h1><h2 id="1-相关属性"><a href="#1-相关属性" class="headerlink" title="1. 相关属性"></a>1. 相关属性</h2><ul><li><input disabled="" type="checkbox"> </li></ul><h2 id="2-CSS案例"><a href="#2-CSS案例" class="headerlink" title="2. CSS案例"></a>2. CSS案例</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<span class="hljs-selector-class">.b-game-card</span>&#123;<span class="hljs-attribute">position</span>:relative;<span class="hljs-attribute">z-index</span>:<span class="hljs-number">1</span>;<span class="hljs-attribute">width</span>:<span class="hljs-number">50%</span>;<span class="hljs-attribute">padding-bottom</span>:<span class="hljs-number">150%</span>;<span class="hljs-attribute">perspective</span>:<span class="hljs-number">1000px</span>&#125;<span class="hljs-selector-class">.b-game-card</span>&#123;<span class="hljs-attribute">position</span>:relative;<span class="hljs-attribute">z-index</span>:<span class="hljs-number">1</span>;<span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;<span class="hljs-attribute">padding-bottom</span>:<span class="hljs-number">150%</span>;<span class="hljs-attribute">perspective</span>:<span class="hljs-number">1000px</span>&#125;<span class="hljs-selector-class">.b-game-card__cover</span>&#123;<span class="hljs-attribute">position</span>:absolute;<span class="hljs-attribute">z-index</span>:<span class="hljs-number">1</span>;<span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;<span class="hljs-attribute">overflow</span>:hidden;<span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">120deg</span>,<span class="hljs-number">#f6d365</span> <span class="hljs-number">0</span>,<span class="hljs-number">#fda085</span> <span class="hljs-number">100%</span>);<span class="hljs-attribute">background-size</span>:cover;<span class="hljs-attribute">perspective-origin</span>:<span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<span class="hljs-attribute">transform-style</span>:preserve-<span class="hljs-number">3</span>d;<span class="hljs-attribute">transform-origin</span>:top center;will-change:transform;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">skewX</span>(<span class="hljs-number">0.001deg</span>);<span class="hljs-attribute">transition</span>:transform .<span class="hljs-number">35s</span> ease-in-out&#125;<span class="hljs-selector-class">.b-game-card__cover</span><span class="hljs-selector-pseudo">::after</span>&#123;<span class="hljs-attribute">display</span>:block;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-attribute">position</span>:absolute;<span class="hljs-attribute">z-index</span>:<span class="hljs-number">100</span>;<span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">120%</span>;<span class="hljs-attribute">background</span>:<span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">226deg</span>,<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.4</span>) <span class="hljs-number">0</span>,<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.4</span>) <span class="hljs-number">35%</span>,<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.2</span>) <span class="hljs-number">42%</span>,<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>) <span class="hljs-number">60%</span>);<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(-<span class="hljs-number">20%</span>);will-change:transform;<span class="hljs-attribute">transition</span>:transform .<span class="hljs-number">65s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.18</span>,<span class="hljs-number">0.9</span>,<span class="hljs-number">0.58</span>,<span class="hljs-number">1</span>)&#125;<span class="hljs-selector-class">.b-game-card</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.b-game-card__cover</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateX</span>(<span class="hljs-number">7deg</span>) <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">6px</span>)&#125;<span class="hljs-selector-class">.b-game-card</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.b-game-card__cover</span><span class="hljs-selector-pseudo">::after</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translateY</span>(<span class="hljs-number">0%</span>)&#125;<span class="hljs-selector-class">.b-game-card</span><span class="hljs-selector-pseudo">::before</span>&#123;<span class="hljs-attribute">display</span>:block;<span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-attribute">position</span>:absolute;<span class="hljs-attribute">top</span>:<span class="hljs-number">5%</span>;<span class="hljs-attribute">left</span>:<span class="hljs-number">5%</span>;<span class="hljs-attribute">width</span>:<span class="hljs-number">90%</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">90%</span>;<span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>);<span class="hljs-attribute">box-shadow</span>:<span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-number">12px</span> <span class="hljs-number">12px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.4</span>);will-change:opacity;<span class="hljs-attribute">transform-origin</span>:top center;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">skewX</span>(<span class="hljs-number">0.001deg</span>);<span class="hljs-attribute">transition</span>:transform .<span class="hljs-number">35s</span> ease-in-out,opacity .<span class="hljs-number">5s</span> ease-in-out&#125;<span class="hljs-selector-class">.b-game-card</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::before</span>&#123;<span class="hljs-attribute">opacity</span>:.<span class="hljs-number">6</span>;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">rotateX</span>(<span class="hljs-number">7deg</span>) <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">6px</span>) <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.05</span>)&#125;&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><style>.b-game-card{position:relative;z-index:1;width:50%;padding-bottom:150%;perspective:1000px}.b-game-card{position:relative;z-index:1;width:100%;padding-bottom:150%;perspective:1000px}.b-game-card__cover{position:absolute;z-index:1;top:0;left:0;width:100%;height:100%;overflow:hidden;background-image:linear-gradient(120deg,#f6d365 0,#fda085 100%);background-size:cover;perspective-origin:50% 50%;transform-style:preserve-3d;transform-origin:top center;will-change:transform;transform:skewX(0.001deg);transition:transform .35s ease-in-out}.b-game-card__cover::after{display:block;content:"";position:absolute;z-index:100;top:0;left:0;width:100%;height:120%;background:linear-gradient(226deg,rgba(255,255,255,0.4) 0,rgba(255,255,255,0.4) 35%,rgba(255,255,255,0.2) 42%,rgba(255,255,255,0) 60%);transform:translateY(-20%);will-change:transform;transition:transform .65s cubic-bezier(0.18,0.9,0.58,1)}.b-game-card:hover .b-game-card__cover{transform:rotateX(7deg) translateY(-6px)}.b-game-card:hover .b-game-card__cover::after{transform:translateY(0%)}.b-game-card::before{display:block;content:"";position:absolute;top:5%;left:5%;width:90%;height:90%;background:rgba(0,0,0,0.5);box-shadow:0 6px 12px 12px rgba(0,0,0,0.4);will-change:opacity;transform-origin:top center;transform:skewX(0.001deg);transition:transform .35s ease-in-out,opacity .5s ease-in-out}.b-game-card:hover::before{opacity:.6;transform:rotateX(7deg) translateY(-6px) scale(1.05)}</style><div class="b-game-card">        <div class="b-game-card__cover" style="background-image:url(https://cdn.jsdelivr.net/gh/fole-del/img/game_3.jpg);zoom:50%;"></div>    </div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习笔记，HTML" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8CHTML/"/>
    
    
    <category term="HTML" scheme="https://www.mingsrc.xyz/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>一些学习过程中的想法</title>
    <link href="https://www.mingsrc.xyz/2021/04/14/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E4%B8%80%E4%BA%9B%E8%87%AA%E5%B7%B1%E7%9A%84%E6%83%B3%E6%B3%95/"/>
    <id>https://www.mingsrc.xyz/2021/04/14/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/%E4%B8%80%E4%BA%9B%E8%87%AA%E5%B7%B1%E7%9A%84%E6%83%B3%E6%B3%95/</id>
    <published>2021-04-14T04:08:13.668Z</published>
    <updated>2021-10-25T06:27:30.659Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="函数指针和指针函数"><a href="#函数指针和指针函数" class="headerlink" title="函数指针和指针函数"></a>函数指针和指针函数</h1><p>参考了@<a href="https://blog.csdn.net/luoyayun361/article/details/80428882">函数指针和指针函数用法和区别_luoyayun361的专栏-CSDN博客_指针函数</a></p><blockquote><ul><li><p>指针函数：简单的来说，就是一个返回指针的函数，其本质是一个函数，而该函数的返回值是一个指针。</p><ul><li>~~~cpp<br>int <em>fun(int x,int y);<br>int * fun(int x,int y)；<br>int</em> fun(int x,int y);// 使用<br>typedef struct _Data{<pre><code>int a;int b;</code></pre>}Data;//指针函数<br>Data* f(int a,int b){<pre><code>Data * data = new Data;data-&gt;a = a;data-&gt;b = b;return data;</code></pre>}int main(int argc, char *argv[])<br>{<pre><code>QApplication a(argc, argv);//调用指针函数Data * myData = f(4,5);qDebug() &lt;&lt; &quot;f(4,5) = &quot; &lt;&lt; myData-&gt;a &lt;&lt; myData-&gt;b;return a.exec();</code></pre>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br>- 函数指针：其本质是一个指针变量，该指针指向这个函数。总结来说，函数指针就是指向函数的指针。<br><br>  - ~~~cpp<br>    int (*fun)(int x,int y);<br>            <br>    &#x2F;&#x2F; 使用<br>    int add(int x,int y)&#123;<br>        return x+y;<br>    &#125;<br>    int sub(int x,int y)&#123;<br>        return x-y;<br>    &#125;<br>    &#x2F;&#x2F;函数指针<br>    int (*fun)(int x,int y);<br>            <br>    int main(int argc, char *argv[])<br>    &#123;<br>        QApplication a(argc, argv);<br>        &#x2F;&#x2F;第一种写法<br>        fun &#x3D; add;<br>        qDebug() &lt;&lt; &quot;(*fun)(1,2) &#x3D; &quot; &lt;&lt; (*fun)(1,2) ;<br>    &#x2F;&#x2F;第二种写法<br>        fun &#x3D; &amp;sub;<br>        qDebug() &lt;&lt; &quot;(*fun)(5,3) &#x3D; &quot; &lt;&lt; (*fun)(5,3)  &lt;&lt; fun(5,3)；<br>            <br>        return a.exec();<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>如果你对这两个概念的区分不是很清晰也可以这么记：</p><p>指针函数与整型函数一样，都是返回一个东西，不同的是指针函数返回的是一个指针。</p></blockquote>]]></content>
    
    
    <summary type="html">函数指针和指针函数区分</summary>
    
    
    
    
    <category term="C++易混点" scheme="https://www.mingsrc.xyz/tags/C-%E6%98%93%E6%B7%B7%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>易混点😖：函数指针与指针函数</title>
    <link href="https://www.mingsrc.xyz/2021/04/07/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/C++_Primer_Plus/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%B8%8E%E6%8C%87%E9%92%88%E5%87%BD%E6%95%B0/"/>
    <id>https://www.mingsrc.xyz/2021/04/07/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C++/C++_Primer_Plus/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%B8%8E%E6%8C%87%E9%92%88%E5%87%BD%E6%95%B0/</id>
    <published>2021-04-07T01:38:14.385Z</published>
    <updated>2021-04-07T01:39:52.712Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="函数指针与指针函数"><a href="#函数指针与指针函数" class="headerlink" title="函数指针与指针函数"></a>函数指针与指针函数</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>❤️</title>
    <link href="https://www.mingsrc.xyz/2021/04/01/%E6%83%85%E8%AF%9D/"/>
    <id>https://www.mingsrc.xyz/2021/04/01/%E6%83%85%E8%AF%9D/</id>
    <published>2021-04-01T05:13:15.513Z</published>
    <updated>2021-10-26T10:12:12.976Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="53cb73a6336a5d736b90d1d0e4bbaaffcec79433efee35ac3d5c5d9e7a3a5060">2646008611039267779636211e2b6d356a06c3e8940674e2f04af63ed97317e69bcc9fcea5ace838cea5e3ed7b9d75f18982507b067c70f06bf36aec0ebe8d868b6f07221f0a5cdf1e0250738934cbca4f85d2efaccd86f91d8076274429e5b25a287fc5c4148c440ead78d8f8791577d2a23ba6a792a970bda06c5a1d992264782d0564afeacca0fd5059f1c5c46cac901632c6ad09155361e7c0373e68d787ad2bb6e96a26e0728392382ce0a482bce00b35453d628ebc1c112ef66741bd08f8a4dcb90c2f456f8b52995d8d43f5eddbd427c02e01125ae3359c6e6a1d937b60637a40b349a475ad64a0bbd87dad3d352e1ae6ca50dae1f5370fc08c32389f449793e49a5fc6421c389d09d844288101c59e6760f69fe59b3ae292c3846226e48a46d5f36812fb30661a93840f3dc0b424c5cf1befae71d59d4437563ee6e000203df904cab1945f5982db22bdfc4b046a2551b789c1ecf8b2a1a6c77ac930e7e0e49efbec3a72b375e888d9ab60d87adcbdc0c55a429e2d1711fb7744075d35e093be5ca9c0f94c488ddfffe788d9ba3866aca69b3ad5ce5575b1b4d6f9ab00e492cd003039c8cfc1e4b60128cb2979fd1f7145f46ea636167e3561f891d9ef404d87dde3a6c0c430ab7c9c23a2e2c9077f29c2a51c5681252e5dca5053ecfabe7bb6d7af1a370950d401e10bab610917f004eab0f93f5b3acfb7748bd0e1c14277c74240d37f21f7cd5cd20a1260df92a4687b8006a4592984d4ef1c339bd76d5196bf4e9b1d0cb19ed62207720af0678ca62b1b26d7bd7a0d18e0a87c681bc8640eb4037921bd10e5aefcc14f90201ee115c7ef5748213f351b630977dd33f9cb8890c7ecd509abdb6e3b1ba9ca0c00e0658fb730c565676680357e057b69e4711fcb2b3e629e50c40c4b563847221464218d7dd1dc39b0387b156f5d14ed159df9411f199cfd8085d5270aac8bea9bcefb88102840d2afba920f5040f81d578598dd671f26dd531ef2d8d2ff57191a74fd1ca7ab2d92f426ee4e5b29d481eeb3797748cb6929ad38eed665fd4bbdced9add08d9a0e381cc6a7357672b44fdb1e91031a347eb7970771af5434dd767dae3c055f5ae6a42e8903ae1dfa481acc56c11c3b87e375c2af33456ae0bc6ca41ea5e45ba04e71b52ab96d3368da84798c2593d21446427e9dda913b1f5d8098c1f18e240a0277d42aab9985884034cb2aed2e4bb668aff7b8c8b010edf353e1fa4df1394539a67aeb6bd4e72583c8f665b8bd07b36296470ac334f8c7ce1f0c6bbcf8d9fb68be870b7bbe8410ef0bfa2b388f064020f4c62241a19d189c4cf2c5c01127ef3dc88a0c09f8f0402ee909d77c15ce027c0906e3d6b8db7f5ac9379162248f5f62dbb8529d941e876cf33112b075fc8a2f6778852c9be75b0aa8a4ff61ee4d2ad57701831233609660ae861a4ec2bd930fff4ec0c93f4fee4619862469f4d41778d85d5e66e4d7a29e7b190e7c157a726af74855a2ebd45b47b443375988e1702a117277689d735f9929d518d9319d9d01264c01a91554e37b75e6b49e41026233e35b21605a4f8cddc00b49f11a655666ee9aa26da181cc028f22f72434a38fd50d6e1081bbc9c03c660a504368e5b54111df9ccdd44b8f1b1785376107a74caee1ff24c9d9246f67c69388040a691922319dd6a4e444427de0cf2f855d86a8b99efcb37c9a1c0612c303c9dfb230ef32468a72949ab255e0b574e41e1f9dff52a4b8b31cd8286740158b368282d9973e6b59a0c34e63362d477d38e70a42a9d342ecaf32ab4a51909aad09bf188ea27efa6d493562ef11518d9a9e12c44fe46b18f475437fb949f5c5828a7078aa4135b2d4da32cc38f67c55c7e0f9fa61bdd8a5631b4ebb72b0394003b3acd3de817426a6899091a03454b64d05a835e4ebc2a2735ea4290df50d00d475aef62b7eb5c9841d3545885c2d4aae8678d7a76d1f7982e7d892e9fd919e88fd8f6faeef8ea07c9830da47d75be9a228905fab0863227a5e27cc04b614fb82889c5d3293ad2f56a67f434ec3fa915a9c7d76a9cafd8fe6022792a815aa8108054ceae974445a36aaba15f7fa1302ce004b376c11a9b690499668d24226e7dbd55738149559e7e3840e0e33e22893fb2dec417521cc9e04126d9c56880bd348aa50a44815b7787e41e2c76cc8ed4fea7b0f85f1a1449c5b4cd348e5acb418200af6a4f9ab63c319219c0ef6750ea0aacda205b0f56d6160b0f770b636992b9fd5f16008e5c109c0e8220a990f553a62518d78fd43153dadebbb5b971ca0c7c2b72a2d362eeceb5c9e72a5f09d1f68192fe5be8e5ef16d4eabaf29d183e6862d23458d02569b259e7bc775c5fa4ab25b9e682431794f7a59a47cd6cb80e748e7de29940c92851d2cf87d4cb6c6d4c2aa02757162f606bf4a391ee00019d7d1d9d06a52be31fcf0ca6be8f50b58e37b1fab142b2fb7e82262e63e182bbefb3a15937a10a412a80f1c62625258dd46e58eeb5e588087317441d6449b7a1f512434d8489e2a7cfd169b3c0f7392a774c6e9b2170d72145a830a58e23f45565fbc4b0af426a9a65586a03ac88daab1c2e9d083f501773cac13ebfad1331d658b027b80de05786eb11b7eaef17d781010d96616c8ae1d5741cb59f7db22f56ed022ab9d1fa59e19d4f6f44c6481f4eea1f23b71dd7c27cfafeb1490d0296e3756b8810b8d9476870b0e51dc66011d307eaff4d73276c3a0c2b2c00cad2d900c670e856689b2b6058509b8e381bd7090bcd3efb2124df74d9ffb5068d78867f08d3810e606d57e47528e3ad7e3e7b235a4767176ef8ea4abd1b120c01d570c471129a4666df1b149e4372150ba75c5c1d87520df0bd2fd1e091239db1a6186f78097b097831f73cee2a68eb5fb58674187593ce6364ab305c38511d2c90030480f880439b6eb40e6880af888eb4269609e2309096dbe56d531d23d8abd098eae8408a9c74ece1e80d5faa8d43859f9d000bacab9819c7c39700faca28c228a028a26bcaefaeed18bf0feb34af4b1457059d4b16482c0790e9baa161dff32d05a6529b304e762cc5c11d9b2bd2674e545dfc53dda16b65baf425cd4b6a36045ede4ea654900557a8c79f5f1adbc2b4c7a114575cc12141883960048d6b85b93c39619343743380acad832a715cd74ca1f18ed2013735b65bf08249cd0ab5941825755c7a66599f1cabbd5e7a47813de49805786b5aeafbec62fee0bad7df8b7ed92c71f5058cc509c9002bc7129f006f9b97883c7928792d485b9fa474d6aadc91174411cdf01a4c11eec77914b6ef57e3eb9f261ef658862cc2885f3468f54f73335015337244554f28d04848ee7ad847b00df887f106cea165d2af44d1b85dd67b38c2a3e8827ec2bb64cef14ba774b9a53f98bf8b8b2e5f09517107c7c7ed6fc047990b27cb15f1f1086db0818ecd94ba994ab4e1ab042558e7032209d687f0a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有感而发，也关你我</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo 搭建博客</title>
    <link href="https://www.mingsrc.xyz/2021/03/31/F_%E6%9D%82%E8%AE%B0/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://www.mingsrc.xyz/2021/03/31/F_%E6%9D%82%E8%AE%B0/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-03-31T08:44:03.517Z</published>
    <updated>2021-05-27T08:14:20.299Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用hexo搭建博客"><a href="#使用hexo搭建博客" class="headerlink" title="使用hexo搭建博客"></a>使用hexo搭建博客</h1><p>首先安装</p><ul><li><a href="https://npm.taobao.org/mirrors/node">Node.js Mirror</a><ul><li><a href="https://www.cnblogs.com/jianguo221/p/11487532.html">Node.js安装教程</a></li></ul></li><li><a href="https://git-scm.com/download/win">Git - Downloading Package</a></li></ul><hr>]]></content>
    
    
    <summary type="html">针对2021/3/13日及之前时间的版本</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>痕迹</title>
    <link href="https://www.mingsrc.xyz/2021/03/18/%E8%87%AA%E8%BF%B0/"/>
    <id>https://www.mingsrc.xyz/2021/03/18/%E8%87%AA%E8%BF%B0/</id>
    <published>2021-03-18T14:13:09.095Z</published>
    <updated>2021-11-05T08:32:34.985Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="“M-Y-L-I-F-E”"><a href="#“M-Y-L-I-F-E”" class="headerlink" title="“M Y L I F E”"></a><span  style="text-align:center;font-size:20px;font:30px 书体坊兰亭体;color:blueviolent;word-spacing:30px;">“M Y L I F E”</span></h1><div class="timeline"><p class='p h2'>2021</p> <div class="timenode"><div class="meta"><p><p>2021-03-18</p></p></div><div class="body"><p><u><a href="https://www.cnblogs.com/fole-del/diary/2021/03/18/14556295.html">今天，该想的我都想了</a></u></p></div></div><div class="timenode"><div class="meta"><p><p>2021-05-14</p></p></div><div class="body"><p><u><a href="https://www.cnblogs.com/fole-del/diary/2021/05/14/14767918.html">“精神食粮”</a></u></p></div></div><div class="timenode"><div class="meta"><p><p>2021-05-17</p></p></div><div class="body"><p><u><a href="https://www.cnblogs.com/fole-del/diary/2021/05/17/14776258.html">“灵魂与肉体”</a></u></p></div></div><div class="timenode"><div class="meta"><p><p>2021-06-07</p></p></div><div class="body"><p>今天的苦算吃完了，明天的苦还远得很，这一夜的身心安适是向不属今明两天的中立时间里的躲避。</p><p><span style="align:left"> ——钱钟书《围城》</span></p><div class="note green icon modern"><i class="note-icon fas fa-key"></i><p>原来钱老的围城，可以把人世间的苦，说的这么遥远。</p></div></div></div><div class="timenode"><div class="meta"><p><p>2020-10-12</p></p></div><div class="body"><p>我希望有个如你一般的人，如山间清爽的风，如古城温暖的光，从清晨到夜晚，由山野到书房，只要最后是你就好。</p></div></div><div class="timenode"><div class="meta"><p><p>2020-10-20</p></p></div><div class="body"><p>说好了不再继续入坑，但是看了别人家的主页后······😂 😂 😂 </p></div></div><div class="timenode"><div class="meta"><p><p>2020-10-24</p></p></div><div class="body"><p>今天你不快乐的原因是因为什么？</p></div></div><div class="timenode"><div class="meta"><p><p>2020-12-14</p></p></div><div class="body"><p>也许，一个人要是想在茫茫人海中要保持一点独立性，那么他必须让自己显得古怪些才成。可我不喜欢这句话，最近实在是太烂了。</p></div></div><div class="timenode"><div class="meta"><p><p>2021-2-24</p></p></div><div class="body"><p>及时当勉励，岁月不待人。</p></div></div><div class="timenode"><div class="meta"><p><p>2021-10-27</p></p></div><div class="body"><p>见字如面，既爱又恨，那段时光</p></div></div></div>]]></content>
    
    
    <summary type="html">不起眼分母</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>关于QByteArray中的URL编解码</title>
    <link href="https://www.mingsrc.xyz/2021/03/16/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Qt/Qt_Url%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    <id>https://www.mingsrc.xyz/2021/03/16/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Qt/Qt_Url%E7%BC%96%E8%A7%A3%E7%A0%81/</id>
    <published>2021-03-16T09:05:33.502Z</published>
    <updated>2021-06-25T13:20:59.219Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于Qt中的URL编解码的使用"><a href="#关于Qt中的URL编解码的使用" class="headerlink" title="关于Qt中的URL编解码的使用"></a>关于Qt中的URL编解码的使用</h1><p>QByteArray中的<code>toPercentEncoding</code>和<code>fromPercentEncoding</code>支持对URL的编解码工作。</p><hr><p>先看一下<code>toPercentEncoding</code>的官方文档。</p><p><img src="../../../images/toPercentEncoding()%E5%87%BD%E6%95%B0/image-20210316171016958.png" alt="toPercentEncoding"></p><p><img src="../../../images/toPercentEncoding()%E5%87%BD%E6%95%B0/image-20210316171000365.png" alt="翻译"></p><p>说明非常简单了。<code>fromPercentEncoding()</code>就刚好相反。说白了就是把你的这个输入转换为网址的格式。可以理解为URL编码的过程</p><p>demo：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">QByteArray text = &#123;<span class="hljs-string">&quot;http://www.baidu.com/s?ie=utf-8&amp;f=8&amp;tn=baidu&amp;wd=临时邮箱&quot;</span>&#125;;<br>QByteArray urlEncode = text.<span class="hljs-built_in">toPercentEncoding</span>();<br><span class="hljs-built_in">qDebug</span>(<span class="hljs-string">&quot;编码后&quot;</span>);<br><span class="hljs-built_in">qDebug</span>(urlEncode.<span class="hljs-built_in">constData</span>());<br><br>QByteArray urlDecode = QByteArray::<span class="hljs-built_in">fromPercentEncoding</span>(urlEncode);<br><span class="hljs-built_in">qDebug</span>(<span class="hljs-string">&quot;-------------------------------------------------&quot;</span>);        <br><span class="hljs-built_in">qDebug</span>(<span class="hljs-string">&quot;解码后&quot;</span>);    <br><span class="hljs-built_in">qDebug</span>(urlDecode.<span class="hljs-built_in">constData</span>());<br></code></pre></td></tr></table></figure><p>输出：</p><div style="color:white;background:black;font-family:consolas">编码后：<br>http0.0000000.0000000.000000www.baidu.com0.000000s0.000000ie%3Dutf-8                  0.000000%3D8                          %3Dbaidu%26wd%3D5.185438E-3164%B8%B48.694087E-3156%97%B65.190920E-3169%820.000000E5.182199E-31670.000000E%B1<br>----------------------------------<br>解码后：<br>http://www.baidu.com/s?ie=utf-8&f=8&tn=baidu&wd=临时邮箱</div><hr><p>所以当你需要把解码后的网址作为数据发送或使用时就可以使用Encoding，需要解码URL的网址是就使用Decoding。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Qt" scheme="https://www.mingsrc.xyz/categories/Qt/"/>
    
    <category term="QByteArray" scheme="https://www.mingsrc.xyz/categories/Qt/QByteArray/"/>
    
    
  </entry>
  
  <entry>
    <title>线程demo</title>
    <link href="https://www.mingsrc.xyz/2021/03/16/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8Bdemo/"/>
    <id>https://www.mingsrc.xyz/2021/03/16/E_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8Bdemo/</id>
    <published>2021-03-16T06:04:37.035Z</published>
    <updated>2021-03-16T11:21:25.026Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Demo-of-Thread"><a href="#Demo-of-Thread" class="headerlink" title="Demo of Thread"></a>Demo of Thread</h1><p>苦于每次写就忘的经历，我又写了一个简单的没有质量的Demo，因为太闲了，写完这篇就开始刷题吧</p><p>三个文件，<code>People.h</code>,<code>People.cpp</code>,<code>main.cpp</code>。三个文件，两样东西，一个是People的类，一个是main函数调用线程。</p><p>People头文件及cpp文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// profile: People头文件</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> constructTimes = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> copyTimes = <span class="hljs-number">0</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">People</span>(string str);<br><span class="hljs-built_in">People</span>(<span class="hljs-keyword">const</span> People &amp;mt);<br><br>~<span class="hljs-built_in">People</span>();<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(string str)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">startWork</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">endWork</span><span class="hljs-params">(<span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">calcWorkTime</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>string m_name;<br><span class="hljs-keyword">int</span> m_start;<br><span class="hljs-keyword">int</span> m_end;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// profile: people.cpp文件</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;People.h&quot;</span></span><br><br>People::<span class="hljs-built_in">People</span>(string str) :<span class="hljs-built_in">m_name</span>(str)<br>&#123;<br>constructTimes++;<br>cout &lt;&lt; <span class="hljs-string">&quot;构造次数:&quot;</span> &lt;&lt; constructTimes &lt;&lt; endl;<br>&#125;<br>People::<span class="hljs-built_in">People</span>(<span class="hljs-keyword">const</span> People &amp;mt) : <span class="hljs-built_in">m_name</span>(mt.m_name)<br>&#123;<br>copyTimes++;<br>cout &lt;&lt; <span class="hljs-string">&quot;构造次数:&quot;</span> &lt;&lt; copyTimes &lt;&lt; endl;<br>&#125;<br>People::~<span class="hljs-built_in">People</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-keyword">this</span>-&gt;m_name &lt;&lt; <span class="hljs-string">&quot; 调用了析构函数&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">People::setName</span><span class="hljs-params">(string str)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;更换岗位开始,需等待片刻&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">1000</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;更换岗位ing……&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">this</span>-&gt;m_name = str;<br><br>cout &lt;&lt; str &lt;&lt; <span class="hljs-string">&quot; 设置工作成功,耗时&quot;</span>&lt;&lt; i &lt;&lt;<span class="hljs-string">&quot;S&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">People::startWork</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; m_name &lt;&lt; <span class="hljs-string">&quot; 开始工作,开始时间：&quot;</span> &lt;&lt; s &lt;&lt; endl;<br>m_start = s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">People::endWork</span><span class="hljs-params">(<span class="hljs-keyword">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; m_name &lt;&lt; <span class="hljs-string">&quot; 结束工作,开始时间：&quot;</span> &lt;&lt; e &lt;&lt; endl;<br>m_end = e;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">People::calcWorkTime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; m_name &lt;&lt; <span class="hljs-string">&quot; 的工作时长为：&quot;</span>;<br>cout &lt;&lt; m_end - m_start &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>主函数文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;People.h&quot;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span>;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">People <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;aaa&quot;</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;线程:&quot;</span> &lt;&lt; std::this_thread::<span class="hljs-built_in">get_id</span>() &lt;&lt; <span class="hljs-string">&quot;开始&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">int</span> startTime = <span class="hljs-number">1</span>,endTime;<br>People *p1ptr = &amp;p1;<br><span class="hljs-comment">// 这里如果使用的是p1,则允许setName函数内部修改值，但不会对外部影响</span><br><span class="hljs-comment">// 使用std::ref()不会调用拷贝构造函数，因为std::ref是引用传递，函数内部的修改影响外面，这里传的必须是指针</span><br><span class="hljs-comment">// 使用 std::cref() 相当于 std::const ref(),const 引用传递，函数内部不能修改</span><br><span class="hljs-function">std::thread <span class="hljs-title">w1</span><span class="hljs-params">(&amp;People::setName, std::ref(p1ptr), <span class="hljs-string">&quot;bbb&quot;</span>)</span></span>;<br><span class="hljs-function">std::thread <span class="hljs-title">w2</span><span class="hljs-params">(std::move(w1))</span></span>; <span class="hljs-comment">// 线程为w2开始运行setName,w1不再作为一个线程对象</span><br><span class="hljs-keyword">bool</span> w1Joinable = w1.<span class="hljs-built_in">joinable</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;w1的joinable：&quot;</span> &lt;&lt; w1Joinable &lt;&lt; endl;<br>w2.<span class="hljs-built_in">detach</span>(); <span class="hljs-comment">// detach 是脱离主线程，单独在一个线程中进行，屏幕输出就会乱序</span><br> <span class="hljs-comment">// w1.join() 是加入到线程</span><br><br><br>cout &lt;&lt; <span class="hljs-string">&quot;-----------&quot;</span> &lt;&lt; endl;<br>p1.<span class="hljs-built_in">startWork</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">1000</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;工作ing……&quot;</span> &lt;&lt; endl;<br>endTime = i;<br>&#125;<br>p1.<span class="hljs-built_in">endWork</span>(endTime);<br>p1.<span class="hljs-built_in">calcWorkTime</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><div style="color:white;background:black;font-family:consolas">构造次数:1<br>线程:17668开始<br>更换岗位开始,需等待片刻w1的joinable：0<br>-----------<br>aaa 开始工作,开始时间：1<br>工作ing……<br>更换岗位ing……<br>更换岗位ing……<br>工作ing……<br>更换岗位ing……<br>bbb 设置工作成功,耗时3S<br>工作ing……<br>工作ing……<br>工作ing……<br>bbb 结束工作,开始时间：4<br>bbb 的工作时长为：3</div><p>因为是<code>detach()</code>的方式，因此更换岗位与工作是异步进行的。也就是这是两个单独的线程在进行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="线程" scheme="https://www.mingsrc.xyz/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>git 测试文档</title>
    <link href="https://www.mingsrc.xyz/2021/03/15/F_%E6%9D%82%E8%AE%B0/log/"/>
    <id>https://www.mingsrc.xyz/2021/03/15/F_%E6%9D%82%E8%AE%B0/log/</id>
    <published>2021-03-15T07:52:11.590Z</published>
    <updated>2021-04-16T02:06:34.893Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="本文档用于记录git命令及其结果"><a href="#本文档用于记录git命令及其结果" class="headerlink" title="本文档用于记录git命令及其结果"></a>本文档用于记录git命令及其结果</h1><p>期间每执行一步就会在本文档记录，通过编写本文档以及使用<code>git</code>+<code>show log tag status</code>命令可以帮你更快了解git的工作原理。</p><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir git_repost_test<br>cd git_repost_test<br>git init # 初始化文件<br>git remote add origin git@gitee.com:fole-del/git-command-test-project.git #与远程仓库连接<br>git pull --allow-unrelated-histories origin master # 从远程仓库拉文件初始化本地仓，本地仓=本地仓+远程仓<br>git commit -m &quot;fix(fole-del):添加了log记录文档&quot;<br>git tag V1.0 # 添加标签V1.0<br></code></pre></td></tr></table></figure><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir setting #添加setting文件夹<br>cd setting #切换到setting文件夹<br>touch autoHooks.bat #添加批处理文件，可以使用vim编辑<br>vi autoHooks.bat<br>---------------------------- # 添加框内代码到autoHooks.bat<br>@echo off<br>set &quot;curDir=%cd%&quot;<br>echo -------------------------------<br>set &quot;curDir=%curDir:setting=%&quot;<br><br>set source=%cd%\commit-msg.sample<br>set dest=%curDir%.git\hooks\commit-msg<br>echo %source%<br>echo %dest%<br>copy &quot;%source%&quot; &quot;%dest%&quot;<br><br>echo -------------------------------<br><br>----------------------------<br><br>touch commit-msg #创建commit-msg文件<br><br>----------------------------- # 添加框内文件到commit-msg<br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>MSG=`awk &#x27;&#123;printf(&quot;%s&quot;,$0)&#125;&#x27; $1`<br>if [[ $MSG =~ ^(feat|fix|test|refactor|docs|style|chroe)\(.*\):.*$ ]]<br>then<br>echo -e &quot;\033[32m commit success! \033[0m&quot;<br>else<br>    echo -e &quot;\033[31m Error: the commit message is irregular \033[m&quot;<br>  echo -e &quot;\033[31m Error: type must be one of [feat,fix,docs,style,refactor,test,chore] \033[m&quot;<br>    echo -e &quot;\033[31m eg: feat(文件): add the user login \033[m&quot;<br>exit 1<br>fi<br>-----------------------------<br><br>./autoHooks.bat # 执行批处理命令<br><br>git tag V1.01 # 因为配置了部署，加一个标签<br></code></pre></td></tr></table></figure><h2 id="使用develop分支开发"><a href="#使用develop分支开发" class="headerlink" title="使用develop分支开发"></a>使用develop分支开发</h2><p><a href="https://blog.csdn.net/u012726702/article/details/78038028">Git分支管理策略 develop分支_黄昏的大树-CSDN博客</a><i id="develop"></i></p><p>关于develop分支的介绍可以看上述链接的博客。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b develop master # 从master分支创建develop分支并切换到develop分支<br>cd .. # 退到上一级<br>git add * # 把刚才创建的setting文件夹以及随时更改的本文档（log.md）添加到缓存区<br>git status # 查看本地仓库  该命令用于查看在你上次提交之后是否有对文件进行再次修改<br>git tags &quot;setting&quot; # 添加setting标签<br>git commit -m &quot;fix(setting):自动化部署&quot;<br>---------------------------------------------------<br><span class="hljs-meta">#</span><span class="bash"> 接下里合并develop分支到mastter分支</span><br>git checkout master #切换到master分支，此时文档变为创建develop分支时的状态<br>git merge --no-ff develop #此时应该会看到提示，并且log.md文档内容修改为你刚才在develop分支最后保存的状态<br>git push # 提交到远程仓库<br>git push origin --tags # 将本地的所有标签一次性提交到远程仓库<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/20210312184159.png" alt="仓库概况"></p><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/20210312184201.png" alt="标签页面"></p><h2 id="使用feature分支"><a href="#使用feature分支" class="headerlink" title="使用feature分支"></a>使用feature分支</h2><p>关于feature分支不明白的可以看这篇文章<a href="#develop">柳暗花明又一村</a></p><p><u>之后的命令就会减少注释了，不懂得可以自己查阅</u></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout develop<br>git checkout -b feature-sayHello develop<br>touch main.cpp<br>vi main.cpp # 随便写点什么都行<br>git add main.pp<br>git tag V1.02<br><span class="hljs-meta">#</span><span class="bash"> 删除分支</span><br>git branch -D develop<br><span class="hljs-meta">#</span><span class="bash"> 删除远程分支</span><br>git branch --delete develop<br></code></pre></td></tr></table></figure><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>在<code>feat</code>分支的<code>main.cpp</code>文件中添加一段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">intConflit</span><span class="hljs-params">()</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;conflict testing&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>写完保存，然后执行git命令提交本次修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add *<br>git commit -m <span class="hljs-string">&quot;merge test --conflit&quot;</span><br>git checkout master<br></code></pre></td></tr></table></figure><p>切换到<code>master</code>分支后也修改<code>main.cpp</code>文件，随便增加一个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testConflict</span><span class="hljs-params">()</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;测试conflict&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;这里是增加了一行代码&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后也提交本次修改，再执行<code>merge</code>，来看一下<code>main.cpp</code>发生了什么变化：</p><p><code>feat分支</code>与<code>master分支</code>的修改合并了<u>HEAD下之后等号之前</u>显示当前分支代码的改变，<u>feat之前等号之后显示</u>的分支改变合并到当前分支的内容。</p><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210416092535633.png" alt="changed of main"></p><blockquote><p>这里推荐一个vscode的插件<code>GitLens</code>，借助插件可以选择保留<code>current change</code>|<code>incoming change</code>|<code>both change</code>|<code>compare change</code>，方便你分支的合并</p><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210416092935767.png" alt="GitLens"></p><ol><li>Current change</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210416093822746.png" alt="Current change"></p><ol><li>Incoming change</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210416093927959.png" alt="Incoming change"></p><ol><li>Both change</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210416093954472.png" alt="Both change"></p><ol><li>compare change</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/image-20210416093603416.png" alt="compare change"></p></blockquote><p>提交标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin v1.02<br><span class="hljs-comment"># 提交所有标签👇</span><br>git push origin tags<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">git用法的使用实例文章</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>自动化部署项目hook</title>
    <link href="https://www.mingsrc.xyz/2021/03/10/F_%E6%9D%82%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AEhooks/"/>
    <id>https://www.mingsrc.xyz/2021/03/10/F_%E6%9D%82%E8%AE%B0/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AEhooks/</id>
    <published>2021-03-10T07:26:49.738Z</published>
    <updated>2021-10-28T09:06:23.201Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在研究如何更好使用<code>git log</code>的过程中，学习了很多非常强有力的技能，这些技能极大地方便了我们对项目的管理，更好、更加规范、更加流程的帮助我们管理一个项目从开发到维护的过程。😛</p><blockquote><p>看到一篇文章，讲了关于<code>git commit</code>的信息填写的格式进行规范。<a href="https://mp.weixin.qq.com/s/mbx4zih_idwpRuyex8B9mQ">git 的 hook 操作强大到难以置信，效率为王！</a></p><p>文章中还讲到了如何使用自动化部署对项目团队中每个人的<code>git commit</code>进行规范，闲来无事玩两下，借着这篇文章，我就开始了并不是自动化的“自动化”，简单的几句代码，却是几个小时的尝试，从sample到批处理命令的编写，都是泪啊~~~</p><blockquote><p>其中关于如何获取文件路径的尝试也是耗费不少时间，尝试几次之后才得以成功。</p></blockquote></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先列出期间我用到的几个网站，以便你操作的时候查阅相关的资料</p><ol><li><a href="https://www.w3cschool.cn/pclrmsc/">批处理入门手册_w3cschool</a>，w3c对于批处理的各个命令的解说挺详细的，但是排版太难看，实在是不忍下眼，但是作为手册，还是有参考的价值，“<u>环境变量延迟扩展</u>”一节对文件路径的修改与获取相对重要一点，可以先看一下。</li><li><a href="https://blog.csdn.net/weixin_30952103/article/details/99384339">批处理获取路径_weixin_30952103的博客-CSDN博客</a>，这篇博客对批处理中文你的bat文件在<code>e:/mybat/test.bat</code>,则<code>%0</code>就是<code>e:/mybat/test.bat</code>, <code>%~dp0</code>是<code>e:/mybat/</code>。</li></ol><h3 id="关于钩子（hooks）"><a href="#关于钩子（hooks）" class="headerlink" title="关于钩子（hooks）"></a><u>关于钩子（hooks）</u></h3><p>钩子都被存储在 Git 目录下的 <code>hooks</code> 子目录中。 也即绝大部分项目中的 <code>.git/hooks</code> 。 当你用 <code>git init</code> 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。 这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。 所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用 —— 你可以用 Ruby 或 Python，或任何你熟悉的语言编写它们。 这些示例的名字都是以 <code>.sample</code> 结尾，如果你想启用它们，得先移除这个后缀。</p><h2 id="sample文件"><a href="#sample文件" class="headerlink" title="sample文件"></a>sample文件</h2><p>在开头提及的那篇文章中关于<code>commit-msg</code>的代码已经有说明，感兴趣的同学可以自己去研究怎么写这个脚本。当然，除了<code>commit-msg</code>还有其他几个脚本用来规范你的项目部署。<code>git hooks</code>即git 钩子，都是以sample结尾的脚文件，存放在<code>.git/hooks</code>目录下。最终要做的事情也是将写好的脚本文件存放到hooks目录下。</p><p>如下图所示的smaple文件都可以通过自定义的形式实现相应的功能。</p><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/20210310192937.png" alt="hooks文件说明"></p><p>这里添加一个我从不知名博客找到的一段<code>commit-msg</code>的代码行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br>MSG=`awk <span class="hljs-string">&#x27;&#123;printf(&quot;%s&quot;,$0)&#125;&#x27;</span> <span class="hljs-variable">$1</span>`<br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$MSG</span> =~ ^(feat|fix|<span class="hljs-built_in">test</span>|refactor|docs|style|chroe)\(.*\):.*$ ]]<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[32m commit success! \033[0m&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m Error: the commit message is irregular \033[m&quot;</span><br>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m Error: type must be one of [feat,fix,docs,style,refactor,test,chore] \033[m&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[31m eg: feat(user): add the user login \033[m&quot;</span><br><span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="批处理命令"><a href="#批处理命令" class="headerlink" title="批处理命令"></a>批处理命令</h2><p>献上代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">rem autoSetHooks.bat<br>@<span class="hljs-built_in">echo</span> off<br><span class="hljs-built_in">set</span> <span class="hljs-string">&quot;curDir=%cd%&quot;</span><br><span class="hljs-built_in">set</span> <span class="hljs-string">&quot;curDir=%curDir:setting=%&quot;</span><br><span class="hljs-built_in">set</span> <span class="hljs-built_in">source</span>=%<span class="hljs-built_in">cd</span>%\commit-msg.sample<br><span class="hljs-built_in">set</span> dest=%curDir%.git\hooks\commit-msg<br>copy <span class="hljs-string">&quot;%source%&quot;</span> <span class="hljs-string">&quot;%dest%&quot;</span><br></code></pre></td></tr></table></figure><p>虽然只有短短几行代码，但却费了我不少时间。唯一的功能也很简单，主要就是<code>copy</code>命令，将同路径下的<code>commit-msg.sample</code>拷贝到<code>.git\hooks\</code>路径下。</p><p>如果你看懂了批处理链接中关于环境变量延迟扩展，那么上述代码就是一个简单的Hello World~</p><p>如果你没看也无妨，关键的几句代码我会说明一下：</p><ol><li><code>set &quot;curDir=%cd%&quot;</code> 打开终端执行<code>cd</code>命令，屏幕输出和这里的<code>%cd%</code>是一致的，这句话的意思就是获取当前批处理程序的的路径保存到curDir变量中。</li><li>比较重要的一个操作就是<code>:</code>（冒号），在这里可以将<code>:A=B</code>理解为<code>replace(A,B)</code>，就是用B替换A。注：替换为空的话等号<code>=</code>后边就和第4行一样就行</li><li>确定source文件和destination之后执行copy命令就行。</li><li>最后，在clone项目到本地之后，找到上述批处理运行即可在<code>.git/hooks/</code>目录下生成<code>commit-msg.sample</code>文件。</li></ol><p>感觉我的做法不是很标准，应该是在程序编译期间自动执行bat命令最好，这样就不用去特意运行一下批处理命令。</p><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/20210315134203.png" alt="git提交规范说明"></p>]]></content>
    
    
    <summary type="html">如何“自动化”部署git hook（C++项目）</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="杂记" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="git" scheme="https://www.mingsrc.xyz/tags/git/"/>
    
    <category term="bat" scheme="https://www.mingsrc.xyz/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>git命令手册💪_从新建项目开始</title>
    <link href="https://www.mingsrc.xyz/2021/03/09/F_%E6%9D%82%E8%AE%B0/Git%E6%9C%80%E5%85%A8%E6%89%8B%E5%86%8C/"/>
    <id>https://www.mingsrc.xyz/2021/03/09/F_%E6%9D%82%E8%AE%B0/Git%E6%9C%80%E5%85%A8%E6%89%8B%E5%86%8C/</id>
    <published>2021-03-09T02:00:30.413Z</published>
    <updated>2021-11-01T04:17:08.916Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在写这篇文章期间发现了这么几个网站<a href="http://gitref.justjavac.com/">Git参考手册</a>、<a href="https://www.yiibai.com/git">Git教程™ (yiibai.com)</a>，希望对你的学习有所帮助</p></blockquote><h1 id="git-新建项目并提交远程仓库💪"><a href="#git-新建项目并提交远程仓库💪" class="headerlink" title="git_新建项目并提交远程仓库💪"></a>git_新建项目并提交远程仓库💪</h1><p>先从最简单的说起，新手如何快速的新建项目并提交到仓库，以及当你本地有项目时，如何与远程空仓链接。</p><ol><li><p>在本地项目所在文件夹执行<code>git init</code> 命令<code>--&gt;</code>会生成一个<code>.git</code>的隐藏文件夹</p></li><li><p>使用<code>git add file</code>命令将改变添加到<u>暂存区</u>，<code>git add *</code>是添加所有文件。</p></li><li><p>添加完毕后可以使用<code>git commit -m &quot;注释&quot;</code>将暂存区内容提交到仓库。如果已经关联了远程仓库，就可以执行<code>push</code>命令就行。如果是第一次为关联的情况，<u>则需要绑定仓库</u>。</p><ol><li><p>登录仓库并创建仓库，这一步的目的是为了获取一个仓库的<code>URL</code>或者<code>SSH</code>，用来和本地关联；</p></li><li><p>获取<code>SSH</code>之后就可以继续绑定了。执行<code>git remote add origin(远程仓库的别名，可以自己命名) ‘URL\SSH’</code>，就可以将本地与远程仓关联起来。</p></li><li><blockquote><p>但是这时候如果你在新建仓库时选择了初始化文件，就会导致本地和远程仓文件不一致，实际上尽管已经关联，但是还是两个单独的仓库，因此需要一些初始化操作让本地和远程同步。建议就是把远程仓的东西拉到本地。</p><p>执行<code>git pull origin master --allow-unrelated-histories</code>就可以把远程仓的东西拉到本地。</p></blockquote></li><li><p>将本地文件推送到远程仓库，使用<code>git push origin master</code>开始推送。</p><ol><li><code>git push</code>将当前分支推送至远程同名分支</li><li><code>git push origin [branch]:[branch]</code>推送本地某分支至远程某分支</li><li><code>git push -u origin [branch]:[branch]</code>推送本地某分支至远程某分支，并跟踪</li></ol></li></ol></li></ol><hr><p>当你查不多已经提交了几个项目之后，我想你就需要更多的一些使用方法帮助你更快的管理你的项目。以下是我在实际使用过程中的一些记录。仅供参考</p><hr><h1 id="git-log最强命令合集"><a href="#git-log最强命令合集" class="headerlink" title="git log最强命令合集"></a>git log最强命令合集</h1><p><code>git log</code>可以说是你在提交或者查看项目时比较常用的一个命令，方便你快速的查看日志，配合参数使用更强大。</p><p><a href="#id1">1. git log</a>、<a href="#id2">2. git log -n</a>、<a href="#id3">3. git log –start -n</a>、<a href="#id4">4. 指定日期、关键字、作者</a>、<a href="#id5">5. 查看某次commit做了哪些修改</a>、</p><p><a href="#id6">最强推荐版</a></p><p><i id="id1">1. git log</i></p><p>- 查看历史提交记录</p><p>不传入任何参数的默认情况下，<code>git log</code> 会按时间先后顺序列出所有的提交，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。</p><p><i id="id2">2. git log -n</i></p><p>如果不想向上面那样全部显示，可以选择显示前N条。</p><p><i id="id3">3. git log -start -n</i></p><p>显示简要的增改行数统计,每次提交文件的变更统计，-n 同上，前n条，可省略。</p><p><img src="https://cdn.jsdelivr.net/gh/fole-del/img/20210309104214.png" alt="gitlogstartn"></p><p><i id="id4">4. 指定日志、关键字、作者</i></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">如两天前的提交历史：git log --since&#x3D;2.days<br>如指定作者为&quot;BeginMan&quot;的所有提交:$ git log --author&#x3D;BeginMan<br>如指定关键字为“init”的所有提交：$ git log --grep&#x3D;init<br>如指定提交者为&quot;Jack&quot;的所有提交：$ git log --committer&#x3D;Jack<br>注意作者与提交者的关系：作者是程序的修改者，提交者是代码提交人。<br></code></pre></td></tr></table></figure><p>如指定2天前，作者为“BeginMan”的提交含有关键字’init’的前2条记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git log --since&#x3D;2.days --author&#x3D;BeginMan --grep&#x3D;init -2<br></code></pre></td></tr></table></figure><p><i id="id5">5. 查看某次commit做了哪些修改</i></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git log                       #查看commit的历史<br>git show &lt;commit-hash-id&gt;     #查看某次commit的修改内容<br></code></pre></td></tr></table></figure><hr><center><i id="id6" style="color:green;font-family:华文彩云;font-weight:900;font-size:100px">最强推荐版</i></center><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git log --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date&#x3D;relative<br></code></pre></td></tr></table></figure><p>参考的stormZhang的教程：</p><p>效果炫酷，但是命令较长。但是，可以通过设置别名来使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config --global alias.lg &quot;log --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date&#x3D;relative&quot;<br></code></pre></td></tr></table></figure><p>设置别名之后就可以通过<code>git lg</code>来调用上述自定义语句了，感兴趣的猿猿可以自己了解一下。</p><hr><p>当然还有其他一些命令方便日志查询：</p><ol><li><code>git log --oneline</code></li><li><code>git log --stat</code></li><li><code>git log -p</code></li><li><code>git shortlog</code></li><li><code>git log --graph --oneline --decorate</code></li></ol><h2 id="git-branch常用命令"><a href="#git-branch常用命令" class="headerlink" title="git branch常用命令"></a>git branch常用命令</h2><ol><li><code>git branch</code> 查看本地所有分支</li><li><code>git branch -r</code> 查看远程所有分支 </li><li><code>git branch -a</code> 查看本地和远程的所有分支 </li><li><code>git branch &lt;branchname&gt;</code> 新建分支 </li><li><code>git branch -d &lt;branchname&gt;</code> 删除本地分支 </li><li><code>git branch -d -r &lt;branchname&gt;</code> 删除远程分支，删除后还需推送到服务器 </li><li><code>git push origin:&lt;branchname&gt;</code>  删除后推送至服务器 </li><li><code>git branch -m &lt;oldbranch&gt; &lt;newbranch&gt;</code> 重命名本地分支</li></ol><h3 id="分支补充"><a href="#分支补充" class="headerlink" title="分支补充"></a>分支补充</h3><ol><li><p><code>git checkout</code>命令用于切换分支或恢复工作树文件。<code>git checkout</code>是git最常用的命令之一，同时也是一个很危险的命令，因为这条命令会重写工作区。<br><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout master #(1)<br>git checkout master~2 Makefile  #(2)<br>rm -f hello.c<br>git checkout hello.c#(3)<br></code></pre></td></tr></table></figure><p>（1）切换分支、（2）从另一个提交中取出文件、（3）从索引中回复hello.c</p></li><li></li></ol><h2 id="git-常用命令-一"><a href="#git-常用命令-一" class="headerlink" title="git 常用命令 一"></a>git 常用命令 一</h2><ol><li><code>git show</code> 命令用于显示各种类型的对象</li><li><code>git push -u origin master -f</code> 强制推送</li></ol><h2 id="git-查看远程仓"><a href="#git-查看远程仓" class="headerlink" title="git 查看远程仓"></a>git 查看远程仓</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br></code></pre></td></tr></table></figure><h1 id="git-commit-emoji"><a href="#git-commit-emoji" class="headerlink" title="git commit emoji"></a>git commit emoji</h1><p>example:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;:tada: Initial commit&quot;<br></code></pre></td></tr></table></figure><p>|        emoji         |          emoji 代码           |         commit 说明          |<br>| :——————: | :—————————: | :————————–: | :–: |<br>|      🎨 (调色板)      |            <code>:art:</code>            |   改进代码结构 / 代码格式    |<br>|  ⚡️ (闪电) 🐎 (赛马)   |     <code>:zap:</code> <code>:racehorse:</code>     |           提升性能           |<br>|       🔥 (火焰)       |           <code>:fire:</code>            |        移除代码或文件        |<br>|       🐛 (bug)        |            <code>:bug:</code>            |           修复 bug           |<br>|      🚑 (急救车)      |         <code>:ambulance:</code>         |           重要补丁           |<br>|       ✨ (火花)       |         <code>:sparkles:</code>          |          引入新功能          |<br>|      📝 (备忘录)      |           <code>:memo:</code>            |           撰写文档           |<br>|       🚀 (火箭)       |          <code>:rocket:</code>           |           部署功能           |<br>|       💄 (口红)       |         <code>:lipstick:</code>          |      更新 UI 和样式文件      |<br>|       🎉 (庆祝)       |           <code>:tada:</code>            |           初次提交           |<br>|    ✅ (白色复选框)    |     <code>:white_check_mark:</code>      |           更新测试           |<br>|        🔒 (锁)        |           <code>:lock:</code>            |         修复安全问题         |<br>|       🍎 (苹果)       |           <code>:apple:</code>           |     修复 macOS 下的问题      |<br>|       🐧 (企鹅)       |          <code>:penguin:</code>          |     修复 Linux 下的问题      |<br>|       🏁 (旗帜)       |      <code>:checkered_flag:</code>       |    修复 Windows 下的问题     |<br>|     🤖（机器人）      |           <code>:robot:</code>           |    修复 Android 下的问题     |<br>|      🍏 (绿苹果)      |        <code>:green_apple:</code>        |      修复 iOS 下的问题       |<br>|       🔖 (书签)       |         <code>:bookmark:</code>          |       发行 / 版本标签        |<br>|      🚨 (警车灯)      |      <code>:rotating_light:</code>       |       移除 linter 警告       |<br>|       🚧 (施工)       |       <code>:construction:</code>        |          工作进行中          |<br>|       👷 (工人)       |    <code>:construction_worker:</code>    |       添加 CI 构建系统       |<br>|       💚 (绿心)       |        <code>:green_heart:</code>        |       修复 CI 构建问题       |<br>|     ⬆️ (上升箭头)     |         <code>:arrow_up:</code>          |           升级依赖           |<br>|     ⬇️ (下降箭头)     |        <code>:arrow_down:</code>         |           降级依赖           |<br>|       📌 (图钉)       |          <code>:pushpin:</code>          |    将依赖项固定到特定版本    |<br>|    📈 (上升趋势图)    | <code>:chart_with_upwards_trend:</code>  |      添加分析或跟踪代码      |<br>|      ♻️ （回收）      |          <code>:recycle:</code>          |           重构代码           |<br>|       🐳 (鲸鱼)       |           <code>:whale:</code>           |       Docker 相关工作        |<br>| 🌐 (带子午线的地球仪) |   <code>:globe_with_meridians:</code>    |        国际化与本地化        |<br>|       ➕ (加号)       |      <code>:heavy_plus_sign:</code>      |         增加一个依赖         |<br>|       ➖ (减号)       |     <code>:heavy_minus_sign:</code>      |         减少一个依赖         |<br>|       🔧 (扳手)       |          <code>:wrench:</code>           |         修改配置文件         |<br>|       🔨 (锤子)       |          <code>:hammer:</code>           |           重大重构           |<br>|       ✏️ (铅笔)       |          <code>:pencil2:</code>          |          修复 typo           |<br>|      💩 (粑粑…)       |          <code>:hankey:</code>           |     写了辣鸡代码需要优化     |<br>|       ⏪ (倒带)       |          <code>:rewind:</code>           |           恢复更改           |<br>|  🔀 (交叉向右的箭头)  | <code>:twisted_rightwards_arrows:</code> |           合并分支           |<br>|       📦 (包裹)       |          <code>:package:</code>          |      更新编译的文件或包      |<br>|      👽 (外星人)      |           <code>:alien:</code>           | 由于外部 API 更改而更新代码  |<br>|       🚚 (货车)       |           <code>:truck:</code>           |      移动或者重命名文件      |<br>|  📄 (正面朝上的页面)  |      <code>:page_facing_up:</code>       |      增加或更新许可证书      |<br>|       💥 (爆炸)       |           <code>:boom:</code>            |       引入突破性的变化       |<br>|       🍱 (铅笔)       |           <code>:bento:</code>           |        增加或更新资源        |<br>|     👌 (OK 手势)      |          <code>:ok_hand:</code>          |  由于代码审查更改而更新代码  |<br>|       ♿️ (轮椅)       |        <code>:wheelchair:</code>         |        改善无障碍交互        |<br>|       💡 (灯泡)       |           <code>:bulb:</code>            |        给代码添加注释        |<br>|       🍻 (啤酒)       |           <code>:beers:</code>           |       醉醺醺地写代码…        |<br>|     💬 (消息气泡)     |      <code>:speech_balloon:</code>       |         更新文本文档         |<br>|    🗃 (卡片文件盒)    |       <code>:card_file_box:</code>       |    执行与数据库相关的更改    |<br>|      🔊 (音量大)      |        <code>:loud_sound:</code>         |           增加日志           |<br>|       🔇 (静音)       |           <code>:mute:</code>            |           移除日志           |<br>|  👥 (轮廓中的半身像)  |    <code>:busts_in_silhouette:</code>    |          增加贡献者          |<br>|     🚸 (孩童通行)     |     <code>:children_crossing:</code>     |     优化用户体验、可用性     |<br>|     🏗 (建筑建造)     |   <code>:building_construction:</code>   |           结构变动           |<br>|      📱 (iPhone)      |          <code>:iphone:</code>           |         做响应式设计         |<br>|      🤡 (小丑脸)      |        <code>:clown_face:</code>         | 嘲弄事物（直译，这个没明白） |<br>|       🥚 (鸡蛋)       |            <code>:egg:</code>            |           增加彩蛋           |<br>|    🙈 (看不见邪恶)    |        <code>:see_no_evil:</code>        |     增加或更改 gitignore     |<br>|   📸 (照相机闪光灯)   |       <code>:camera_flash:</code>        |        增加或更新截图        |<br>|      ⚗️ (蒸馏器)      |          <code>:alembic:</code>          |          尝试新东西          |<br>|      🔍 (放大镜)      |            <code>:mag:</code>            |           SEO 优化           |<br>|    ☸️ (船的方向盘)    |      <code>:wheel_of_dharma:</code>      |    关于 Kubernetes 的工作    |<br>|       🏷 (标签)       |           <code>:label:</code>           | 增加类型（FLow、Typescript） |</p>]]></content>
    
    
    <summary type="html">git_新建项目并提交远程仓库|以及git强化命令手册</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="杂记" scheme="https://www.mingsrc.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="git" scheme="https://www.mingsrc.xyz/tags/git/"/>
    
  </entry>
  
</feed>
